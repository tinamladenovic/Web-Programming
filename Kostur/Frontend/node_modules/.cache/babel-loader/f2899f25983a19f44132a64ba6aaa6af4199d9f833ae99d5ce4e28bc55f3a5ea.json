{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/layer/WebGLTile\n */\nimport BaseTileLayer from './BaseTile.js';\nimport LayerProperty from '../layer/Property.js';\nimport WebGLTileLayerRenderer, { Attributes, Uniforms } from '../renderer/webgl/TileLayer.js';\nimport { ColorType, NumberType } from '../expr/expression.js';\nimport { PALETTE_TEXTURE_ARRAY, getStringNumberEquivalent, newCompilationContext, uniformNameForVariable } from '../expr/gpu.js';\nimport { expressionToGlsl } from '../webgl/styleparser.js';\n\n/**\n * @typedef {import(\"../source/DataTile.js\").default|import(\"../source/TileImage.js\").default} SourceType\n */\n\n/**\n * @typedef {Object} Style\n * Translates tile data to rendered pixels.\n *\n * @property {Object<string, (string|number)>} [variables] Style variables.  Each variable must hold a number or string.  These\n * variables can be used in the `color`, `brightness`, `contrast`, `exposure`, `saturation` and `gamma`\n * {@link import(\"../expr/expression.js\").ExpressionValue expressions}, using the `['var', 'varName']` operator.\n * To update style variables, use the {@link import(\"./WebGLTile.js\").default#updateStyleVariables} method.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [color] An expression applied to color values.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [brightness=0] Value used to decrease or increase\n * the layer brightness.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [contrast=0] Value used to decrease or increase\n * the layer contrast.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [exposure=0] Value used to decrease or increase\n * the layer exposure.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [saturation=0] Value used to decrease or increase\n * the layer saturation.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [gamma=1] Apply a gamma correction to the layer.\n * Values range from 0 to infinity.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Style} [style] Style to apply to the layer.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {SourceType} [source] Source for this layer.\n * @property {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>} [sources] Array\n * of sources for this layer. Takes precedence over `source`. Can either be an array of sources, or a function that\n * expects an extent and a resolution (in view projection units per pixel) and returns an array of sources. See\n * {@link module:ol/source.sourcesFromTileGrid} for a helper function to generate sources that are organized in a\n * pyramid following the same pattern as a tile grid. **Note:** All sources must have the same band count and content.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map~Map#addLayer}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n * @property {number} [cacheSize=512] The internal texture cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} ParsedStyle\n * @property {string} vertexShader The vertex shader.\n * @property {string} fragmentShader The fragment shader.\n * @property {Object<string,import(\"../webgl/Helper.js\").UniformValue>} uniforms Uniform definitions.\n * @property {Array<import(\"../webgl/PaletteTexture.js\").default>} paletteTextures Palette textures.\n */\n\n/**\n * @param {Style} style The layer style.\n * @param {number} [bandCount] The number of bands.\n * @return {ParsedStyle} Shaders and uniforms generated from the style.\n */\nfunction parseStyle(style, bandCount) {\n  const vertexShader = `\n    attribute vec2 ${Attributes.TEXTURE_COORD};\n    uniform mat4 ${Uniforms.TILE_TRANSFORM};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.TEXTURE_RESOLUTION};\n    uniform float ${Uniforms.TEXTURE_ORIGIN_X};\n    uniform float ${Uniforms.TEXTURE_ORIGIN_Y};\n    uniform float ${Uniforms.DEPTH};\n\n    varying vec2 v_textureCoord;\n    varying vec2 v_mapCoord;\n\n    void main() {\n      v_textureCoord = ${Attributes.TEXTURE_COORD};\n      v_mapCoord = vec2(\n        ${Uniforms.TEXTURE_ORIGIN_X} + ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_WIDTH} * v_textureCoord[0],\n        ${Uniforms.TEXTURE_ORIGIN_Y} - ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_HEIGHT} * v_textureCoord[1]\n      );\n      gl_Position = ${Uniforms.TILE_TRANSFORM} * vec4(${Attributes.TEXTURE_COORD}, ${Uniforms.DEPTH}, 1.0);\n    }\n  `;\n\n  /**\n   * @type {import(\"../expr/gpu.js\").CompilationContext}\n   */\n  const context = {\n    ...newCompilationContext(),\n    inFragmentShader: true,\n    bandCount: bandCount,\n    style: style\n  };\n  const pipeline = [];\n  if (style.color !== undefined) {\n    const color = expressionToGlsl(context, style.color, ColorType);\n    pipeline.push(`color = ${color};`);\n  }\n  if (style.contrast !== undefined) {\n    const contrast = expressionToGlsl(context, style.contrast, NumberType);\n    pipeline.push(`color.rgb = clamp((${contrast} + 1.0) * color.rgb - (${contrast} / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`);\n  }\n  if (style.exposure !== undefined) {\n    const exposure = expressionToGlsl(context, style.exposure, NumberType);\n    pipeline.push(`color.rgb = clamp((${exposure} + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`);\n  }\n  if (style.saturation !== undefined) {\n    const saturation = expressionToGlsl(context, style.saturation, NumberType);\n    pipeline.push(`\n      float saturation = ${saturation} + 1.0;\n      float sr = (1.0 - saturation) * 0.2126;\n      float sg = (1.0 - saturation) * 0.7152;\n      float sb = (1.0 - saturation) * 0.0722;\n      mat3 saturationMatrix = mat3(\n        sr + saturation, sr, sr,\n        sg, sg + saturation, sg,\n        sb, sb, sb + saturation\n      );\n      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\n    `);\n  }\n  if (style.gamma !== undefined) {\n    const gamma = expressionToGlsl(context, style.gamma, NumberType);\n    pipeline.push(`color.rgb = pow(color.rgb, vec3(1.0 / ${gamma}));`);\n  }\n  if (style.brightness !== undefined) {\n    const brightness = expressionToGlsl(context, style.brightness, NumberType);\n    pipeline.push(`color.rgb = clamp(color.rgb + ${brightness}, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`);\n  }\n\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\n  const uniforms = {};\n  const numVariables = Object.keys(context.variables).length;\n  if (numVariables > 1 && !style.variables) {\n    throw new Error(`Missing variables in style (expected ${context.variables})`);\n  }\n  for (let i = 0; i < numVariables; ++i) {\n    const variable = context.variables[Object.keys(context.variables)[i]];\n    if (!(variable.name in style.variables)) {\n      throw new Error(`Missing '${variable.name}' in style variables`);\n    }\n    const uniformName = uniformNameForVariable(variable.name);\n    uniforms[uniformName] = function () {\n      let value = style.variables[variable.name];\n      if (typeof value === 'string') {\n        value = getStringNumberEquivalent(value);\n      }\n      return value !== undefined ? value : -9999999; // to avoid matching with the first string literal\n    };\n  }\n  const uniformDeclarations = Object.keys(uniforms).map(function (name) {\n    return `uniform float ${name};`;\n  });\n  const textureCount = Math.ceil(bandCount / 4);\n  uniformDeclarations.push(`uniform sampler2D ${Uniforms.TILE_TEXTURE_ARRAY}[${textureCount}];`);\n  if (context.paletteTextures) {\n    uniformDeclarations.push(`uniform sampler2D ${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}];`);\n  }\n  const functionDefintions = Object.keys(context.functions).map(function (name) {\n    return context.functions[name];\n  });\n  const fragmentShader = `\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    #else\n    precision mediump float;\n    #endif\n\n    varying vec2 v_textureCoord;\n    varying vec2 v_mapCoord;\n    uniform vec4 ${Uniforms.RENDER_EXTENT};\n    uniform float ${Uniforms.TRANSITION_ALPHA};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.RESOLUTION};\n    uniform float ${Uniforms.ZOOM};\n\n    ${uniformDeclarations.join('\\n')}\n\n    ${functionDefintions.join('\\n')}\n\n    void main() {\n      if (\n        v_mapCoord[0] < ${Uniforms.RENDER_EXTENT}[0] ||\n        v_mapCoord[1] < ${Uniforms.RENDER_EXTENT}[1] ||\n        v_mapCoord[0] > ${Uniforms.RENDER_EXTENT}[2] ||\n        v_mapCoord[1] > ${Uniforms.RENDER_EXTENT}[3]\n      ) {\n        discard;\n      }\n\n      vec4 color = texture2D(${Uniforms.TILE_TEXTURE_ARRAY}[0],  v_textureCoord);\n\n      ${pipeline.join('\\n')}\n\n      gl_FragColor = color;\n      gl_FragColor.rgb *= gl_FragColor.a;\n      gl_FragColor *= ${Uniforms.TRANSITION_ALPHA};\n    }`;\n  return {\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    uniforms: uniforms,\n    paletteTextures: context.paletteTextures\n  };\n}\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @extends BaseTileLayer<SourceType, WebGLTileLayerRenderer>\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\nclass WebGLTileLayer extends BaseTileLayer {\n  /**\n   * @param {Options} options Tile layer options.\n   */\n  constructor(options) {\n    options = options ? Object.assign({}, options) : {};\n    const style = options.style || {};\n    delete options.style;\n    const cacheSize = options.cacheSize;\n    delete options.cacheSize;\n    super(options);\n\n    /**\n     * @type {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>}\n     * @private\n     */\n    this.sources_ = options.sources;\n\n    /**\n     * @type {SourceType|null}\n     * @private\n     */\n    this.renderedSource_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @type {Style}\n     * @private\n     */\n    this.style_ = style;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.cacheSize_ = cacheSize;\n\n    /**\n     * @type {Object<string, (string|number)>}\n     * @private\n     */\n    this.styleVariables_ = this.style_.variables || {};\n    this.addChangeListener(LayerProperty.SOURCE, this.handleSourceUpdate_);\n  }\n\n  /**\n   * Gets the sources for this layer, for a given extent and resolution.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @return {Array<SourceType>} Sources.\n   */\n  getSources(extent, resolution) {\n    const source = this.getSource();\n    return this.sources_ ? typeof this.sources_ === 'function' ? this.sources_(extent, resolution) : this.sources_ : source ? [source] : [];\n  }\n\n  /**\n   * @return {SourceType} The source being rendered.\n   */\n  getRenderSource() {\n    return this.renderedSource_ || this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    const source = this.getRenderSource();\n    return source ? source.getState() : 'undefined';\n  }\n\n  /**\n   * @private\n   */\n  handleSourceUpdate_() {\n    if (this.hasRenderer()) {\n      this.getRenderer().clearCache();\n    }\n    if (this.getSource()) {\n      this.setStyle(this.style_);\n    }\n  }\n\n  /**\n   * @private\n   * @return {number} The number of source bands.\n   */\n  getSourceBandCount_() {\n    const max = Number.MAX_SAFE_INTEGER;\n    const sources = this.getSources([-max, -max, max, max], max);\n    return sources && sources.length && 'bandCount' in sources[0] ? sources[0].bandCount : 4;\n  }\n  createRenderer() {\n    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n    return new WebGLTileLayerRenderer(this, {\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      cacheSize: this.cacheSize_,\n      paletteTextures: parsedStyle.paletteTextures\n    });\n  }\n\n  /**\n   * @param {import(\"../Map\").FrameState} frameState Frame state.\n   * @param {Array<SourceType>} sources Sources.\n   * @return {HTMLElement} Canvas.\n   */\n  renderSources(frameState, sources) {\n    const layerRenderer = this.getRenderer();\n    let canvas;\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\n      this.renderedSource_ = sources[i];\n      if (layerRenderer.prepareFrame(frameState)) {\n        canvas = layerRenderer.renderFrame(frameState);\n      }\n    }\n    return canvas;\n  }\n\n  /**\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n  render(frameState, target) {\n    this.rendered = true;\n    const viewState = frameState.viewState;\n    const sources = this.getSources(frameState.extent, viewState.resolution);\n    let ready = true;\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\n      const source = sources[i];\n      const sourceState = source.getState();\n      if (sourceState == 'loading') {\n        const onChange = () => {\n          if (source.getState() == 'ready') {\n            source.removeEventListener('change', onChange);\n            this.changed();\n          }\n        };\n        source.addEventListener('change', onChange);\n      }\n      ready = ready && sourceState == 'ready';\n    }\n    const canvas = this.renderSources(frameState, sources);\n    if (this.getRenderer().renderComplete && ready) {\n      // Fully rendered, done.\n      this.renderedResolution_ = viewState.resolution;\n      return canvas;\n    }\n    // Render sources from previously fully rendered frames\n    if (this.renderedResolution_ > 0.5 * viewState.resolution) {\n      const altSources = this.getSources(frameState.extent, this.renderedResolution_).filter(source => !sources.includes(source));\n      if (altSources.length > 0) {\n        return this.renderSources(frameState, altSources);\n      }\n    }\n    return canvas;\n  }\n\n  /**\n   * Update the layer style.  The `updateStyleVariables` function is a more efficient\n   * way to update layer rendering.  In cases where the whole style needs to be updated,\n   * this method may be called instead.  Note that calling this method will also replace\n   * any previously set variables, so the new style also needs to include new variables,\n   * if needed.\n   * @param {Style} style The new style.\n   */\n  setStyle(style) {\n    this.styleVariables_ = style.variables || {};\n    this.style_ = style;\n    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n    const renderer = this.getRenderer();\n    renderer.reset({\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      paletteTextures: parsedStyle.paletteTextures\n    });\n    this.changed();\n  }\n\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   * @api\n   */\n  updateStyleVariables(variables) {\n    Object.assign(this.styleVariables_, variables);\n    this.changed();\n  }\n}\n\n/**\n * Clean up underlying WebGL resources.\n * @function\n * @api\n */\nWebGLTileLayer.prototype.dispose;\nexport default WebGLTileLayer;","map":{"version":3,"names":["BaseTileLayer","LayerProperty","WebGLTileLayerRenderer","Attributes","Uniforms","ColorType","NumberType","PALETTE_TEXTURE_ARRAY","getStringNumberEquivalent","newCompilationContext","uniformNameForVariable","expressionToGlsl","parseStyle","style","bandCount","vertexShader","TEXTURE_COORD","TILE_TRANSFORM","TEXTURE_PIXEL_WIDTH","TEXTURE_PIXEL_HEIGHT","TEXTURE_RESOLUTION","TEXTURE_ORIGIN_X","TEXTURE_ORIGIN_Y","DEPTH","context","inFragmentShader","pipeline","color","undefined","push","contrast","exposure","saturation","gamma","brightness","uniforms","numVariables","Object","keys","variables","length","Error","i","variable","name","uniformName","value","uniformDeclarations","map","textureCount","Math","ceil","TILE_TEXTURE_ARRAY","paletteTextures","functionDefintions","functions","fragmentShader","RENDER_EXTENT","TRANSITION_ALPHA","RESOLUTION","ZOOM","join","WebGLTileLayer","constructor","options","assign","cacheSize","sources_","sources","renderedSource_","renderedResolution_","NaN","style_","cacheSize_","styleVariables_","addChangeListener","SOURCE","handleSourceUpdate_","getSources","extent","resolution","source","getSource","getRenderSource","getSourceState","getState","hasRenderer","getRenderer","clearCache","setStyle","getSourceBandCount_","max","Number","MAX_SAFE_INTEGER","createRenderer","parsedStyle","renderSources","frameState","layerRenderer","canvas","ii","prepareFrame","renderFrame","render","target","rendered","viewState","ready","sourceState","onChange","removeEventListener","changed","addEventListener","renderComplete","altSources","filter","includes","renderer","reset","updateStyleVariables","prototype","dispose"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/node_modules/ol/layer/WebGLTile.js"],"sourcesContent":["/**\n * @module ol/layer/WebGLTile\n */\nimport BaseTileLayer from './BaseTile.js';\nimport LayerProperty from '../layer/Property.js';\nimport WebGLTileLayerRenderer, {\n  Attributes,\n  Uniforms,\n} from '../renderer/webgl/TileLayer.js';\nimport {ColorType, NumberType} from '../expr/expression.js';\nimport {\n  PALETTE_TEXTURE_ARRAY,\n  getStringNumberEquivalent,\n  newCompilationContext,\n  uniformNameForVariable,\n} from '../expr/gpu.js';\nimport {expressionToGlsl} from '../webgl/styleparser.js';\n\n/**\n * @typedef {import(\"../source/DataTile.js\").default|import(\"../source/TileImage.js\").default} SourceType\n */\n\n/**\n * @typedef {Object} Style\n * Translates tile data to rendered pixels.\n *\n * @property {Object<string, (string|number)>} [variables] Style variables.  Each variable must hold a number or string.  These\n * variables can be used in the `color`, `brightness`, `contrast`, `exposure`, `saturation` and `gamma`\n * {@link import(\"../expr/expression.js\").ExpressionValue expressions}, using the `['var', 'varName']` operator.\n * To update style variables, use the {@link import(\"./WebGLTile.js\").default#updateStyleVariables} method.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [color] An expression applied to color values.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [brightness=0] Value used to decrease or increase\n * the layer brightness.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [contrast=0] Value used to decrease or increase\n * the layer contrast.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [exposure=0] Value used to decrease or increase\n * the layer exposure.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [saturation=0] Value used to decrease or increase\n * the layer saturation.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [gamma=1] Apply a gamma correction to the layer.\n * Values range from 0 to infinity.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Style} [style] Style to apply to the layer.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {SourceType} [source] Source for this layer.\n * @property {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>} [sources] Array\n * of sources for this layer. Takes precedence over `source`. Can either be an array of sources, or a function that\n * expects an extent and a resolution (in view projection units per pixel) and returns an array of sources. See\n * {@link module:ol/source.sourcesFromTileGrid} for a helper function to generate sources that are organized in a\n * pyramid following the same pattern as a tile grid. **Note:** All sources must have the same band count and content.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map~Map#addLayer}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n * @property {number} [cacheSize=512] The internal texture cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} ParsedStyle\n * @property {string} vertexShader The vertex shader.\n * @property {string} fragmentShader The fragment shader.\n * @property {Object<string,import(\"../webgl/Helper.js\").UniformValue>} uniforms Uniform definitions.\n * @property {Array<import(\"../webgl/PaletteTexture.js\").default>} paletteTextures Palette textures.\n */\n\n/**\n * @param {Style} style The layer style.\n * @param {number} [bandCount] The number of bands.\n * @return {ParsedStyle} Shaders and uniforms generated from the style.\n */\nfunction parseStyle(style, bandCount) {\n  const vertexShader = `\n    attribute vec2 ${Attributes.TEXTURE_COORD};\n    uniform mat4 ${Uniforms.TILE_TRANSFORM};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.TEXTURE_RESOLUTION};\n    uniform float ${Uniforms.TEXTURE_ORIGIN_X};\n    uniform float ${Uniforms.TEXTURE_ORIGIN_Y};\n    uniform float ${Uniforms.DEPTH};\n\n    varying vec2 v_textureCoord;\n    varying vec2 v_mapCoord;\n\n    void main() {\n      v_textureCoord = ${Attributes.TEXTURE_COORD};\n      v_mapCoord = vec2(\n        ${Uniforms.TEXTURE_ORIGIN_X} + ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_WIDTH} * v_textureCoord[0],\n        ${Uniforms.TEXTURE_ORIGIN_Y} - ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_HEIGHT} * v_textureCoord[1]\n      );\n      gl_Position = ${Uniforms.TILE_TRANSFORM} * vec4(${Attributes.TEXTURE_COORD}, ${Uniforms.DEPTH}, 1.0);\n    }\n  `;\n\n  /**\n   * @type {import(\"../expr/gpu.js\").CompilationContext}\n   */\n  const context = {\n    ...newCompilationContext(),\n    inFragmentShader: true,\n    bandCount: bandCount,\n    style: style,\n  };\n\n  const pipeline = [];\n\n  if (style.color !== undefined) {\n    const color = expressionToGlsl(context, style.color, ColorType);\n    pipeline.push(`color = ${color};`);\n  }\n\n  if (style.contrast !== undefined) {\n    const contrast = expressionToGlsl(context, style.contrast, NumberType);\n    pipeline.push(\n      `color.rgb = clamp((${contrast} + 1.0) * color.rgb - (${contrast} / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`,\n    );\n  }\n\n  if (style.exposure !== undefined) {\n    const exposure = expressionToGlsl(context, style.exposure, NumberType);\n    pipeline.push(\n      `color.rgb = clamp((${exposure} + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`,\n    );\n  }\n\n  if (style.saturation !== undefined) {\n    const saturation = expressionToGlsl(context, style.saturation, NumberType);\n    pipeline.push(`\n      float saturation = ${saturation} + 1.0;\n      float sr = (1.0 - saturation) * 0.2126;\n      float sg = (1.0 - saturation) * 0.7152;\n      float sb = (1.0 - saturation) * 0.0722;\n      mat3 saturationMatrix = mat3(\n        sr + saturation, sr, sr,\n        sg, sg + saturation, sg,\n        sb, sb, sb + saturation\n      );\n      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\n    `);\n  }\n\n  if (style.gamma !== undefined) {\n    const gamma = expressionToGlsl(context, style.gamma, NumberType);\n    pipeline.push(`color.rgb = pow(color.rgb, vec3(1.0 / ${gamma}));`);\n  }\n\n  if (style.brightness !== undefined) {\n    const brightness = expressionToGlsl(context, style.brightness, NumberType);\n    pipeline.push(\n      `color.rgb = clamp(color.rgb + ${brightness}, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`,\n    );\n  }\n\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\n  const uniforms = {};\n\n  const numVariables = Object.keys(context.variables).length;\n  if (numVariables > 1 && !style.variables) {\n    throw new Error(\n      `Missing variables in style (expected ${context.variables})`,\n    );\n  }\n\n  for (let i = 0; i < numVariables; ++i) {\n    const variable = context.variables[Object.keys(context.variables)[i]];\n    if (!(variable.name in style.variables)) {\n      throw new Error(`Missing '${variable.name}' in style variables`);\n    }\n    const uniformName = uniformNameForVariable(variable.name);\n    uniforms[uniformName] = function () {\n      let value = style.variables[variable.name];\n      if (typeof value === 'string') {\n        value = getStringNumberEquivalent(value);\n      }\n      return value !== undefined ? value : -9999999; // to avoid matching with the first string literal\n    };\n  }\n\n  const uniformDeclarations = Object.keys(uniforms).map(function (name) {\n    return `uniform float ${name};`;\n  });\n\n  const textureCount = Math.ceil(bandCount / 4);\n  uniformDeclarations.push(\n    `uniform sampler2D ${Uniforms.TILE_TEXTURE_ARRAY}[${textureCount}];`,\n  );\n\n  if (context.paletteTextures) {\n    uniformDeclarations.push(\n      `uniform sampler2D ${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}];`,\n    );\n  }\n\n  const functionDefintions = Object.keys(context.functions).map(\n    function (name) {\n      return context.functions[name];\n    },\n  );\n\n  const fragmentShader = `\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    #else\n    precision mediump float;\n    #endif\n\n    varying vec2 v_textureCoord;\n    varying vec2 v_mapCoord;\n    uniform vec4 ${Uniforms.RENDER_EXTENT};\n    uniform float ${Uniforms.TRANSITION_ALPHA};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.RESOLUTION};\n    uniform float ${Uniforms.ZOOM};\n\n    ${uniformDeclarations.join('\\n')}\n\n    ${functionDefintions.join('\\n')}\n\n    void main() {\n      if (\n        v_mapCoord[0] < ${Uniforms.RENDER_EXTENT}[0] ||\n        v_mapCoord[1] < ${Uniforms.RENDER_EXTENT}[1] ||\n        v_mapCoord[0] > ${Uniforms.RENDER_EXTENT}[2] ||\n        v_mapCoord[1] > ${Uniforms.RENDER_EXTENT}[3]\n      ) {\n        discard;\n      }\n\n      vec4 color = texture2D(${\n        Uniforms.TILE_TEXTURE_ARRAY\n      }[0],  v_textureCoord);\n\n      ${pipeline.join('\\n')}\n\n      gl_FragColor = color;\n      gl_FragColor.rgb *= gl_FragColor.a;\n      gl_FragColor *= ${Uniforms.TRANSITION_ALPHA};\n    }`;\n\n  return {\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    uniforms: uniforms,\n    paletteTextures: context.paletteTextures,\n  };\n}\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @extends BaseTileLayer<SourceType, WebGLTileLayerRenderer>\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\nclass WebGLTileLayer extends BaseTileLayer {\n  /**\n   * @param {Options} options Tile layer options.\n   */\n  constructor(options) {\n    options = options ? Object.assign({}, options) : {};\n\n    const style = options.style || {};\n    delete options.style;\n\n    const cacheSize = options.cacheSize;\n    delete options.cacheSize;\n\n    super(options);\n\n    /**\n     * @type {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>}\n     * @private\n     */\n    this.sources_ = options.sources;\n\n    /**\n     * @type {SourceType|null}\n     * @private\n     */\n    this.renderedSource_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @type {Style}\n     * @private\n     */\n    this.style_ = style;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.cacheSize_ = cacheSize;\n\n    /**\n     * @type {Object<string, (string|number)>}\n     * @private\n     */\n    this.styleVariables_ = this.style_.variables || {};\n\n    this.addChangeListener(LayerProperty.SOURCE, this.handleSourceUpdate_);\n  }\n\n  /**\n   * Gets the sources for this layer, for a given extent and resolution.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @return {Array<SourceType>} Sources.\n   */\n  getSources(extent, resolution) {\n    const source = this.getSource();\n    return this.sources_\n      ? typeof this.sources_ === 'function'\n        ? this.sources_(extent, resolution)\n        : this.sources_\n      : source\n        ? [source]\n        : [];\n  }\n\n  /**\n   * @return {SourceType} The source being rendered.\n   */\n  getRenderSource() {\n    return this.renderedSource_ || this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    const source = this.getRenderSource();\n    return source ? source.getState() : 'undefined';\n  }\n\n  /**\n   * @private\n   */\n  handleSourceUpdate_() {\n    if (this.hasRenderer()) {\n      this.getRenderer().clearCache();\n    }\n    if (this.getSource()) {\n      this.setStyle(this.style_);\n    }\n  }\n\n  /**\n   * @private\n   * @return {number} The number of source bands.\n   */\n  getSourceBandCount_() {\n    const max = Number.MAX_SAFE_INTEGER;\n    const sources = this.getSources([-max, -max, max, max], max);\n    return sources && sources.length && 'bandCount' in sources[0]\n      ? sources[0].bandCount\n      : 4;\n  }\n\n  createRenderer() {\n    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n\n    return new WebGLTileLayerRenderer(this, {\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      cacheSize: this.cacheSize_,\n      paletteTextures: parsedStyle.paletteTextures,\n    });\n  }\n\n  /**\n   * @param {import(\"../Map\").FrameState} frameState Frame state.\n   * @param {Array<SourceType>} sources Sources.\n   * @return {HTMLElement} Canvas.\n   */\n  renderSources(frameState, sources) {\n    const layerRenderer = this.getRenderer();\n    let canvas;\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\n      this.renderedSource_ = sources[i];\n      if (layerRenderer.prepareFrame(frameState)) {\n        canvas = layerRenderer.renderFrame(frameState);\n      }\n    }\n    return canvas;\n  }\n\n  /**\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n  render(frameState, target) {\n    this.rendered = true;\n    const viewState = frameState.viewState;\n    const sources = this.getSources(frameState.extent, viewState.resolution);\n    let ready = true;\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\n      const source = sources[i];\n      const sourceState = source.getState();\n      if (sourceState == 'loading') {\n        const onChange = () => {\n          if (source.getState() == 'ready') {\n            source.removeEventListener('change', onChange);\n            this.changed();\n          }\n        };\n        source.addEventListener('change', onChange);\n      }\n      ready = ready && sourceState == 'ready';\n    }\n    const canvas = this.renderSources(frameState, sources);\n    if (this.getRenderer().renderComplete && ready) {\n      // Fully rendered, done.\n      this.renderedResolution_ = viewState.resolution;\n      return canvas;\n    }\n    // Render sources from previously fully rendered frames\n    if (this.renderedResolution_ > 0.5 * viewState.resolution) {\n      const altSources = this.getSources(\n        frameState.extent,\n        this.renderedResolution_,\n      ).filter((source) => !sources.includes(source));\n      if (altSources.length > 0) {\n        return this.renderSources(frameState, altSources);\n      }\n    }\n    return canvas;\n  }\n\n  /**\n   * Update the layer style.  The `updateStyleVariables` function is a more efficient\n   * way to update layer rendering.  In cases where the whole style needs to be updated,\n   * this method may be called instead.  Note that calling this method will also replace\n   * any previously set variables, so the new style also needs to include new variables,\n   * if needed.\n   * @param {Style} style The new style.\n   */\n  setStyle(style) {\n    this.styleVariables_ = style.variables || {};\n    this.style_ = style;\n    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n    const renderer = this.getRenderer();\n    renderer.reset({\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      paletteTextures: parsedStyle.paletteTextures,\n    });\n    this.changed();\n  }\n\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   * @api\n   */\n  updateStyleVariables(variables) {\n    Object.assign(this.styleVariables_, variables);\n    this.changed();\n  }\n}\n\n/**\n * Clean up underlying WebGL resources.\n * @function\n * @api\n */\nWebGLTileLayer.prototype.dispose;\n\nexport default WebGLTileLayer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}