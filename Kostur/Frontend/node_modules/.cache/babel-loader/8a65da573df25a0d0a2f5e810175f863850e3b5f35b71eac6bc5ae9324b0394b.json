{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/render/canvas/Builder\n */\nimport CanvasInstruction from './Instruction.js';\nimport Relationship from '../../extent/Relationship.js';\nimport VectorContext from '../VectorContext.js';\nimport { asColorLike } from '../../colorlike.js';\nimport { buffer, clone, containsCoordinate, coordinateRelationship } from '../../extent.js';\nimport { defaultFillStyle, defaultLineCap, defaultLineDash, defaultLineDashOffset, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle } from '../canvas.js';\nimport { equals, reverseSubArray } from '../../array.js';\nimport { inflateCoordinates, inflateCoordinatesArray, inflateMultiCoordinatesArray } from '../../geom/flat/inflate.js';\nclass CanvasBuilder extends VectorContext {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super();\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.tolerance = tolerance;\n\n    /**\n     * @protected\n     * @const\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent = maxExtent;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxLineWidth = 0;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction1_ = null;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction2_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.bufferedMaxExtent_ = null;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = [];\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = [];\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate.js\").Coordinate}\n     */\n    this.tmpCoordinate_ = [];\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = [];\n\n    /**\n     * @protected\n     * @type {import(\"../canvas.js\").FillStrokeState}\n     */\n    this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */{};\n  }\n\n  /**\n   * @protected\n   * @param {Array<number>} dashArray Dash array.\n   * @return {Array<number>} Dash array with pixel ratio applied\n   */\n  applyPixelRatio(dashArray) {\n    const pixelRatio = this.pixelRatio;\n    return pixelRatio == 1 ? dashArray : dashArray.map(function (dash) {\n      return dash * pixelRatio;\n    });\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} stride Stride.\n   * @protected\n   * @return {number} My end\n   */\n  appendFlatPointCoordinates(flatCoordinates, stride) {\n    const extent = this.getBufferedMaxExtent();\n    const tmpCoord = this.tmpCoordinate_;\n    const coordinates = this.coordinates;\n    let myEnd = coordinates.length;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      tmpCoord[0] = flatCoordinates[i];\n      tmpCoord[1] = flatCoordinates[i + 1];\n      if (containsCoordinate(extent, tmpCoord)) {\n        coordinates[myEnd++] = tmpCoord[0];\n        coordinates[myEnd++] = tmpCoord[1];\n      }\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} closed Last input coordinate equals first.\n   * @param {boolean} skipFirst Skip first coordinate.\n   * @protected\n   * @return {number} My end.\n   */\n  appendFlatLineCoordinates(flatCoordinates, offset, end, stride, closed, skipFirst) {\n    const coordinates = this.coordinates;\n    let myEnd = coordinates.length;\n    const extent = this.getBufferedMaxExtent();\n    if (skipFirst) {\n      offset += stride;\n    }\n    let lastXCoord = flatCoordinates[offset];\n    let lastYCoord = flatCoordinates[offset + 1];\n    const nextCoord = this.tmpCoordinate_;\n    let skipped = true;\n    let i, lastRel, nextRel;\n    for (i = offset + stride; i < end; i += stride) {\n      nextCoord[0] = flatCoordinates[i];\n      nextCoord[1] = flatCoordinates[i + 1];\n      nextRel = coordinateRelationship(extent, nextCoord);\n      if (nextRel !== lastRel) {\n        if (skipped) {\n          coordinates[myEnd++] = lastXCoord;\n          coordinates[myEnd++] = lastYCoord;\n          skipped = false;\n        }\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n      } else if (nextRel === Relationship.INTERSECTING) {\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n        skipped = false;\n      } else {\n        skipped = true;\n      }\n      lastXCoord = nextCoord[0];\n      lastYCoord = nextCoord[1];\n      lastRel = nextRel;\n    }\n\n    // Last coordinate equals first or only one point to append:\n    if (closed && skipped || i === offset + stride) {\n      coordinates[myEnd++] = lastXCoord;\n      coordinates[myEnd++] = lastYCoord;\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @param {Array<number>} builderEnds Builder ends.\n   * @return {number} Offset.\n   */\n  drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const builderEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);\n      builderEnds.push(builderEnd);\n      offset = end;\n    }\n    return offset;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {Function} renderer Renderer.\n   * @param {Function} hitDetectionRenderer Renderer.\n   * @param {number} [index] Render order index.\n   */\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {\n    this.beginGeometry(geometry, feature, index);\n    const type = geometry.getType();\n    const stride = geometry.getStride();\n    const builderBegin = this.coordinates.length;\n    let flatCoordinates, builderEnd, builderEnds, builderEndss;\n    let offset;\n    switch (type) {\n      case 'MultiPolygon':\n        flatCoordinates = /** @type {import(\"../../geom/MultiPolygon.js\").default} */geometry.getOrientedFlatCoordinates();\n        builderEndss = [];\n        const endss = /** @type {import(\"../../geom/MultiPolygon.js\").default} */geometry.getEndss();\n        offset = 0;\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\n          const myEnds = [];\n          offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);\n          builderEndss.push(myEnds);\n        }\n        this.instructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEndss, geometry, renderer, inflateMultiCoordinatesArray, index]);\n        this.hitDetectionInstructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEndss, geometry, hitDetectionRenderer || renderer, inflateMultiCoordinatesArray, index]);\n        break;\n      case 'Polygon':\n      case 'MultiLineString':\n        builderEnds = [];\n        flatCoordinates = type == 'Polygon' ? /** @type {import(\"../../geom/Polygon.js\").default} */geometry.getOrientedFlatCoordinates() : geometry.getFlatCoordinates();\n        offset = this.drawCustomCoordinates_(flatCoordinates, 0, /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */geometry.getEnds(), stride, builderEnds);\n        this.instructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnds, geometry, renderer, inflateCoordinatesArray, index]);\n        this.hitDetectionInstructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnds, geometry, hitDetectionRenderer || renderer, inflateCoordinatesArray, index]);\n        break;\n      case 'LineString':\n      case 'Circle':\n        flatCoordinates = geometry.getFlatCoordinates();\n        builderEnd = this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);\n        this.instructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnd, geometry, renderer, inflateCoordinates, index]);\n        this.hitDetectionInstructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnd, geometry, hitDetectionRenderer || renderer, inflateCoordinates, index]);\n        break;\n      case 'MultiPoint':\n        flatCoordinates = geometry.getFlatCoordinates();\n        builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n        if (builderEnd > builderBegin) {\n          this.instructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnd, geometry, renderer, inflateCoordinates, index]);\n          this.hitDetectionInstructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnd, geometry, hitDetectionRenderer || renderer, inflateCoordinates, index]);\n        }\n        break;\n      case 'Point':\n        flatCoordinates = geometry.getFlatCoordinates();\n        this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\n        builderEnd = this.coordinates.length;\n        this.instructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnd, geometry, renderer, undefined, index]);\n        this.hitDetectionInstructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnd, geometry, hitDetectionRenderer || renderer, undefined, index]);\n        break;\n      default:\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @protected\n   * @param {import(\"../../geom/Geometry\").default|import(\"../Feature.js\").default} geometry The geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} index Render order index\n   */\n  beginGeometry(geometry, feature, index) {\n    this.beginGeometryInstruction1_ = [CanvasInstruction.BEGIN_GEOMETRY, feature, 0, geometry, index];\n    this.instructions.push(this.beginGeometryInstruction1_);\n    this.beginGeometryInstruction2_ = [CanvasInstruction.BEGIN_GEOMETRY, feature, 0, geometry, index];\n    this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    return {\n      instructions: this.instructions,\n      hitDetectionInstructions: this.hitDetectionInstructions,\n      coordinates: this.coordinates\n    };\n  }\n\n  /**\n   * Reverse the hit detection instructions.\n   */\n  reverseHitDetectionInstructions() {\n    const hitDetectionInstructions = this.hitDetectionInstructions;\n    // step 1 - reverse array\n    hitDetectionInstructions.reverse();\n    // step 2 - reverse instructions within geometry blocks\n    let i;\n    const n = hitDetectionInstructions.length;\n    let instruction;\n    let type;\n    let begin = -1;\n    for (i = 0; i < n; ++i) {\n      instruction = hitDetectionInstructions[i];\n      type = /** @type {import(\"./Instruction.js\").default} */instruction[0];\n      if (type == CanvasInstruction.END_GEOMETRY) {\n        begin = i;\n      } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {\n        instruction[2] = i;\n        reverseSubArray(this.hitDetectionInstructions, begin, i);\n        begin = -1;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    const state = this.state;\n    if (fillStyle) {\n      const fillStyleColor = fillStyle.getColor();\n      state.fillPatternScale = fillStyleColor && typeof fillStyleColor === 'object' && 'src' in fillStyleColor ? this.pixelRatio : 1;\n      state.fillStyle = asColorLike(fillStyleColor ? fillStyleColor : defaultFillStyle);\n    } else {\n      state.fillStyle = undefined;\n    }\n    if (strokeStyle) {\n      const strokeStyleColor = strokeStyle.getColor();\n      state.strokeStyle = asColorLike(strokeStyleColor ? strokeStyleColor : defaultStrokeStyle);\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      state.lineCap = strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      state.lineDash = strokeStyleLineDash ? strokeStyleLineDash.slice() : defaultLineDash;\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      state.lineDashOffset = strokeStyleLineDashOffset ? strokeStyleLineDashOffset : defaultLineDashOffset;\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      state.lineJoin = strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : defaultLineJoin;\n      const strokeStyleWidth = strokeStyle.getWidth();\n      state.lineWidth = strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      state.miterLimit = strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : defaultMiterLimit;\n      if (state.lineWidth > this.maxLineWidth) {\n        this.maxLineWidth = state.lineWidth;\n        // invalidate the buffered max extent cache\n        this.bufferedMaxExtent_ = null;\n      }\n    } else {\n      state.strokeStyle = undefined;\n      state.lineCap = undefined;\n      state.lineDash = null;\n      state.lineDashOffset = undefined;\n      state.lineJoin = undefined;\n      state.lineWidth = undefined;\n      state.miterLimit = undefined;\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Fill instruction.\n   */\n  createFill(state) {\n    const fillStyle = state.fillStyle;\n    /** @type {Array<*>} */\n    const fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];\n    if (typeof fillStyle !== 'string') {\n      // Fill is a pattern or gradient - align and scale it!\n      fillInstruction.push(state.fillPatternScale);\n    }\n    return fillInstruction;\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */\n  applyStroke(state) {\n    this.instructions.push(this.createStroke(state));\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Stroke instruction.\n   */\n  createStroke(state) {\n    return [CanvasInstruction.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth * this.pixelRatio, state.lineCap, state.lineJoin, state.miterLimit, this.applyPixelRatio(state.lineDash), state.lineDashOffset * this.pixelRatio];\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState):Array<*>} createFill Create fill.\n   */\n  updateFillStyle(state, createFill) {\n    const fillStyle = state.fillStyle;\n    if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\n      if (fillStyle !== undefined) {\n        this.instructions.push(createFill.call(this, state));\n      }\n      state.currentFillStyle = fillStyle;\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState): void} applyStroke Apply stroke.\n   */\n  updateStrokeStyle(state, applyStroke) {\n    const strokeStyle = state.strokeStyle;\n    const lineCap = state.lineCap;\n    const lineDash = state.lineDash;\n    const lineDashOffset = state.lineDashOffset;\n    const lineJoin = state.lineJoin;\n    const lineWidth = state.lineWidth;\n    const miterLimit = state.miterLimit;\n    if (state.currentStrokeStyle != strokeStyle || state.currentLineCap != lineCap || lineDash != state.currentLineDash && !equals(state.currentLineDash, lineDash) || state.currentLineDashOffset != lineDashOffset || state.currentLineJoin != lineJoin || state.currentLineWidth != lineWidth || state.currentMiterLimit != miterLimit) {\n      if (strokeStyle !== undefined) {\n        applyStroke.call(this, state);\n      }\n      state.currentStrokeStyle = strokeStyle;\n      state.currentLineCap = lineCap;\n      state.currentLineDash = lineDash;\n      state.currentLineDashOffset = lineDashOffset;\n      state.currentLineJoin = lineJoin;\n      state.currentLineWidth = lineWidth;\n      state.currentMiterLimit = miterLimit;\n    }\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  endGeometry(feature) {\n    this.beginGeometryInstruction1_[2] = this.instructions.length;\n    this.beginGeometryInstruction1_ = null;\n    this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\n    this.beginGeometryInstruction2_ = null;\n    const endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];\n    this.instructions.push(endGeometryInstruction);\n    this.hitDetectionInstructions.push(endGeometryInstruction);\n  }\n\n  /**\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\n   * provided to the constructor.  To account for symbolizers that may intersect\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\n   * @protected\n   */\n  getBufferedMaxExtent() {\n    if (!this.bufferedMaxExtent_) {\n      this.bufferedMaxExtent_ = clone(this.maxExtent);\n      if (this.maxLineWidth > 0) {\n        const width = this.resolution * (this.maxLineWidth + 1) / 2;\n        buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\n      }\n    }\n    return this.bufferedMaxExtent_;\n  }\n}\nexport default CanvasBuilder;","map":{"version":3,"names":["CanvasInstruction","Relationship","VectorContext","asColorLike","buffer","clone","containsCoordinate","coordinateRelationship","defaultFillStyle","defaultLineCap","defaultLineDash","defaultLineDashOffset","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultStrokeStyle","equals","reverseSubArray","inflateCoordinates","inflateCoordinatesArray","inflateMultiCoordinatesArray","CanvasBuilder","constructor","tolerance","maxExtent","resolution","pixelRatio","maxLineWidth","beginGeometryInstruction1_","beginGeometryInstruction2_","bufferedMaxExtent_","instructions","coordinates","tmpCoordinate_","hitDetectionInstructions","state","applyPixelRatio","dashArray","map","dash","appendFlatPointCoordinates","flatCoordinates","stride","extent","getBufferedMaxExtent","tmpCoord","myEnd","length","i","ii","appendFlatLineCoordinates","offset","end","closed","skipFirst","lastXCoord","lastYCoord","nextCoord","skipped","lastRel","nextRel","INTERSECTING","drawCustomCoordinates_","ends","builderEnds","builderEnd","push","drawCustom","geometry","feature","renderer","hitDetectionRenderer","index","beginGeometry","type","getType","getStride","builderBegin","builderEndss","getOrientedFlatCoordinates","endss","getEndss","myEnds","CUSTOM","getFlatCoordinates","getEnds","undefined","endGeometry","BEGIN_GEOMETRY","finish","reverseHitDetectionInstructions","reverse","n","instruction","begin","END_GEOMETRY","setFillStrokeStyle","fillStyle","strokeStyle","fillStyleColor","getColor","fillPatternScale","strokeStyleColor","strokeStyleLineCap","getLineCap","lineCap","strokeStyleLineDash","getLineDash","lineDash","slice","strokeStyleLineDashOffset","getLineDashOffset","lineDashOffset","strokeStyleLineJoin","getLineJoin","lineJoin","strokeStyleWidth","getWidth","lineWidth","strokeStyleMiterLimit","getMiterLimit","miterLimit","createFill","fillInstruction","SET_FILL_STYLE","applyStroke","createStroke","SET_STROKE_STYLE","updateFillStyle","currentFillStyle","call","updateStrokeStyle","currentStrokeStyle","currentLineCap","currentLineDash","currentLineDashOffset","currentLineJoin","currentLineWidth","currentMiterLimit","endGeometryInstruction","width"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/node_modules/ol/render/canvas/Builder.js"],"sourcesContent":["/**\n * @module ol/render/canvas/Builder\n */\nimport CanvasInstruction from './Instruction.js';\nimport Relationship from '../../extent/Relationship.js';\nimport VectorContext from '../VectorContext.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  buffer,\n  clone,\n  containsCoordinate,\n  coordinateRelationship,\n} from '../../extent.js';\nimport {\n  defaultFillStyle,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n} from '../canvas.js';\nimport {equals, reverseSubArray} from '../../array.js';\nimport {\n  inflateCoordinates,\n  inflateCoordinatesArray,\n  inflateMultiCoordinatesArray,\n} from '../../geom/flat/inflate.js';\n\nclass CanvasBuilder extends VectorContext {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super();\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.tolerance = tolerance;\n\n    /**\n     * @protected\n     * @const\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent = maxExtent;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxLineWidth = 0;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction1_ = null;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction2_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.bufferedMaxExtent_ = null;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = [];\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = [];\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate.js\").Coordinate}\n     */\n    this.tmpCoordinate_ = [];\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = [];\n\n    /**\n     * @protected\n     * @type {import(\"../canvas.js\").FillStrokeState}\n     */\n    this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */ ({});\n  }\n\n  /**\n   * @protected\n   * @param {Array<number>} dashArray Dash array.\n   * @return {Array<number>} Dash array with pixel ratio applied\n   */\n  applyPixelRatio(dashArray) {\n    const pixelRatio = this.pixelRatio;\n    return pixelRatio == 1\n      ? dashArray\n      : dashArray.map(function (dash) {\n          return dash * pixelRatio;\n        });\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} stride Stride.\n   * @protected\n   * @return {number} My end\n   */\n  appendFlatPointCoordinates(flatCoordinates, stride) {\n    const extent = this.getBufferedMaxExtent();\n    const tmpCoord = this.tmpCoordinate_;\n    const coordinates = this.coordinates;\n    let myEnd = coordinates.length;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      tmpCoord[0] = flatCoordinates[i];\n      tmpCoord[1] = flatCoordinates[i + 1];\n      if (containsCoordinate(extent, tmpCoord)) {\n        coordinates[myEnd++] = tmpCoord[0];\n        coordinates[myEnd++] = tmpCoord[1];\n      }\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} closed Last input coordinate equals first.\n   * @param {boolean} skipFirst Skip first coordinate.\n   * @protected\n   * @return {number} My end.\n   */\n  appendFlatLineCoordinates(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    closed,\n    skipFirst,\n  ) {\n    const coordinates = this.coordinates;\n    let myEnd = coordinates.length;\n    const extent = this.getBufferedMaxExtent();\n    if (skipFirst) {\n      offset += stride;\n    }\n    let lastXCoord = flatCoordinates[offset];\n    let lastYCoord = flatCoordinates[offset + 1];\n    const nextCoord = this.tmpCoordinate_;\n    let skipped = true;\n\n    let i, lastRel, nextRel;\n    for (i = offset + stride; i < end; i += stride) {\n      nextCoord[0] = flatCoordinates[i];\n      nextCoord[1] = flatCoordinates[i + 1];\n      nextRel = coordinateRelationship(extent, nextCoord);\n      if (nextRel !== lastRel) {\n        if (skipped) {\n          coordinates[myEnd++] = lastXCoord;\n          coordinates[myEnd++] = lastYCoord;\n          skipped = false;\n        }\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n      } else if (nextRel === Relationship.INTERSECTING) {\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n        skipped = false;\n      } else {\n        skipped = true;\n      }\n      lastXCoord = nextCoord[0];\n      lastYCoord = nextCoord[1];\n      lastRel = nextRel;\n    }\n\n    // Last coordinate equals first or only one point to append:\n    if ((closed && skipped) || i === offset + stride) {\n      coordinates[myEnd++] = lastXCoord;\n      coordinates[myEnd++] = lastYCoord;\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @param {Array<number>} builderEnds Builder ends.\n   * @return {number} Offset.\n   */\n  drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const builderEnd = this.appendFlatLineCoordinates(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        false,\n        false,\n      );\n      builderEnds.push(builderEnd);\n      offset = end;\n    }\n    return offset;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {Function} renderer Renderer.\n   * @param {Function} hitDetectionRenderer Renderer.\n   * @param {number} [index] Render order index.\n   */\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {\n    this.beginGeometry(geometry, feature, index);\n\n    const type = geometry.getType();\n    const stride = geometry.getStride();\n    const builderBegin = this.coordinates.length;\n\n    let flatCoordinates, builderEnd, builderEnds, builderEndss;\n    let offset;\n\n    switch (type) {\n      case 'MultiPolygon':\n        flatCoordinates =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ).getOrientedFlatCoordinates();\n        builderEndss = [];\n        const endss =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ).getEndss();\n        offset = 0;\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\n          const myEnds = [];\n          offset = this.drawCustomCoordinates_(\n            flatCoordinates,\n            offset,\n            endss[i],\n            stride,\n            myEnds,\n          );\n          builderEndss.push(myEnds);\n        }\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEndss,\n          geometry,\n          renderer,\n          inflateMultiCoordinatesArray,\n          index,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEndss,\n          geometry,\n          hitDetectionRenderer || renderer,\n          inflateMultiCoordinatesArray,\n          index,\n        ]);\n        break;\n      case 'Polygon':\n      case 'MultiLineString':\n        builderEnds = [];\n        flatCoordinates =\n          type == 'Polygon'\n            ? /** @type {import(\"../../geom/Polygon.js\").default} */ (\n                geometry\n              ).getOrientedFlatCoordinates()\n            : geometry.getFlatCoordinates();\n        offset = this.drawCustomCoordinates_(\n          flatCoordinates,\n          0,\n          /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */ (\n            geometry\n          ).getEnds(),\n          stride,\n          builderEnds,\n        );\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnds,\n          geometry,\n          renderer,\n          inflateCoordinatesArray,\n          index,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnds,\n          geometry,\n          hitDetectionRenderer || renderer,\n          inflateCoordinatesArray,\n          index,\n        ]);\n        break;\n      case 'LineString':\n      case 'Circle':\n        flatCoordinates = geometry.getFlatCoordinates();\n        builderEnd = this.appendFlatLineCoordinates(\n          flatCoordinates,\n          0,\n          flatCoordinates.length,\n          stride,\n          false,\n          false,\n        );\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          renderer,\n          inflateCoordinates,\n          index,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          hitDetectionRenderer || renderer,\n          inflateCoordinates,\n          index,\n        ]);\n        break;\n      case 'MultiPoint':\n        flatCoordinates = geometry.getFlatCoordinates();\n        builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n\n        if (builderEnd > builderBegin) {\n          this.instructions.push([\n            CanvasInstruction.CUSTOM,\n            builderBegin,\n            builderEnd,\n            geometry,\n            renderer,\n            inflateCoordinates,\n            index,\n          ]);\n          this.hitDetectionInstructions.push([\n            CanvasInstruction.CUSTOM,\n            builderBegin,\n            builderEnd,\n            geometry,\n            hitDetectionRenderer || renderer,\n            inflateCoordinates,\n            index,\n          ]);\n        }\n        break;\n      case 'Point':\n        flatCoordinates = geometry.getFlatCoordinates();\n        this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\n        builderEnd = this.coordinates.length;\n\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          renderer,\n          undefined,\n          index,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          hitDetectionRenderer || renderer,\n          undefined,\n          index,\n        ]);\n        break;\n      default:\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @protected\n   * @param {import(\"../../geom/Geometry\").default|import(\"../Feature.js\").default} geometry The geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} index Render order index\n   */\n  beginGeometry(geometry, feature, index) {\n    this.beginGeometryInstruction1_ = [\n      CanvasInstruction.BEGIN_GEOMETRY,\n      feature,\n      0,\n      geometry,\n      index,\n    ];\n    this.instructions.push(this.beginGeometryInstruction1_);\n    this.beginGeometryInstruction2_ = [\n      CanvasInstruction.BEGIN_GEOMETRY,\n      feature,\n      0,\n      geometry,\n      index,\n    ];\n    this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    return {\n      instructions: this.instructions,\n      hitDetectionInstructions: this.hitDetectionInstructions,\n      coordinates: this.coordinates,\n    };\n  }\n\n  /**\n   * Reverse the hit detection instructions.\n   */\n  reverseHitDetectionInstructions() {\n    const hitDetectionInstructions = this.hitDetectionInstructions;\n    // step 1 - reverse array\n    hitDetectionInstructions.reverse();\n    // step 2 - reverse instructions within geometry blocks\n    let i;\n    const n = hitDetectionInstructions.length;\n    let instruction;\n    let type;\n    let begin = -1;\n    for (i = 0; i < n; ++i) {\n      instruction = hitDetectionInstructions[i];\n      type = /** @type {import(\"./Instruction.js\").default} */ (instruction[0]);\n      if (type == CanvasInstruction.END_GEOMETRY) {\n        begin = i;\n      } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {\n        instruction[2] = i;\n        reverseSubArray(this.hitDetectionInstructions, begin, i);\n        begin = -1;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    const state = this.state;\n    if (fillStyle) {\n      const fillStyleColor = fillStyle.getColor();\n      state.fillPatternScale =\n        fillStyleColor &&\n        typeof fillStyleColor === 'object' &&\n        'src' in fillStyleColor\n          ? this.pixelRatio\n          : 1;\n      state.fillStyle = asColorLike(\n        fillStyleColor ? fillStyleColor : defaultFillStyle,\n      );\n    } else {\n      state.fillStyle = undefined;\n    }\n    if (strokeStyle) {\n      const strokeStyleColor = strokeStyle.getColor();\n      state.strokeStyle = asColorLike(\n        strokeStyleColor ? strokeStyleColor : defaultStrokeStyle,\n      );\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      state.lineCap =\n        strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      state.lineDash = strokeStyleLineDash\n        ? strokeStyleLineDash.slice()\n        : defaultLineDash;\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      state.lineDashOffset = strokeStyleLineDashOffset\n        ? strokeStyleLineDashOffset\n        : defaultLineDashOffset;\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      state.lineJoin =\n        strokeStyleLineJoin !== undefined\n          ? strokeStyleLineJoin\n          : defaultLineJoin;\n      const strokeStyleWidth = strokeStyle.getWidth();\n      state.lineWidth =\n        strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      state.miterLimit =\n        strokeStyleMiterLimit !== undefined\n          ? strokeStyleMiterLimit\n          : defaultMiterLimit;\n\n      if (state.lineWidth > this.maxLineWidth) {\n        this.maxLineWidth = state.lineWidth;\n        // invalidate the buffered max extent cache\n        this.bufferedMaxExtent_ = null;\n      }\n    } else {\n      state.strokeStyle = undefined;\n      state.lineCap = undefined;\n      state.lineDash = null;\n      state.lineDashOffset = undefined;\n      state.lineJoin = undefined;\n      state.lineWidth = undefined;\n      state.miterLimit = undefined;\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Fill instruction.\n   */\n  createFill(state) {\n    const fillStyle = state.fillStyle;\n    /** @type {Array<*>} */\n    const fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];\n    if (typeof fillStyle !== 'string') {\n      // Fill is a pattern or gradient - align and scale it!\n      fillInstruction.push(state.fillPatternScale);\n    }\n    return fillInstruction;\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */\n  applyStroke(state) {\n    this.instructions.push(this.createStroke(state));\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Stroke instruction.\n   */\n  createStroke(state) {\n    return [\n      CanvasInstruction.SET_STROKE_STYLE,\n      state.strokeStyle,\n      state.lineWidth * this.pixelRatio,\n      state.lineCap,\n      state.lineJoin,\n      state.miterLimit,\n      this.applyPixelRatio(state.lineDash),\n      state.lineDashOffset * this.pixelRatio,\n    ];\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState):Array<*>} createFill Create fill.\n   */\n  updateFillStyle(state, createFill) {\n    const fillStyle = state.fillStyle;\n    if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\n      if (fillStyle !== undefined) {\n        this.instructions.push(createFill.call(this, state));\n      }\n      state.currentFillStyle = fillStyle;\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState): void} applyStroke Apply stroke.\n   */\n  updateStrokeStyle(state, applyStroke) {\n    const strokeStyle = state.strokeStyle;\n    const lineCap = state.lineCap;\n    const lineDash = state.lineDash;\n    const lineDashOffset = state.lineDashOffset;\n    const lineJoin = state.lineJoin;\n    const lineWidth = state.lineWidth;\n    const miterLimit = state.miterLimit;\n    if (\n      state.currentStrokeStyle != strokeStyle ||\n      state.currentLineCap != lineCap ||\n      (lineDash != state.currentLineDash &&\n        !equals(state.currentLineDash, lineDash)) ||\n      state.currentLineDashOffset != lineDashOffset ||\n      state.currentLineJoin != lineJoin ||\n      state.currentLineWidth != lineWidth ||\n      state.currentMiterLimit != miterLimit\n    ) {\n      if (strokeStyle !== undefined) {\n        applyStroke.call(this, state);\n      }\n      state.currentStrokeStyle = strokeStyle;\n      state.currentLineCap = lineCap;\n      state.currentLineDash = lineDash;\n      state.currentLineDashOffset = lineDashOffset;\n      state.currentLineJoin = lineJoin;\n      state.currentLineWidth = lineWidth;\n      state.currentMiterLimit = miterLimit;\n    }\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  endGeometry(feature) {\n    this.beginGeometryInstruction1_[2] = this.instructions.length;\n    this.beginGeometryInstruction1_ = null;\n    this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\n    this.beginGeometryInstruction2_ = null;\n    const endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];\n    this.instructions.push(endGeometryInstruction);\n    this.hitDetectionInstructions.push(endGeometryInstruction);\n  }\n\n  /**\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\n   * provided to the constructor.  To account for symbolizers that may intersect\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\n   * @protected\n   */\n  getBufferedMaxExtent() {\n    if (!this.bufferedMaxExtent_) {\n      this.bufferedMaxExtent_ = clone(this.maxExtent);\n      if (this.maxLineWidth > 0) {\n        const width = (this.resolution * (this.maxLineWidth + 1)) / 2;\n        buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\n      }\n    }\n    return this.bufferedMaxExtent_;\n  }\n}\n\nexport default CanvasBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}