{"ast":null,"code":"import { ref, onMounted, computed } from 'vue';\nimport axios from 'axios';\nexport default {\n  __name: 'AllChocolateFactories',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const factories = ref([]);\n    async function loadFactories() {\n      try {\n        const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects');\n        for (const factory of response.data) {\n          factory.address = await reverseGeocode(factory.latitude, factory.longitude);\n        }\n        factories.value = response.data;\n      } catch (error) {\n        console.error(\"Error loading factories:\", error);\n      }\n    }\n    onMounted(() => {\n      loadFactories();\n    });\n    const isFactoryOpen = factory => {\n      const currentTime = new Date();\n      const openingTime = new Date();\n      const closingTime = new Date();\n      const [openHour, openMinute] = factory.openingTime.split(':');\n      const [closeHour, closeMinute] = factory.closingTime.split(':');\n      openingTime.setHours(openHour, openMinute);\n      closingTime.setHours(closeHour, closeMinute);\n      return currentTime >= openingTime && currentTime <= closingTime;\n    };\n    const sortedFactories = computed(() => {\n      return factories.value.sort((a, b) => {\n        const aOpen = isFactoryOpen(a);\n        const bOpen = isFactoryOpen(b);\n        if (aOpen && !bOpen) return -1;\n        if (!aOpen && bOpen) return 1;\n        return 0;\n      });\n    });\n    const getFactoryLogo = logoFileName => {\n      return `/images/${logoFileName}`;\n    };\n    async function reverseGeocode(latitude, longitude) {\n      try {\n        const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=YOUR_API_KEY`);\n        console.log(response.data); // Dodajte ovu liniju za proveru\n        if (response.data.results.length > 0) {\n          return response.data.results[0].formatted_address;\n        } else {\n          return \"Address not found\";\n        }\n      } catch (error) {\n        console.error(\"Error fetching address:\", error);\n        return \"Error fetching address\";\n      }\n    }\n    const editFactory = factoryId => {\n      // Logika za editovanje fabrike\n      console.log(\"Edit factory with ID:\", factoryId);\n    };\n    const deleteFactory = factoryId => {\n      // Logika za brisanje fabrike\n      console.log(\"Delete factory with ID:\", factoryId);\n    };\n    const __returned__ = {\n      factories,\n      loadFactories,\n      isFactoryOpen,\n      sortedFactories,\n      getFactoryLogo,\n      reverseGeocode,\n      editFactory,\n      deleteFactory,\n      ref,\n      onMounted,\n      computed,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","axios","factories","loadFactories","response","get","factory","data","address","reverseGeocode","latitude","longitude","value","error","console","isFactoryOpen","currentTime","Date","openingTime","closingTime","openHour","openMinute","split","closeHour","closeMinute","setHours","sortedFactories","sort","a","b","aOpen","bOpen","getFactoryLogo","logoFileName","log","results","length","formatted_address","editFactory","factoryId","deleteFactory"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/src/views/AllChocolateFactories.vue"],"sourcesContent":["<template>\r\n    <div class=\"all-factories\">\r\n      \r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Logo</th>\r\n            <th>Name</th>\r\n            <th>Location</th>\r\n            <th>Rating</th>\r\n            <th>Edit</th>\r\n            <th>Delete</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"factory in sortedFactories\" :key=\"factory.id\">\r\n            <td><img :src=\"getFactoryLogo(factory.logo)\" alt=\"Logo\" class=\"factory-logo\" /></td>\r\n            <td>{{ factory.name }}</td>\r\n            <td>{{ factory.location }}</td>\r\n            <td>{{ factory.rating }}</td>\r\n            <td><button @click=\"editFactory(factory.id)\">Edit</button></td>\r\n            <td><button @click=\"deleteFactory(factory.id)\">Delete</button></td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted, computed } from 'vue';\r\n  import axios from 'axios';\r\n  \r\n  const factories = ref([]);\r\n  \r\n  async function loadFactories() {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects');\r\n      for (const factory of response.data) {\r\n        factory.address = await reverseGeocode(factory.latitude, factory.longitude);\r\n      }\r\n      factories.value = response.data;\r\n    } catch (error) {\r\n      console.error(\"Error loading factories:\", error);\r\n    }\r\n  }\r\n  \r\n  onMounted(() => {\r\n    loadFactories();\r\n  });\r\n  \r\n  const isFactoryOpen = (factory) => {\r\n    const currentTime = new Date();\r\n    const openingTime = new Date();\r\n    const closingTime = new Date();\r\n    \r\n    const [openHour, openMinute] = factory.openingTime.split(':');\r\n    const [closeHour, closeMinute] = factory.closingTime.split(':');\r\n  \r\n    openingTime.setHours(openHour, openMinute);\r\n    closingTime.setHours(closeHour, closeMinute);\r\n  \r\n    return currentTime >= openingTime && currentTime <= closingTime;\r\n  };\r\n  \r\n  const sortedFactories = computed(() => {\r\n    return factories.value.sort((a, b) => {\r\n      const aOpen = isFactoryOpen(a);\r\n      const bOpen = isFactoryOpen(b);\r\n      if (aOpen && !bOpen) return -1;\r\n      if (!aOpen && bOpen) return 1;\r\n      return 0;\r\n    });\r\n  });\r\n  \r\n  const getFactoryLogo = (logoFileName) => {\r\n    return `/images/${logoFileName}`;\r\n  };\r\n  \r\n  async function reverseGeocode(latitude, longitude) {\r\n  try {\r\n    const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=YOUR_API_KEY`);\r\n    console.log(response.data); // Dodajte ovu liniju za proveru\r\n    if (response.data.results.length > 0) {\r\n      return response.data.results[0].formatted_address;\r\n    } else {\r\n      return \"Address not found\";\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching address:\", error);\r\n    return \"Error fetching address\";\r\n  }\r\n  }\r\n  \r\n  const editFactory = (factoryId) => {\r\n    // Logika za editovanje fabrike\r\n    console.log(\"Edit factory with ID:\", factoryId);\r\n  };\r\n  \r\n  const deleteFactory = (factoryId) => {\r\n    // Logika za brisanje fabrike\r\n    console.log(\"Delete factory with ID:\", factoryId);\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n.all-factories {\r\n  padding: 20px;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\nth, td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n  max-width: 150px; /* Postavljamo maksimalnu širinu redova */\r\n  overflow: hidden; /* Postavljamo overflow na hidden da bismo sprečili da tekst prelazi preko definisane širine */\r\n  white-space: nowrap; /* Postavljamo white-space na nowrap kako bi tekst ostao u jednom redu */\r\n  text-overflow: ellipsis; /* Postavljamo text-overflow na ellipsis kako bismo dodali \"...\" za tekst koji je van granica */\r\n}\r\n\r\nth {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\n.factory-logo {\r\n  width: 100px;\r\n  height: 100px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}