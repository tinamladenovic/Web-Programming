{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/render/canvas/ExecutorGroup\n */\n\nimport Executor from './Executor.js';\nimport { ascending } from '../../array.js';\nimport { buffer, createEmpty, extendCoordinate } from '../../extent.js';\nimport { compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { isEmpty } from '../../obj.js';\nimport { transform2D } from '../../geom/flat/transform.js';\n\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */\nexport const ALL = ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'];\n\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */\nexport const DECLUTTER = ['Image', 'Text'];\n\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */\nexport const NON_DECLUTTER = ALL.filter(builderType => !DECLUTTER.includes(builderType));\nclass ExecutorGroup {\n  /**\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\n   * should be set here, unless the target context does not exceed that extent (which\n   * can be the case when rendering to tiles).\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\n   * The serializable instructions.\n   * @param {number} [renderBuffer] Optional rendering buffer.\n   * @param {boolean} [deferredRendering] Enable deferred rendering with renderDeferred().\n   */\n  constructor(maxExtent, resolution, pixelRatio, overlaps, allInstructions, renderBuffer, deferredRendering) {\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = overlaps;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.resolution_ = resolution;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderBuffer_ = renderBuffer;\n\n    /**\n     * @private\n     * @type {!Object<string, !Object<string, import(\"./Executor\").default>>}\n     */\n    this.executorsByZIndex_ = {};\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.hitDetectionContext_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.hitDetectionTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.renderedContext_ = null;\n\n    /**\n     * @type {Object<number, Array<import(\"./ZIndexContext.js\").default>>}\n     */\n    this.deferredZIndexContexts_ = {};\n    this.createExecutors_(allInstructions, deferredRendering);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n  clip(context, transform) {\n    const flatClipCoords = this.getClipCoords(transform);\n    context.beginPath();\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n    context.clip();\n  }\n\n  /**\n   * Create executors and populate them using the provided instructions.\n   * @private\n   * @param {!Object<string, !Object<string, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\n   * @param {boolean} deferredRendering Enable deferred rendering.\n   */\n  createExecutors_(allInstructions, deferredRendering) {\n    for (const zIndex in allInstructions) {\n      let executors = this.executorsByZIndex_[zIndex];\n      if (executors === undefined) {\n        executors = {};\n        this.executorsByZIndex_[zIndex] = executors;\n      }\n      const instructionByZindex = allInstructions[zIndex];\n      for (const builderType in instructionByZindex) {\n        const instructions = instructionByZindex[builderType];\n        executors[builderType] = new Executor(this.resolution_, this.pixelRatio_, this.overlaps_, instructions, deferredRendering);\n      }\n    }\n  }\n\n  /**\n   * @param {Array<import(\"../canvas.js\").BuilderType>} executors Executors.\n   * @return {boolean} Has executors of the provided types.\n   */\n  hasExecutors(executors) {\n    for (const zIndex in this.executorsByZIndex_) {\n      const candidates = this.executorsByZIndex_[zIndex];\n      for (let i = 0, ii = executors.length; i < ii; ++i) {\n        if (executors[i] in candidates) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {\n    hitTolerance = Math.round(hitTolerance);\n    const contextSize = hitTolerance * 2 + 1;\n    const transform = composeTransform(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);\n    const newContext = !this.hitDetectionContext_;\n    if (newContext) {\n      this.hitDetectionContext_ = createCanvasContext2D(contextSize, contextSize, undefined, {\n        willReadFrequently: true\n      });\n    }\n    const context = this.hitDetectionContext_;\n    if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {\n      context.canvas.width = contextSize;\n      context.canvas.height = contextSize;\n    } else if (!newContext) {\n      context.clearRect(0, 0, contextSize, contextSize);\n    }\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    let hitExtent;\n    if (this.renderBuffer_ !== undefined) {\n      hitExtent = createEmpty();\n      extendCoordinate(hitExtent, coordinate);\n      buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);\n    }\n    const indexes = getPixelIndexArray(hitTolerance);\n    let builderType;\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {import('../../style/Style.js').DeclutterMode} declutterMode Declutter mode.\n     * @return {T|undefined} Callback result.\n     */\n    function featureCallback(feature, geometry, declutterMode) {\n      const imageData = context.getImageData(0, 0, contextSize, contextSize).data;\n      for (let i = 0, ii = indexes.length; i < ii; i++) {\n        if (imageData[indexes[i]] > 0) {\n          if (!declutteredFeatures || declutterMode === 'none' || builderType !== 'Image' && builderType !== 'Text' || declutteredFeatures.includes(feature)) {\n            const idx = (indexes[i] - 3) / 4;\n            const x = hitTolerance - idx % contextSize;\n            const y = hitTolerance - (idx / contextSize | 0);\n            const result = callback(feature, geometry, x * x + y * y);\n            if (result) {\n              return result;\n            }\n          }\n          context.clearRect(0, 0, contextSize, contextSize);\n          break;\n        }\n      }\n      return undefined;\n    }\n\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(ascending);\n    let i, j, executors, executor, result;\n    for (i = zs.length - 1; i >= 0; --i) {\n      const zIndexKey = zs[i].toString();\n      executors = this.executorsByZIndex_[zIndexKey];\n      for (j = ALL.length - 1; j >= 0; --j) {\n        builderType = ALL[j];\n        executor = executors[builderType];\n        if (executor !== undefined) {\n          result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @return {Array<number>|null} Clip coordinates.\n   */\n  getClipCoords(transform) {\n    const maxExtent = this.maxExtent_;\n    if (!maxExtent) {\n      return null;\n    }\n    const minX = maxExtent[0];\n    const minY = maxExtent[1];\n    const maxX = maxExtent[2];\n    const maxY = maxExtent[3];\n    const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n    return flatClipCoords;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return isEmpty(this.executorsByZIndex_);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} targetContext Context.\n   * @param {import('../../size.js').Size} scaledCanvasSize Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n   * @param {Array<import(\"../canvas.js\").BuilderType>} [builderTypes] Ordered replay types to replay.\n   *     Default is {@link module:ol/render/replay~ALL}\n   * @param {import(\"rbush\").default|null} [declutterTree] Declutter tree.\n   *     When set to null, no decluttering is done, even when the executor group has a `ZIndexContext`.\n   */\n  execute(targetContext, scaledCanvasSize, transform, viewRotation, snapToPixel, builderTypes, declutterTree) {\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(ascending);\n    builderTypes = builderTypes ? builderTypes : ALL;\n    const maxBuilderTypes = ALL.length;\n    let i, ii, j, jj, replays;\n    if (declutterTree) {\n      zs.reverse();\n    }\n    for (i = 0, ii = zs.length; i < ii; ++i) {\n      const zIndexKey = zs[i].toString();\n      replays = this.executorsByZIndex_[zIndexKey];\n      for (j = 0, jj = builderTypes.length; j < jj; ++j) {\n        const builderType = builderTypes[j];\n        const replay = replays[builderType];\n        if (replay !== undefined) {\n          const zIndexContext = declutterTree === null ? undefined : replay.getZIndexContext();\n          const context = zIndexContext ? zIndexContext.getContext() : targetContext;\n          const requireClip = this.maxExtent_ && builderType !== 'Image' && builderType !== 'Text';\n          if (requireClip) {\n            context.save();\n            // setup clipping so that the parts of over-simplified geometries are not\n            // visible outside the current extent when panning\n            this.clip(context, transform);\n          }\n          if (!zIndexContext || builderType === 'Text' || builderType === 'Image') {\n            replay.execute(context, scaledCanvasSize, transform, viewRotation, snapToPixel, declutterTree);\n          } else {\n            zIndexContext.pushFunction(context => replay.execute(context, scaledCanvasSize, transform, viewRotation, snapToPixel, declutterTree));\n          }\n          if (requireClip) {\n            context.restore();\n          }\n          if (zIndexContext) {\n            zIndexContext.offset();\n            const index = zs[i] * maxBuilderTypes + j;\n            if (!this.deferredZIndexContexts_[index]) {\n              this.deferredZIndexContexts_[index] = [];\n            }\n            this.deferredZIndexContexts_[index].push(zIndexContext);\n          }\n        }\n      }\n    }\n    this.renderedContext_ = targetContext;\n  }\n  getDeferredZIndexContexts() {\n    return this.deferredZIndexContexts_;\n  }\n  getRenderedContext() {\n    return this.renderedContext_;\n  }\n  renderDeferred() {\n    const deferredZIndexContexts = this.deferredZIndexContexts_;\n    const zs = Object.keys(deferredZIndexContexts).map(Number).sort(ascending);\n    for (let i = 0, ii = zs.length; i < ii; ++i) {\n      deferredZIndexContexts[zs[i]].forEach(zIndexContext => {\n        zIndexContext.draw(this.renderedContext_); // FIXME Pass clip to replay for temporarily enabling clip\n        zIndexContext.clear();\n      });\n      deferredZIndexContexts[zs[i]].length = 0;\n    }\n  }\n}\n\n/**\n * This cache is used to store arrays of indexes for calculated pixel circles\n * to increase performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<number>>}\n */\nconst circlePixelIndexArrayCache = {};\n\n/**\n * This methods creates an array with indexes of all pixels within a circle,\n * ordered by how close they are to the center.\n * A cache is used to increase performance.\n * @param {number} radius Radius.\n * @return {Array<number>} An array with indexes within a circle.\n */\nexport function getPixelIndexArray(radius) {\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\n    return circlePixelIndexArrayCache[radius];\n  }\n  const size = radius * 2 + 1;\n  const maxDistanceSq = radius * radius;\n  const distances = new Array(maxDistanceSq + 1);\n  for (let i = 0; i <= radius; ++i) {\n    for (let j = 0; j <= radius; ++j) {\n      const distanceSq = i * i + j * j;\n      if (distanceSq > maxDistanceSq) {\n        break;\n      }\n      let distance = distances[distanceSq];\n      if (!distance) {\n        distance = [];\n        distances[distanceSq] = distance;\n      }\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\n      if (i > 0) {\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\n      }\n      if (j > 0) {\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\n        if (i > 0) {\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\n        }\n      }\n    }\n  }\n  const pixelIndex = [];\n  for (let i = 0, ii = distances.length; i < ii; ++i) {\n    if (distances[i]) {\n      pixelIndex.push(...distances[i]);\n    }\n  }\n  circlePixelIndexArrayCache[radius] = pixelIndex;\n  return pixelIndex;\n}\nexport default ExecutorGroup;","map":{"version":3,"names":["Executor","ascending","buffer","createEmpty","extendCoordinate","compose","composeTransform","create","createTransform","createCanvasContext2D","isEmpty","transform2D","ALL","DECLUTTER","NON_DECLUTTER","filter","builderType","includes","ExecutorGroup","constructor","maxExtent","resolution","pixelRatio","overlaps","allInstructions","renderBuffer","deferredRendering","maxExtent_","overlaps_","pixelRatio_","resolution_","renderBuffer_","executorsByZIndex_","hitDetectionContext_","hitDetectionTransform_","renderedContext_","deferredZIndexContexts_","createExecutors_","clip","context","transform","flatClipCoords","getClipCoords","beginPath","moveTo","lineTo","zIndex","executors","undefined","instructionByZindex","instructions","hasExecutors","candidates","i","ii","length","forEachFeatureAtCoordinate","coordinate","rotation","hitTolerance","callback","declutteredFeatures","Math","round","contextSize","newContext","willReadFrequently","canvas","width","height","clearRect","hitExtent","indexes","getPixelIndexArray","featureCallback","feature","geometry","declutterMode","imageData","getImageData","data","idx","x","y","result","zs","Object","keys","map","Number","sort","j","executor","zIndexKey","toString","executeHitDetection","minX","minY","maxX","maxY","execute","targetContext","scaledCanvasSize","viewRotation","snapToPixel","builderTypes","declutterTree","maxBuilderTypes","jj","replays","reverse","replay","zIndexContext","getZIndexContext","getContext","requireClip","save","pushFunction","restore","offset","index","push","getDeferredZIndexContexts","getRenderedContext","renderDeferred","deferredZIndexContexts","forEach","draw","clear","circlePixelIndexArrayCache","radius","size","maxDistanceSq","distances","Array","distanceSq","distance","pixelIndex"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/node_modules/ol/render/canvas/ExecutorGroup.js"],"sourcesContent":["/**\n * @module ol/render/canvas/ExecutorGroup\n */\n\nimport Executor from './Executor.js';\nimport {ascending} from '../../array.js';\nimport {buffer, createEmpty, extendCoordinate} from '../../extent.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {isEmpty} from '../../obj.js';\nimport {transform2D} from '../../geom/flat/transform.js';\n\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */\nexport const ALL = [\n  'Polygon',\n  'Circle',\n  'LineString',\n  'Image',\n  'Text',\n  'Default',\n];\n\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */\nexport const DECLUTTER = ['Image', 'Text'];\n\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */\nexport const NON_DECLUTTER = ALL.filter(\n  (builderType) => !DECLUTTER.includes(builderType),\n);\n\nclass ExecutorGroup {\n  /**\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\n   * should be set here, unless the target context does not exceed that extent (which\n   * can be the case when rendering to tiles).\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\n   * The serializable instructions.\n   * @param {number} [renderBuffer] Optional rendering buffer.\n   * @param {boolean} [deferredRendering] Enable deferred rendering with renderDeferred().\n   */\n  constructor(\n    maxExtent,\n    resolution,\n    pixelRatio,\n    overlaps,\n    allInstructions,\n    renderBuffer,\n    deferredRendering,\n  ) {\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = overlaps;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.resolution_ = resolution;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderBuffer_ = renderBuffer;\n\n    /**\n     * @private\n     * @type {!Object<string, !Object<string, import(\"./Executor\").default>>}\n     */\n    this.executorsByZIndex_ = {};\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.hitDetectionContext_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.hitDetectionTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.renderedContext_ = null;\n\n    /**\n     * @type {Object<number, Array<import(\"./ZIndexContext.js\").default>>}\n     */\n    this.deferredZIndexContexts_ = {};\n\n    this.createExecutors_(allInstructions, deferredRendering);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n  clip(context, transform) {\n    const flatClipCoords = this.getClipCoords(transform);\n    context.beginPath();\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n    context.clip();\n  }\n\n  /**\n   * Create executors and populate them using the provided instructions.\n   * @private\n   * @param {!Object<string, !Object<string, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\n   * @param {boolean} deferredRendering Enable deferred rendering.\n   */\n  createExecutors_(allInstructions, deferredRendering) {\n    for (const zIndex in allInstructions) {\n      let executors = this.executorsByZIndex_[zIndex];\n      if (executors === undefined) {\n        executors = {};\n        this.executorsByZIndex_[zIndex] = executors;\n      }\n      const instructionByZindex = allInstructions[zIndex];\n      for (const builderType in instructionByZindex) {\n        const instructions = instructionByZindex[builderType];\n        executors[builderType] = new Executor(\n          this.resolution_,\n          this.pixelRatio_,\n          this.overlaps_,\n          instructions,\n          deferredRendering,\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {Array<import(\"../canvas.js\").BuilderType>} executors Executors.\n   * @return {boolean} Has executors of the provided types.\n   */\n  hasExecutors(executors) {\n    for (const zIndex in this.executorsByZIndex_) {\n      const candidates = this.executorsByZIndex_[zIndex];\n      for (let i = 0, ii = executors.length; i < ii; ++i) {\n        if (executors[i] in candidates) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    resolution,\n    rotation,\n    hitTolerance,\n    callback,\n    declutteredFeatures,\n  ) {\n    hitTolerance = Math.round(hitTolerance);\n    const contextSize = hitTolerance * 2 + 1;\n    const transform = composeTransform(\n      this.hitDetectionTransform_,\n      hitTolerance + 0.5,\n      hitTolerance + 0.5,\n      1 / resolution,\n      -1 / resolution,\n      -rotation,\n      -coordinate[0],\n      -coordinate[1],\n    );\n\n    const newContext = !this.hitDetectionContext_;\n    if (newContext) {\n      this.hitDetectionContext_ = createCanvasContext2D(\n        contextSize,\n        contextSize,\n        undefined,\n        {willReadFrequently: true},\n      );\n    }\n    const context = this.hitDetectionContext_;\n\n    if (\n      context.canvas.width !== contextSize ||\n      context.canvas.height !== contextSize\n    ) {\n      context.canvas.width = contextSize;\n      context.canvas.height = contextSize;\n    } else if (!newContext) {\n      context.clearRect(0, 0, contextSize, contextSize);\n    }\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    let hitExtent;\n    if (this.renderBuffer_ !== undefined) {\n      hitExtent = createEmpty();\n      extendCoordinate(hitExtent, coordinate);\n      buffer(\n        hitExtent,\n        resolution * (this.renderBuffer_ + hitTolerance),\n        hitExtent,\n      );\n    }\n\n    const indexes = getPixelIndexArray(hitTolerance);\n\n    let builderType;\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {import('../../style/Style.js').DeclutterMode} declutterMode Declutter mode.\n     * @return {T|undefined} Callback result.\n     */\n    function featureCallback(feature, geometry, declutterMode) {\n      const imageData = context.getImageData(\n        0,\n        0,\n        contextSize,\n        contextSize,\n      ).data;\n      for (let i = 0, ii = indexes.length; i < ii; i++) {\n        if (imageData[indexes[i]] > 0) {\n          if (\n            !declutteredFeatures ||\n            declutterMode === 'none' ||\n            (builderType !== 'Image' && builderType !== 'Text') ||\n            declutteredFeatures.includes(feature)\n          ) {\n            const idx = (indexes[i] - 3) / 4;\n            const x = hitTolerance - (idx % contextSize);\n            const y = hitTolerance - ((idx / contextSize) | 0);\n            const result = callback(feature, geometry, x * x + y * y);\n            if (result) {\n              return result;\n            }\n          }\n          context.clearRect(0, 0, contextSize, contextSize);\n          break;\n        }\n      }\n      return undefined;\n    }\n\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(ascending);\n\n    let i, j, executors, executor, result;\n    for (i = zs.length - 1; i >= 0; --i) {\n      const zIndexKey = zs[i].toString();\n      executors = this.executorsByZIndex_[zIndexKey];\n      for (j = ALL.length - 1; j >= 0; --j) {\n        builderType = ALL[j];\n        executor = executors[builderType];\n        if (executor !== undefined) {\n          result = executor.executeHitDetection(\n            context,\n            transform,\n            rotation,\n            featureCallback,\n            hitExtent,\n          );\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @return {Array<number>|null} Clip coordinates.\n   */\n  getClipCoords(transform) {\n    const maxExtent = this.maxExtent_;\n    if (!maxExtent) {\n      return null;\n    }\n    const minX = maxExtent[0];\n    const minY = maxExtent[1];\n    const maxX = maxExtent[2];\n    const maxY = maxExtent[3];\n    const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n    return flatClipCoords;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return isEmpty(this.executorsByZIndex_);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} targetContext Context.\n   * @param {import('../../size.js').Size} scaledCanvasSize Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n   * @param {Array<import(\"../canvas.js\").BuilderType>} [builderTypes] Ordered replay types to replay.\n   *     Default is {@link module:ol/render/replay~ALL}\n   * @param {import(\"rbush\").default|null} [declutterTree] Declutter tree.\n   *     When set to null, no decluttering is done, even when the executor group has a `ZIndexContext`.\n   */\n  execute(\n    targetContext,\n    scaledCanvasSize,\n    transform,\n    viewRotation,\n    snapToPixel,\n    builderTypes,\n    declutterTree,\n  ) {\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(ascending);\n\n    builderTypes = builderTypes ? builderTypes : ALL;\n    const maxBuilderTypes = ALL.length;\n    let i, ii, j, jj, replays;\n    if (declutterTree) {\n      zs.reverse();\n    }\n    for (i = 0, ii = zs.length; i < ii; ++i) {\n      const zIndexKey = zs[i].toString();\n      replays = this.executorsByZIndex_[zIndexKey];\n      for (j = 0, jj = builderTypes.length; j < jj; ++j) {\n        const builderType = builderTypes[j];\n        const replay = replays[builderType];\n        if (replay !== undefined) {\n          const zIndexContext =\n            declutterTree === null ? undefined : replay.getZIndexContext();\n          const context = zIndexContext\n            ? zIndexContext.getContext()\n            : targetContext;\n          const requireClip =\n            this.maxExtent_ &&\n            builderType !== 'Image' &&\n            builderType !== 'Text';\n          if (requireClip) {\n            context.save();\n            // setup clipping so that the parts of over-simplified geometries are not\n            // visible outside the current extent when panning\n            this.clip(context, transform);\n          }\n          if (\n            !zIndexContext ||\n            builderType === 'Text' ||\n            builderType === 'Image'\n          ) {\n            replay.execute(\n              context,\n              scaledCanvasSize,\n              transform,\n              viewRotation,\n              snapToPixel,\n              declutterTree,\n            );\n          } else {\n            zIndexContext.pushFunction((context) =>\n              replay.execute(\n                context,\n                scaledCanvasSize,\n                transform,\n                viewRotation,\n                snapToPixel,\n                declutterTree,\n              ),\n            );\n          }\n          if (requireClip) {\n            context.restore();\n          }\n          if (zIndexContext) {\n            zIndexContext.offset();\n            const index = zs[i] * maxBuilderTypes + j;\n            if (!this.deferredZIndexContexts_[index]) {\n              this.deferredZIndexContexts_[index] = [];\n            }\n            this.deferredZIndexContexts_[index].push(zIndexContext);\n          }\n        }\n      }\n    }\n\n    this.renderedContext_ = targetContext;\n  }\n\n  getDeferredZIndexContexts() {\n    return this.deferredZIndexContexts_;\n  }\n\n  getRenderedContext() {\n    return this.renderedContext_;\n  }\n\n  renderDeferred() {\n    const deferredZIndexContexts = this.deferredZIndexContexts_;\n    const zs = Object.keys(deferredZIndexContexts).map(Number).sort(ascending);\n    for (let i = 0, ii = zs.length; i < ii; ++i) {\n      deferredZIndexContexts[zs[i]].forEach((zIndexContext) => {\n        zIndexContext.draw(this.renderedContext_); // FIXME Pass clip to replay for temporarily enabling clip\n        zIndexContext.clear();\n      });\n      deferredZIndexContexts[zs[i]].length = 0;\n    }\n  }\n}\n\n/**\n * This cache is used to store arrays of indexes for calculated pixel circles\n * to increase performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<number>>}\n */\nconst circlePixelIndexArrayCache = {};\n\n/**\n * This methods creates an array with indexes of all pixels within a circle,\n * ordered by how close they are to the center.\n * A cache is used to increase performance.\n * @param {number} radius Radius.\n * @return {Array<number>} An array with indexes within a circle.\n */\nexport function getPixelIndexArray(radius) {\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\n    return circlePixelIndexArrayCache[radius];\n  }\n\n  const size = radius * 2 + 1;\n  const maxDistanceSq = radius * radius;\n  const distances = new Array(maxDistanceSq + 1);\n  for (let i = 0; i <= radius; ++i) {\n    for (let j = 0; j <= radius; ++j) {\n      const distanceSq = i * i + j * j;\n      if (distanceSq > maxDistanceSq) {\n        break;\n      }\n      let distance = distances[distanceSq];\n      if (!distance) {\n        distance = [];\n        distances[distanceSq] = distance;\n      }\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\n      if (i > 0) {\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\n      }\n      if (j > 0) {\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\n        if (i > 0) {\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\n        }\n      }\n    }\n  }\n\n  const pixelIndex = [];\n  for (let i = 0, ii = distances.length; i < ii; ++i) {\n    if (distances[i]) {\n      pixelIndex.push(...distances[i]);\n    }\n  }\n\n  circlePixelIndexArrayCache[radius] = pixelIndex;\n  return pixelIndex;\n}\n\nexport default ExecutorGroup;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}