{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/render/canvas/TextBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction from './Instruction.js';\nimport { asColorLike } from '../../colorlike.js';\nimport { defaultFillStyle, defaultFont, defaultLineCap, defaultLineDash, defaultLineDashOffset, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultPadding, defaultStrokeStyle, defaultTextAlign, defaultTextBaseline, registerFont } from '../canvas.js';\nimport { getUid } from '../../util.js';\nimport { intersects } from '../../extent.js';\nimport { lineChunk } from '../../geom/flat/linechunk.js';\nimport { matchingChunk } from '../../geom/flat/straightchunk.js';\n/**\n * @const\n * @type {{left: 0, center: 0.5, right: 1, top: 0, middle: 0.5, hanging: 0.2, alphabetic: 0.8, ideographic: 0.8, bottom: 1}}\n */\nexport const TEXT_ALIGN = {\n  'left': 0,\n  'center': 0.5,\n  'right': 1,\n  'top': 0,\n  'middle': 0.5,\n  'hanging': 0.2,\n  'alphabetic': 0.8,\n  'ideographic': 0.8,\n  'bottom': 1\n};\nclass CanvasTextBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n\n    /**\n     * @private\n     * @type {Array<HTMLCanvasElement>}\n     */\n    this.labels_ = null;\n\n    /**\n     * @private\n     * @type {string|Array<string>}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.textRotateWithView_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = {};\n    this.fillStates[defaultFillStyle] = {\n      fillStyle: defaultFillStyle\n    };\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = {};\n\n    /**\n     * @private\n     * @type {import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = /** @type {import(\"../canvas.js\").TextState} */{};\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.textKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.fillKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.strokeKey_ = '';\n\n    /**\n     * @type {import('../../style/Style.js').DeclutterMode}\n     */\n    this.declutterMode_ = undefined;\n\n    /**\n     * Data shared with an image builder for combined decluttering.\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\n     */\n    this.declutterImageWithText_ = undefined;\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    const instructions = super.finish();\n    instructions.textStates = this.textStates;\n    instructions.fillStates = this.fillStates;\n    instructions.strokeStates = this.strokeStates;\n    return instructions;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawText(geometry, feature, index) {\n    const fillState = this.textFillState_;\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    if (this.text_ === '' || !textState || !fillState && !strokeState) {\n      return;\n    }\n    const coordinates = this.coordinates;\n    let begin = coordinates.length;\n    const geometryType = geometry.getType();\n    let flatCoordinates = null;\n    let stride = geometry.getStride();\n    if (textState.placement === 'line' && (geometryType == 'LineString' || geometryType == 'MultiLineString' || geometryType == 'Polygon' || geometryType == 'MultiPolygon')) {\n      if (!intersects(this.maxExtent, geometry.getExtent())) {\n        return;\n      }\n      let ends;\n      flatCoordinates = geometry.getFlatCoordinates();\n      if (geometryType == 'LineString') {\n        ends = [flatCoordinates.length];\n      } else if (geometryType == 'MultiLineString') {\n        ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */geometry.getEnds();\n      } else if (geometryType == 'Polygon') {\n        ends = /** @type {import(\"../../geom/Polygon.js\").default} */geometry.getEnds().slice(0, 1);\n      } else if (geometryType == 'MultiPolygon') {\n        const endss = /** @type {import(\"../../geom/MultiPolygon.js\").default} */geometry.getEndss();\n        ends = [];\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\n          ends.push(endss[i][0]);\n        }\n      }\n      this.beginGeometry(geometry, feature, index);\n      const repeat = textState.repeat;\n      const textAlign = repeat ? undefined : textState.textAlign;\n      // No `justify` support for line placement.\n      let flatOffset = 0;\n      for (let o = 0, oo = ends.length; o < oo; ++o) {\n        let chunks;\n        if (repeat) {\n          chunks = lineChunk(repeat * this.resolution, flatCoordinates, flatOffset, ends[o], stride);\n        } else {\n          chunks = [flatCoordinates.slice(flatOffset, ends[o])];\n        }\n        for (let c = 0, cc = chunks.length; c < cc; ++c) {\n          const chunk = chunks[c];\n          let chunkBegin = 0;\n          let chunkEnd = chunk.length;\n          if (textAlign == undefined) {\n            const range = matchingChunk(textState.maxAngle, chunk, 0, chunk.length, 2);\n            chunkBegin = range[0];\n            chunkEnd = range[1];\n          }\n          for (let i = chunkBegin; i < chunkEnd; i += stride) {\n            coordinates.push(chunk[i], chunk[i + 1]);\n          }\n          const end = coordinates.length;\n          flatOffset = ends[o];\n          this.drawChars_(begin, end);\n          begin = end;\n        }\n      }\n      this.endGeometry(feature);\n    } else {\n      let geometryWidths = textState.overflow ? null : [];\n      switch (geometryType) {\n        case 'Point':\n        case 'MultiPoint':\n          flatCoordinates = /** @type {import(\"../../geom/MultiPoint.js\").default} */geometry.getFlatCoordinates();\n          break;\n        case 'LineString':\n          flatCoordinates = /** @type {import(\"../../geom/LineString.js\").default} */geometry.getFlatMidpoint();\n          break;\n        case 'Circle':\n          flatCoordinates = /** @type {import(\"../../geom/Circle.js\").default} */geometry.getCenter();\n          break;\n        case 'MultiLineString':\n          flatCoordinates = /** @type {import(\"../../geom/MultiLineString.js\").default} */geometry.getFlatMidpoints();\n          stride = 2;\n          break;\n        case 'Polygon':\n          flatCoordinates = /** @type {import(\"../../geom/Polygon.js\").default} */geometry.getFlatInteriorPoint();\n          if (!textState.overflow) {\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\n          }\n          stride = 3;\n          break;\n        case 'MultiPolygon':\n          const interiorPoints = /** @type {import(\"../../geom/MultiPolygon.js\").default} */geometry.getFlatInteriorPoints();\n          flatCoordinates = [];\n          for (let i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n            if (!textState.overflow) {\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\n            }\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n          }\n          if (flatCoordinates.length === 0) {\n            return;\n          }\n          stride = 2;\n          break;\n        default:\n      }\n      const end = this.appendFlatPointCoordinates(flatCoordinates, stride);\n      if (end === begin) {\n        return;\n      }\n      if (geometryWidths && (end - begin) / 2 !== flatCoordinates.length / stride) {\n        let beg = begin / 2;\n        geometryWidths = geometryWidths.filter((w, i) => {\n          const keep = coordinates[(beg + i) * 2] === flatCoordinates[i * stride] && coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];\n          if (!keep) {\n            --beg;\n          }\n          return keep;\n        });\n      }\n      this.saveTextStates_();\n      if (textState.backgroundFill || textState.backgroundStroke) {\n        this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);\n        if (textState.backgroundFill) {\n          this.updateFillStyle(this.state, this.createFill);\n        }\n        if (textState.backgroundStroke) {\n          this.updateStrokeStyle(this.state, this.applyStroke);\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\n        }\n      }\n      this.beginGeometry(geometry, feature, index);\n\n      // adjust padding for negative scale\n      let padding = textState.padding;\n      if (padding != defaultPadding && (textState.scale[0] < 0 || textState.scale[1] < 0)) {\n        let p0 = textState.padding[0];\n        let p1 = textState.padding[1];\n        let p2 = textState.padding[2];\n        let p3 = textState.padding[3];\n        if (textState.scale[0] < 0) {\n          p1 = -p1;\n          p3 = -p3;\n        }\n        if (textState.scale[1] < 0) {\n          p0 = -p0;\n          p2 = -p2;\n        }\n        padding = [p0, p1, p2, p3];\n      }\n\n      // The image is unknown at this stage so we pass null; it will be computed at render time.\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\n      // render time.\n      const pixelRatio = this.pixelRatio;\n      this.instructions.push([CanvasInstruction.DRAW_IMAGE, begin, end, null, NaN, NaN, NaN, 1, 0, 0, this.textRotateWithView_, this.textRotation_, [1, 1], NaN, this.declutterMode_, this.declutterImageWithText_, padding == defaultPadding ? defaultPadding : padding.map(function (p) {\n        return p * pixelRatio;\n      }), !!textState.backgroundFill, !!textState.backgroundStroke, this.text_, this.textKey_, this.strokeKey_, this.fillKey_, this.textOffsetX_, this.textOffsetY_, geometryWidths]);\n      const scale = 1 / pixelRatio;\n      // Set default fill for hit detection background\n      const currentFillStyle = this.state.fillStyle;\n      if (textState.backgroundFill) {\n        this.state.fillStyle = defaultFillStyle;\n        this.hitDetectionInstructions.push(this.createFill(this.state));\n      }\n      this.hitDetectionInstructions.push([CanvasInstruction.DRAW_IMAGE, begin, end, null, NaN, NaN, NaN, 1, 0, 0, this.textRotateWithView_, this.textRotation_, [scale, scale], NaN, this.declutterMode_, this.declutterImageWithText_, padding, !!textState.backgroundFill, !!textState.backgroundStroke, this.text_, this.textKey_, this.strokeKey_, this.fillKey_ ? defaultFillStyle : this.fillKey_, this.textOffsetX_, this.textOffsetY_, geometryWidths]);\n      // Reset previous fill\n      if (textState.backgroundFill) {\n        this.state.fillStyle = currentFillStyle;\n        this.hitDetectionInstructions.push(this.createFill(this.state));\n      }\n      this.endGeometry(feature);\n    }\n  }\n\n  /**\n   * @private\n   */\n  saveTextStates_() {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    const fillState = this.textFillState_;\n    const strokeKey = this.strokeKey_;\n    if (strokeState) {\n      if (!(strokeKey in this.strokeStates)) {\n        this.strokeStates[strokeKey] = {\n          strokeStyle: strokeState.strokeStyle,\n          lineCap: strokeState.lineCap,\n          lineDashOffset: strokeState.lineDashOffset,\n          lineWidth: strokeState.lineWidth,\n          lineJoin: strokeState.lineJoin,\n          miterLimit: strokeState.miterLimit,\n          lineDash: strokeState.lineDash\n        };\n      }\n    }\n    const textKey = this.textKey_;\n    if (!(textKey in this.textStates)) {\n      this.textStates[textKey] = {\n        font: textState.font,\n        textAlign: textState.textAlign || defaultTextAlign,\n        justify: textState.justify,\n        textBaseline: textState.textBaseline || defaultTextBaseline,\n        scale: textState.scale\n      };\n    }\n    const fillKey = this.fillKey_;\n    if (fillState) {\n      if (!(fillKey in this.fillStates)) {\n        this.fillStates[fillKey] = {\n          fillStyle: fillState.fillStyle\n        };\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   */\n  drawChars_(begin, end) {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    const strokeKey = this.strokeKey_;\n    const textKey = this.textKey_;\n    const fillKey = this.fillKey_;\n    this.saveTextStates_();\n    const pixelRatio = this.pixelRatio;\n    const baseline = TEXT_ALIGN[textState.textBaseline];\n    const offsetY = this.textOffsetY_ * pixelRatio;\n    const text = this.text_;\n    const strokeWidth = strokeState ? strokeState.lineWidth * Math.abs(textState.scale[0]) / 2 : 0;\n    this.instructions.push([CanvasInstruction.DRAW_CHARS, begin, end, baseline, textState.overflow, fillKey, textState.maxAngle, pixelRatio, offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1, this.declutterMode_]);\n    this.hitDetectionInstructions.push([CanvasInstruction.DRAW_CHARS, begin, end, baseline, textState.overflow, fillKey ? defaultFillStyle : fillKey, textState.maxAngle, pixelRatio, offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1 / pixelRatio, this.declutterMode_]);\n  }\n\n  /**\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @param {Object} [sharedData] Shared data.\n   */\n  setTextStyle(textStyle, sharedData) {\n    let textState, fillState, strokeState;\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        fillState = null;\n        this.textFillState_ = fillState;\n      } else {\n        fillState = this.textFillState_;\n        if (!fillState) {\n          fillState = /** @type {import(\"../canvas.js\").FillState} */{};\n          this.textFillState_ = fillState;\n        }\n        fillState.fillStyle = asColorLike(textFillStyle.getColor() || defaultFillStyle);\n      }\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        strokeState = null;\n        this.textStrokeState_ = strokeState;\n      } else {\n        strokeState = this.textStrokeState_;\n        if (!strokeState) {\n          strokeState = /** @type {import(\"../canvas.js\").StrokeState} */{};\n          this.textStrokeState_ = strokeState;\n        }\n        const lineDash = textStrokeStyle.getLineDash();\n        const lineDashOffset = textStrokeStyle.getLineDashOffset();\n        const lineWidth = textStrokeStyle.getWidth();\n        const miterLimit = textStrokeStyle.getMiterLimit();\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\n        strokeState.lineDashOffset = lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\n        strokeState.lineWidth = lineWidth === undefined ? defaultLineWidth : lineWidth;\n        strokeState.miterLimit = miterLimit === undefined ? defaultMiterLimit : miterLimit;\n        strokeState.strokeStyle = asColorLike(textStrokeStyle.getColor() || defaultStrokeStyle);\n      }\n      textState = this.textState_;\n      const font = textStyle.getFont() || defaultFont;\n      registerFont(font);\n      const textScale = textStyle.getScaleArray();\n      textState.overflow = textStyle.getOverflow();\n      textState.font = font;\n      textState.maxAngle = textStyle.getMaxAngle();\n      textState.placement = textStyle.getPlacement();\n      textState.textAlign = textStyle.getTextAlign();\n      textState.repeat = textStyle.getRepeat();\n      textState.justify = textStyle.getJustify();\n      textState.textBaseline = textStyle.getTextBaseline() || defaultTextBaseline;\n      textState.backgroundFill = textStyle.getBackgroundFill();\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\n      textState.padding = textStyle.getPadding() || defaultPadding;\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      this.text_ = textStyle.getText() || '';\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n      this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n      this.strokeKey_ = strokeState ? (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : getUid(strokeState.strokeStyle)) + strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth + strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' : '';\n      this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?') + (textState.repeat || '?') + (textState.justify || '?') + (textState.textBaseline || '?');\n      this.fillKey_ = fillState && fillState.fillStyle ? typeof fillState.fillStyle == 'string' ? fillState.fillStyle : '|' + getUid(fillState.fillStyle) : '';\n    }\n    this.declutterMode_ = textStyle.getDeclutterMode();\n    this.declutterImageWithText_ = sharedData;\n  }\n}\nexport default CanvasTextBuilder;","map":{"version":3,"names":["CanvasBuilder","CanvasInstruction","asColorLike","defaultFillStyle","defaultFont","defaultLineCap","defaultLineDash","defaultLineDashOffset","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultPadding","defaultStrokeStyle","defaultTextAlign","defaultTextBaseline","registerFont","getUid","intersects","lineChunk","matchingChunk","TEXT_ALIGN","CanvasTextBuilder","constructor","tolerance","maxExtent","resolution","pixelRatio","labels_","text_","textOffsetX_","textOffsetY_","textRotateWithView_","undefined","textRotation_","textFillState_","fillStates","fillStyle","textStrokeState_","strokeStates","textState_","textStates","textKey_","fillKey_","strokeKey_","declutterMode_","declutterImageWithText_","finish","instructions","drawText","geometry","feature","index","fillState","strokeState","textState","coordinates","begin","length","geometryType","getType","flatCoordinates","stride","getStride","placement","getExtent","ends","getFlatCoordinates","getEnds","slice","endss","getEndss","i","ii","push","beginGeometry","repeat","textAlign","flatOffset","o","oo","chunks","c","cc","chunk","chunkBegin","chunkEnd","range","maxAngle","end","drawChars_","endGeometry","geometryWidths","overflow","getFlatMidpoint","getCenter","getFlatMidpoints","getFlatInteriorPoint","interiorPoints","getFlatInteriorPoints","appendFlatPointCoordinates","beg","filter","w","keep","saveTextStates_","backgroundFill","backgroundStroke","setFillStrokeStyle","updateFillStyle","state","createFill","updateStrokeStyle","applyStroke","hitDetectionInstructions","createStroke","padding","scale","p0","p1","p2","p3","DRAW_IMAGE","NaN","map","p","currentFillStyle","strokeKey","strokeStyle","lineCap","lineDashOffset","lineWidth","lineJoin","miterLimit","lineDash","textKey","font","justify","textBaseline","fillKey","baseline","offsetY","text","strokeWidth","Math","abs","DRAW_CHARS","setTextStyle","textStyle","sharedData","textFillStyle","getFill","getColor","textStrokeStyle","getStroke","getLineDash","getLineDashOffset","getWidth","getMiterLimit","getLineCap","getLineJoin","getFont","textScale","getScaleArray","getOverflow","getMaxAngle","getPlacement","getTextAlign","getRepeat","getJustify","getTextBaseline","getBackgroundFill","getBackgroundStroke","getPadding","textOffsetX","getOffsetX","textOffsetY","getOffsetY","textRotateWithView","getRotateWithView","textRotation","getRotation","getText","join","getDeclutterMode"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/node_modules/ol/render/canvas/TextBuilder.js"],"sourcesContent":["/**\n * @module ol/render/canvas/TextBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction from './Instruction.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  defaultFillStyle,\n  defaultFont,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultPadding,\n  defaultStrokeStyle,\n  defaultTextAlign,\n  defaultTextBaseline,\n  registerFont,\n} from '../canvas.js';\nimport {getUid} from '../../util.js';\nimport {intersects} from '../../extent.js';\nimport {lineChunk} from '../../geom/flat/linechunk.js';\nimport {matchingChunk} from '../../geom/flat/straightchunk.js';\n/**\n * @const\n * @type {{left: 0, center: 0.5, right: 1, top: 0, middle: 0.5, hanging: 0.2, alphabetic: 0.8, ideographic: 0.8, bottom: 1}}\n */\nexport const TEXT_ALIGN = {\n  'left': 0,\n  'center': 0.5,\n  'right': 1,\n  'top': 0,\n  'middle': 0.5,\n  'hanging': 0.2,\n  'alphabetic': 0.8,\n  'ideographic': 0.8,\n  'bottom': 1,\n};\n\nclass CanvasTextBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n\n    /**\n     * @private\n     * @type {Array<HTMLCanvasElement>}\n     */\n    this.labels_ = null;\n\n    /**\n     * @private\n     * @type {string|Array<string>}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.textRotateWithView_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = {};\n    this.fillStates[defaultFillStyle] = {fillStyle: defaultFillStyle};\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = {};\n\n    /**\n     * @private\n     * @type {import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = /** @type {import(\"../canvas.js\").TextState} */ ({});\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.textKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.fillKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.strokeKey_ = '';\n\n    /**\n     * @type {import('../../style/Style.js').DeclutterMode}\n     */\n    this.declutterMode_ = undefined;\n\n    /**\n     * Data shared with an image builder for combined decluttering.\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\n     */\n    this.declutterImageWithText_ = undefined;\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    const instructions = super.finish();\n    instructions.textStates = this.textStates;\n    instructions.fillStates = this.fillStates;\n    instructions.strokeStates = this.strokeStates;\n    return instructions;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawText(geometry, feature, index) {\n    const fillState = this.textFillState_;\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    if (this.text_ === '' || !textState || (!fillState && !strokeState)) {\n      return;\n    }\n\n    const coordinates = this.coordinates;\n    let begin = coordinates.length;\n\n    const geometryType = geometry.getType();\n    let flatCoordinates = null;\n    let stride = geometry.getStride();\n\n    if (\n      textState.placement === 'line' &&\n      (geometryType == 'LineString' ||\n        geometryType == 'MultiLineString' ||\n        geometryType == 'Polygon' ||\n        geometryType == 'MultiPolygon')\n    ) {\n      if (!intersects(this.maxExtent, geometry.getExtent())) {\n        return;\n      }\n      let ends;\n      flatCoordinates = geometry.getFlatCoordinates();\n      if (geometryType == 'LineString') {\n        ends = [flatCoordinates.length];\n      } else if (geometryType == 'MultiLineString') {\n        ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n          geometry\n        ).getEnds();\n      } else if (geometryType == 'Polygon') {\n        ends = /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\n          .getEnds()\n          .slice(0, 1);\n      } else if (geometryType == 'MultiPolygon') {\n        const endss =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ).getEndss();\n        ends = [];\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\n          ends.push(endss[i][0]);\n        }\n      }\n      this.beginGeometry(geometry, feature, index);\n      const repeat = textState.repeat;\n      const textAlign = repeat ? undefined : textState.textAlign;\n      // No `justify` support for line placement.\n      let flatOffset = 0;\n      for (let o = 0, oo = ends.length; o < oo; ++o) {\n        let chunks;\n        if (repeat) {\n          chunks = lineChunk(\n            repeat * this.resolution,\n            flatCoordinates,\n            flatOffset,\n            ends[o],\n            stride,\n          );\n        } else {\n          chunks = [flatCoordinates.slice(flatOffset, ends[o])];\n        }\n        for (let c = 0, cc = chunks.length; c < cc; ++c) {\n          const chunk = chunks[c];\n          let chunkBegin = 0;\n          let chunkEnd = chunk.length;\n          if (textAlign == undefined) {\n            const range = matchingChunk(\n              textState.maxAngle,\n              chunk,\n              0,\n              chunk.length,\n              2,\n            );\n            chunkBegin = range[0];\n            chunkEnd = range[1];\n          }\n          for (let i = chunkBegin; i < chunkEnd; i += stride) {\n            coordinates.push(chunk[i], chunk[i + 1]);\n          }\n          const end = coordinates.length;\n          flatOffset = ends[o];\n          this.drawChars_(begin, end);\n          begin = end;\n        }\n      }\n      this.endGeometry(feature);\n    } else {\n      let geometryWidths = textState.overflow ? null : [];\n      switch (geometryType) {\n        case 'Point':\n        case 'MultiPoint':\n          flatCoordinates =\n            /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\n              geometry\n            ).getFlatCoordinates();\n          break;\n        case 'LineString':\n          flatCoordinates =\n            /** @type {import(\"../../geom/LineString.js\").default} */ (\n              geometry\n            ).getFlatMidpoint();\n          break;\n        case 'Circle':\n          flatCoordinates =\n            /** @type {import(\"../../geom/Circle.js\").default} */ (\n              geometry\n            ).getCenter();\n          break;\n        case 'MultiLineString':\n          flatCoordinates =\n            /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n              geometry\n            ).getFlatMidpoints();\n          stride = 2;\n          break;\n        case 'Polygon':\n          flatCoordinates =\n            /** @type {import(\"../../geom/Polygon.js\").default} */ (\n              geometry\n            ).getFlatInteriorPoint();\n          if (!textState.overflow) {\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\n          }\n          stride = 3;\n          break;\n        case 'MultiPolygon':\n          const interiorPoints =\n            /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n              geometry\n            ).getFlatInteriorPoints();\n          flatCoordinates = [];\n          for (let i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n            if (!textState.overflow) {\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\n            }\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n          }\n          if (flatCoordinates.length === 0) {\n            return;\n          }\n          stride = 2;\n          break;\n        default:\n      }\n      const end = this.appendFlatPointCoordinates(flatCoordinates, stride);\n      if (end === begin) {\n        return;\n      }\n      if (\n        geometryWidths &&\n        (end - begin) / 2 !== flatCoordinates.length / stride\n      ) {\n        let beg = begin / 2;\n        geometryWidths = geometryWidths.filter((w, i) => {\n          const keep =\n            coordinates[(beg + i) * 2] === flatCoordinates[i * stride] &&\n            coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];\n          if (!keep) {\n            --beg;\n          }\n          return keep;\n        });\n      }\n\n      this.saveTextStates_();\n\n      if (textState.backgroundFill || textState.backgroundStroke) {\n        this.setFillStrokeStyle(\n          textState.backgroundFill,\n          textState.backgroundStroke,\n        );\n        if (textState.backgroundFill) {\n          this.updateFillStyle(this.state, this.createFill);\n        }\n        if (textState.backgroundStroke) {\n          this.updateStrokeStyle(this.state, this.applyStroke);\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\n        }\n      }\n\n      this.beginGeometry(geometry, feature, index);\n\n      // adjust padding for negative scale\n      let padding = textState.padding;\n      if (\n        padding != defaultPadding &&\n        (textState.scale[0] < 0 || textState.scale[1] < 0)\n      ) {\n        let p0 = textState.padding[0];\n        let p1 = textState.padding[1];\n        let p2 = textState.padding[2];\n        let p3 = textState.padding[3];\n        if (textState.scale[0] < 0) {\n          p1 = -p1;\n          p3 = -p3;\n        }\n        if (textState.scale[1] < 0) {\n          p0 = -p0;\n          p2 = -p2;\n        }\n        padding = [p0, p1, p2, p3];\n      }\n\n      // The image is unknown at this stage so we pass null; it will be computed at render time.\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\n      // render time.\n      const pixelRatio = this.pixelRatio;\n      this.instructions.push([\n        CanvasInstruction.DRAW_IMAGE,\n        begin,\n        end,\n        null,\n        NaN,\n        NaN,\n        NaN,\n        1,\n        0,\n        0,\n        this.textRotateWithView_,\n        this.textRotation_,\n        [1, 1],\n        NaN,\n        this.declutterMode_,\n        this.declutterImageWithText_,\n        padding == defaultPadding\n          ? defaultPadding\n          : padding.map(function (p) {\n              return p * pixelRatio;\n            }),\n        !!textState.backgroundFill,\n        !!textState.backgroundStroke,\n        this.text_,\n        this.textKey_,\n        this.strokeKey_,\n        this.fillKey_,\n        this.textOffsetX_,\n        this.textOffsetY_,\n        geometryWidths,\n      ]);\n      const scale = 1 / pixelRatio;\n      // Set default fill for hit detection background\n      const currentFillStyle = this.state.fillStyle;\n      if (textState.backgroundFill) {\n        this.state.fillStyle = defaultFillStyle;\n        this.hitDetectionInstructions.push(this.createFill(this.state));\n      }\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.DRAW_IMAGE,\n        begin,\n        end,\n        null,\n        NaN,\n        NaN,\n        NaN,\n        1,\n        0,\n        0,\n        this.textRotateWithView_,\n        this.textRotation_,\n        [scale, scale],\n        NaN,\n        this.declutterMode_,\n        this.declutterImageWithText_,\n        padding,\n        !!textState.backgroundFill,\n        !!textState.backgroundStroke,\n        this.text_,\n        this.textKey_,\n        this.strokeKey_,\n        this.fillKey_ ? defaultFillStyle : this.fillKey_,\n        this.textOffsetX_,\n        this.textOffsetY_,\n        geometryWidths,\n      ]);\n      // Reset previous fill\n      if (textState.backgroundFill) {\n        this.state.fillStyle = currentFillStyle;\n        this.hitDetectionInstructions.push(this.createFill(this.state));\n      }\n\n      this.endGeometry(feature);\n    }\n  }\n\n  /**\n   * @private\n   */\n  saveTextStates_() {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    const fillState = this.textFillState_;\n\n    const strokeKey = this.strokeKey_;\n    if (strokeState) {\n      if (!(strokeKey in this.strokeStates)) {\n        this.strokeStates[strokeKey] = {\n          strokeStyle: strokeState.strokeStyle,\n          lineCap: strokeState.lineCap,\n          lineDashOffset: strokeState.lineDashOffset,\n          lineWidth: strokeState.lineWidth,\n          lineJoin: strokeState.lineJoin,\n          miterLimit: strokeState.miterLimit,\n          lineDash: strokeState.lineDash,\n        };\n      }\n    }\n    const textKey = this.textKey_;\n    if (!(textKey in this.textStates)) {\n      this.textStates[textKey] = {\n        font: textState.font,\n        textAlign: textState.textAlign || defaultTextAlign,\n        justify: textState.justify,\n        textBaseline: textState.textBaseline || defaultTextBaseline,\n        scale: textState.scale,\n      };\n    }\n    const fillKey = this.fillKey_;\n    if (fillState) {\n      if (!(fillKey in this.fillStates)) {\n        this.fillStates[fillKey] = {\n          fillStyle: fillState.fillStyle,\n        };\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   */\n  drawChars_(begin, end) {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n\n    const strokeKey = this.strokeKey_;\n    const textKey = this.textKey_;\n    const fillKey = this.fillKey_;\n    this.saveTextStates_();\n\n    const pixelRatio = this.pixelRatio;\n    const baseline = TEXT_ALIGN[textState.textBaseline];\n\n    const offsetY = this.textOffsetY_ * pixelRatio;\n    const text = this.text_;\n    const strokeWidth = strokeState\n      ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2\n      : 0;\n\n    this.instructions.push([\n      CanvasInstruction.DRAW_CHARS,\n      begin,\n      end,\n      baseline,\n      textState.overflow,\n      fillKey,\n      textState.maxAngle,\n      pixelRatio,\n      offsetY,\n      strokeKey,\n      strokeWidth * pixelRatio,\n      text,\n      textKey,\n      1,\n      this.declutterMode_,\n    ]);\n    this.hitDetectionInstructions.push([\n      CanvasInstruction.DRAW_CHARS,\n      begin,\n      end,\n      baseline,\n      textState.overflow,\n      fillKey ? defaultFillStyle : fillKey,\n      textState.maxAngle,\n      pixelRatio,\n      offsetY,\n      strokeKey,\n      strokeWidth * pixelRatio,\n      text,\n      textKey,\n      1 / pixelRatio,\n      this.declutterMode_,\n    ]);\n  }\n\n  /**\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @param {Object} [sharedData] Shared data.\n   */\n  setTextStyle(textStyle, sharedData) {\n    let textState, fillState, strokeState;\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        fillState = null;\n        this.textFillState_ = fillState;\n      } else {\n        fillState = this.textFillState_;\n        if (!fillState) {\n          fillState = /** @type {import(\"../canvas.js\").FillState} */ ({});\n          this.textFillState_ = fillState;\n        }\n        fillState.fillStyle = asColorLike(\n          textFillStyle.getColor() || defaultFillStyle,\n        );\n      }\n\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        strokeState = null;\n        this.textStrokeState_ = strokeState;\n      } else {\n        strokeState = this.textStrokeState_;\n        if (!strokeState) {\n          strokeState = /** @type {import(\"../canvas.js\").StrokeState} */ ({});\n          this.textStrokeState_ = strokeState;\n        }\n        const lineDash = textStrokeStyle.getLineDash();\n        const lineDashOffset = textStrokeStyle.getLineDashOffset();\n        const lineWidth = textStrokeStyle.getWidth();\n        const miterLimit = textStrokeStyle.getMiterLimit();\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\n        strokeState.lineDashOffset =\n          lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\n        strokeState.lineWidth =\n          lineWidth === undefined ? defaultLineWidth : lineWidth;\n        strokeState.miterLimit =\n          miterLimit === undefined ? defaultMiterLimit : miterLimit;\n        strokeState.strokeStyle = asColorLike(\n          textStrokeStyle.getColor() || defaultStrokeStyle,\n        );\n      }\n\n      textState = this.textState_;\n      const font = textStyle.getFont() || defaultFont;\n      registerFont(font);\n      const textScale = textStyle.getScaleArray();\n      textState.overflow = textStyle.getOverflow();\n      textState.font = font;\n      textState.maxAngle = textStyle.getMaxAngle();\n      textState.placement = textStyle.getPlacement();\n      textState.textAlign = textStyle.getTextAlign();\n      textState.repeat = textStyle.getRepeat();\n      textState.justify = textStyle.getJustify();\n      textState.textBaseline =\n        textStyle.getTextBaseline() || defaultTextBaseline;\n      textState.backgroundFill = textStyle.getBackgroundFill();\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\n      textState.padding = textStyle.getPadding() || defaultPadding;\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\n\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      this.text_ = textStyle.getText() || '';\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n      this.textRotateWithView_ =\n        textRotateWithView === undefined ? false : textRotateWithView;\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n\n      this.strokeKey_ = strokeState\n        ? (typeof strokeState.strokeStyle == 'string'\n            ? strokeState.strokeStyle\n            : getUid(strokeState.strokeStyle)) +\n          strokeState.lineCap +\n          strokeState.lineDashOffset +\n          '|' +\n          strokeState.lineWidth +\n          strokeState.lineJoin +\n          strokeState.miterLimit +\n          '[' +\n          strokeState.lineDash.join() +\n          ']'\n        : '';\n      this.textKey_ =\n        textState.font +\n        textState.scale +\n        (textState.textAlign || '?') +\n        (textState.repeat || '?') +\n        (textState.justify || '?') +\n        (textState.textBaseline || '?');\n      this.fillKey_ =\n        fillState && fillState.fillStyle\n          ? typeof fillState.fillStyle == 'string'\n            ? fillState.fillStyle\n            : '|' + getUid(fillState.fillStyle)\n          : '';\n    }\n    this.declutterMode_ = textStyle.getDeclutterMode();\n    this.declutterImageWithText_ = sharedData;\n  }\n}\n\nexport default CanvasTextBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}