{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport axios from 'axios';\nimport router from '@/router'; // Importujte instancu rutera\n\nexport default {\n  __name: 'AllChocolateFactories',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const factories = ref([]);\n    async function loadFactories() {\n      try {\n        const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects');\n        for (const factory of response.data) {\n          factory.address = await reverseGeocode(factory.latitude, factory.longitude);\n        }\n        factories.value = response.data;\n      } catch (error) {\n        console.error(\"Greška pri učitavanju fabrika:\", error);\n      }\n    }\n    onMounted(() => {\n      loadFactories();\n    });\n    const isFactoryOpen = factory => {\n      const currentTime = new Date();\n      const openingTime = new Date();\n      const closingTime = new Date();\n      const [openHour, openMinute] = factory.openingTime.split(':');\n      const [closeHour, closeMinute] = factory.closingTime.split(':');\n      openingTime.setHours(openHour, openMinute);\n      closingTime.setHours(closeHour, closeMinute);\n      return currentTime >= openingTime && currentTime <= closingTime;\n    };\n    const sortedFactories = computed(() => {\n      return factories.value.sort((a, b) => {\n        const aOpen = isFactoryOpen(a);\n        const bOpen = isFactoryOpen(b);\n        if (aOpen && !bOpen) return -1;\n        if (!aOpen && bOpen) return 1;\n        return 0;\n      });\n    });\n    const getFactoryLogo = logoFileName => {\n      return `/images/${logoFileName}`;\n    };\n    const viewFactoryProfile = factory => {\n      // Ovde dodajte logiku za otvaranje profila te fabrike\n      console.log(\"Prikaz profila fabrike:\", factory);\n      // Na primer, ako koristite Vue Router, možete preusmeriti korisnika na stranicu fabrike\n      router.push({\n        name: 'factory-profile',\n        params: {\n          id: factory.id\n        }\n      });\n    };\n    const __returned__ = {\n      factories,\n      loadFactories,\n      isFactoryOpen,\n      sortedFactories,\n      getFactoryLogo,\n      viewFactoryProfile,\n      ref,\n      onMounted,\n      computed,\n      get axios() {\n        return axios;\n      },\n      get router() {\n        return router;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","axios","router","factories","loadFactories","response","get","factory","data","address","reverseGeocode","latitude","longitude","value","error","console","isFactoryOpen","currentTime","Date","openingTime","closingTime","openHour","openMinute","split","closeHour","closeMinute","setHours","sortedFactories","sort","a","b","aOpen","bOpen","getFactoryLogo","logoFileName","viewFactoryProfile","log","push","name","params","id"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/src/views/AllChocolateFactories.vue"],"sourcesContent":["<template>\r\n  <div class=\"all-factories\">\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Logo</th>\r\n          <th>Naziv</th>\r\n          <th>Lokacija</th>\r\n          <th>Ocena</th>\r\n          <th>Prikaz</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"factory in sortedFactories\" :key=\"factory.id\">\r\n          <td><img :src=\"getFactoryLogo(factory.logo)\" alt=\"Logo\" class=\"factory-logo\" /></td>\r\n          <td>{{ factory.name }}</td>\r\n          <td>{{ factory.location }}</td>\r\n          <td>{{ factory.rating }}</td>\r\n          <td><button @click=\"viewFactoryProfile(factory)\">Prikaz</button></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\nimport axios from 'axios';\r\nimport router from '@/router'; // Importujte instancu rutera\r\n\r\nconst factories = ref([]);\r\n\r\nasync function loadFactories() {\r\n  try {\r\n    const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects');\r\n    for (const factory of response.data) {\r\n      factory.address = await reverseGeocode(factory.latitude, factory.longitude);\r\n    }\r\n    factories.value = response.data;\r\n  } catch (error) {\r\n    console.error(\"Greška pri učitavanju fabrika:\", error);\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  loadFactories();\r\n});\r\n\r\nconst isFactoryOpen = (factory) => {\r\n  const currentTime = new Date();\r\n  const openingTime = new Date();\r\n  const closingTime = new Date();\r\n  \r\n  const [openHour, openMinute] = factory.openingTime.split(':');\r\n  const [closeHour, closeMinute] = factory.closingTime.split(':');\r\n\r\n  openingTime.setHours(openHour, openMinute);\r\n  closingTime.setHours(closeHour, closeMinute);\r\n\r\n  return currentTime >= openingTime && currentTime <= closingTime;\r\n};\r\n\r\nconst sortedFactories = computed(() => {\r\n  return factories.value.sort((a, b) => {\r\n    const aOpen = isFactoryOpen(a);\r\n    const bOpen = isFactoryOpen(b);\r\n    if (aOpen && !bOpen) return -1;\r\n    if (!aOpen && bOpen) return 1;\r\n    return 0;\r\n  });\r\n});\r\n\r\nconst getFactoryLogo = (logoFileName) => {\r\n  return `/images/${logoFileName}`;\r\n};\r\n\r\n\r\n\r\n\r\nconst viewFactoryProfile = (factory) => {\r\n  // Ovde dodajte logiku za otvaranje profila te fabrike\r\n  console.log(\"Prikaz profila fabrike:\", factory);\r\n  // Na primer, ako koristite Vue Router, možete preusmeriti korisnika na stranicu fabrike\r\n  router.push({ name: 'factory-profile', params: { id: factory.id }});\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.all-factories {\r\n  padding: 20px;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\nth, td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\nth {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\n.factory-logo {\r\n  width: 100px;\r\n  height: 100px;\r\n}\r\n</style>\r\n"],"mappings":";AA0BA,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,KAAK;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU,CAAC,CAAC;;;;;;;;IAE/B,MAAMC,SAAS,GAAGL,GAAG,CAAC,EAAE,CAAC;IAEzB,eAAeM,aAAaA,CAAA,EAAG;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,mEAAmE,CAAC;QACrG,KAAK,MAAMC,OAAO,IAAIF,QAAQ,CAACG,IAAI,EAAE;UACnCD,OAAO,CAACE,OAAO,GAAG,MAAMC,cAAc,CAACH,OAAO,CAACI,QAAQ,EAAEJ,OAAO,CAACK,SAAS,CAAC;QAC7E;QACAT,SAAS,CAACU,KAAK,GAAGR,QAAQ,CAACG,IAAI;MACjC,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF;IAEAf,SAAS,CAAC,MAAM;MACdK,aAAa,CAAC,CAAC;IACjB,CAAC,CAAC;IAEF,MAAMY,aAAa,GAAIT,OAAO,IAAK;MACjC,MAAMU,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;MAC9B,MAAMC,WAAW,GAAG,IAAID,IAAI,CAAC,CAAC;MAC9B,MAAME,WAAW,GAAG,IAAIF,IAAI,CAAC,CAAC;MAE9B,MAAM,CAACG,QAAQ,EAAEC,UAAU,CAAC,GAAGf,OAAO,CAACY,WAAW,CAACI,KAAK,CAAC,GAAG,CAAC;MAC7D,MAAM,CAACC,SAAS,EAAEC,WAAW,CAAC,GAAGlB,OAAO,CAACa,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC;MAE/DJ,WAAW,CAACO,QAAQ,CAACL,QAAQ,EAAEC,UAAU,CAAC;MAC1CF,WAAW,CAACM,QAAQ,CAACF,SAAS,EAAEC,WAAW,CAAC;MAE5C,OAAOR,WAAW,IAAIE,WAAW,IAAIF,WAAW,IAAIG,WAAW;IACjE,CAAC;IAED,MAAMO,eAAe,GAAG3B,QAAQ,CAAC,MAAM;MACrC,OAAOG,SAAS,CAACU,KAAK,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACpC,MAAMC,KAAK,GAAGf,aAAa,CAACa,CAAC,CAAC;QAC9B,MAAMG,KAAK,GAAGhB,aAAa,CAACc,CAAC,CAAC;QAC9B,IAAIC,KAAK,IAAI,CAACC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC9B,IAAI,CAACD,KAAK,IAAIC,KAAK,EAAE,OAAO,CAAC;QAC7B,OAAO,CAAC;MACV,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,MAAMC,cAAc,GAAIC,YAAY,IAAK;MACvC,OAAQ,WAAUA,YAAa,EAAC;IAClC,CAAC;IAKD,MAAMC,kBAAkB,GAAI5B,OAAO,IAAK;MACtC;MACAQ,OAAO,CAACqB,GAAG,CAAC,yBAAyB,EAAE7B,OAAO,CAAC;MAC/C;MACAL,MAAM,CAACmC,IAAI,CAAC;QAAEC,IAAI,EAAE,iBAAiB;QAAEC,MAAM,EAAE;UAAEC,EAAE,EAAEjC,OAAO,CAACiC;QAAG;MAAC,CAAC,CAAC;IACrE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}