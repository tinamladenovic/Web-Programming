{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      chocolates: [],\n      // Svi čokoladni proizvodi\n      factories: [],\n      // Sve fabrike\n      currentUser: null // Trenutno ulogovan korisnik\n    };\n  },\n  async created() {\n    await this.fetchCurrentUser(); // Učitavanje trenutnog korisnika\n    await this.fetchFactories(); // Učitavanje svih fabrika\n    await this.fetchChocolates(); // Učitavanje svih čokolada\n  },\n  computed: {\n    filteredChocolates() {\n      if (this.isWorker) {\n        // Ako je korisnik radnik, prikazujemo samo čokolade iz njegove fabrike\n        return this.chocolates.filter(chocolate => chocolate.factoryId === this.currentUser.factoryId);\n      }\n      // Ako nije radnik, prikazujemo sve čokolade\n      return this.chocolates;\n    },\n    isManager() {\n      // Proveravamo da li je korisnik menadžer\n      return this.currentUser && this.currentUser.role === 'MANAGER';\n    },\n    isWorker() {\n      // Proveravamo da li je korisnik radnik\n      return this.currentUser && this.currentUser.role === 'WORKER';\n    },\n    isManagerOrWorker() {\n      // Proveravamo da li je korisnik menadžer ili radnik\n      return this.isManager || this.isWorker;\n    }\n  },\n  methods: {\n    async fetchChocolates() {\n      try {\n        const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/chocolates');\n        console.log('Loaded chocolates:', response.data);\n        this.chocolates = response.data; // Skladištimo sve čokolade u promenljivu\n      } catch (error) {\n        console.error('Greška pri preuzimanju čokolada:', error);\n      }\n    },\n    async fetchFactories() {\n      try {\n        const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects');\n        console.log('Loaded factories:', response.data);\n        this.factories = response.data; // Skladištimo sve fabrike u promenljivu\n      } catch (error) {\n        console.error('Greška pri preuzimanju fabrika:', error);\n      }\n    },\n    async fetchCurrentUser() {\n      try {\n        const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/currentUser');\n        console.log('Current user:', response.data);\n        this.currentUser = response.data; // Postavljamo trenutnog korisnika\n      } catch (error) {\n        console.error('Greška pri preuzimanju trenutnog korisnika:', error);\n      }\n    },\n    getFactoryName(factoryId) {\n      const factory = this.factories.find(f => f.factoryId === factoryId); // Pronalaženje fabrike po ID-u\n      console.log('Factory ID:', factoryId, 'Factory:', factory);\n      return factory ? factory.name : 'Nepoznato'; // Vraćamo naziv fabrike ili 'Nepoznato' ako nije pronađena\n    },\n    getChocolatePicture(pictureName) {\n      return `/images/${pictureName}`; // Generišemo putanju do slike čokolade\n    },\n    editChocolate(id) {\n      this.$router.push({\n        name: 'editchocolate',\n        params: {\n          id\n        }\n      }); // Navigacija ka ruti za uređivanje čokolade\n    },\n    async deleteChocolate(id) {\n      try {\n        await axios.delete(`http://localhost:8080/WebShopAppREST/rest/chocolates/${id}`); // Brisanje čokolade putem API-ja\n        this.chocolates = this.chocolates.filter(chocolate => chocolate.id !== id); // Ažuriramo listu čokolada\n      } catch (error) {\n        console.error('Greška pri brisanju čokolade:', error);\n      }\n    },\n    editQuantity(chocolate) {\n      const newQuantity = prompt(`Unesite novu količinu za ${chocolate.name}:`, chocolate.quantity); // Unos nove količine putem prompta\n      if (newQuantity !== null) {\n        this.updateQuantity(chocolate.id, parseInt(newQuantity, 10)); // Ažuriramo količinu ako je unesena nova vrednost\n      }\n    },\n    async updateQuantity(id, newQuantity) {\n      try {\n        await axios.put(`http://localhost:8080/WebShopAppREST/rest/chocolates/${id}/quantity`, {\n          quantity: newQuantity\n        }); // Slanje nove količine na server\n        const chocolate = this.chocolates.find(chocolate => chocolate.id === id);\n        if (chocolate) {\n          chocolate.quantity = newQuantity; // Ažuriranje količine u lokalnoj listi\n        }\n      } catch (error) {\n        console.error('Greška pri ažuriranju količine:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","chocolates","factories","currentUser","created","fetchCurrentUser","fetchFactories","fetchChocolates","computed","filteredChocolates","isWorker","filter","chocolate","factoryId","isManager","role","isManagerOrWorker","methods","response","get","console","log","error","getFactoryName","factory","find","f","name","getChocolatePicture","pictureName","editChocolate","id","$router","push","params","deleteChocolate","delete","editQuantity","newQuantity","prompt","quantity","updateQuantity","parseInt","put"],"sources":["C:\\Users\\PC\\eclipse-workspace\\apache-tomcat-9.0.89\\apache-tomcat-9.0.89\\webapps\\chocolate-factory-2\\Kostur\\Frontend\\front-app\\src\\views\\AllChocolates.vue"],"sourcesContent":["<template>\r\n  <div class=\"all-chocolates\">\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Slika</th>\r\n          <th>Naziv</th>\r\n          <th>Cena</th>\r\n          <th>Tip</th>\r\n          <th>Vrsta</th>\r\n          <th>Težina</th>\r\n          <th>Opis</th>\r\n          <th>Fabrika</th>\r\n          <th v-if=\"isManagerOrWorker\">Izmeni količinu</th> <!-- Prikazuje dugme za izmenu količine samo ako je korisnik menadžer ili radnik -->\r\n          <th >EDIT</th> <!-- Prikazuje dugme za editovanje samo ako je korisnik menadžer -->\r\n          <th >DELETE</th> <!-- Prikazuje dugme za brisanje samo ako je korisnik menadžer -->\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"chocolate in filteredChocolates\" :key=\"chocolate.id\">\r\n          <td><img :src=\"getChocolatePicture(chocolate.picture)\" :alt=\"chocolate.name\" class=\"chocolate-picture\" /></td>\r\n          <td>{{ chocolate.name }}</td>\r\n          <td>{{ chocolate.price }}</td>\r\n          <td>{{ chocolate.type }}</td>\r\n          <td>{{ chocolate.kind }}</td>\r\n          <td>{{ chocolate.weight }}</td>\r\n          <td>{{ chocolate.description }}</td>\r\n          <td>{{ getFactoryName(chocolate.factoryId) }}</td>\r\n          <td v-if=\"isWorker\"><button @click=\"editQuantity(chocolate)\">Izmeni količinu</button></td> <!-- Dugme za izmenu količine koje je vidljivo samo radnicima -->\r\n          <td v-if=\"isManager\"><button @click=\"editChocolate(chocolate.id)\">EDIT</button></td> <!-- Dugme za editovanje vidljivo samo menadžerima -->\r\n          <td v-if=\"isManager\"><button @click=\"deleteChocolate(chocolate.id)\">DELETE</button></td> <!-- Dugme za brisanje vidljivo samo menadžerima -->\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      chocolates: [], // Svi čokoladni proizvodi\r\n      factories: [], // Sve fabrike\r\n      currentUser: null // Trenutno ulogovan korisnik\r\n    };\r\n  },\r\n  async created() {\r\n    await this.fetchCurrentUser(); // Učitavanje trenutnog korisnika\r\n    await this.fetchFactories(); // Učitavanje svih fabrika\r\n    await this.fetchChocolates(); // Učitavanje svih čokolada\r\n  },\r\n  computed: {\r\n    filteredChocolates() {\r\n      if (this.isWorker) {\r\n        // Ako je korisnik radnik, prikazujemo samo čokolade iz njegove fabrike\r\n        return this.chocolates.filter(chocolate => chocolate.factoryId === this.currentUser.factoryId);\r\n      }\r\n      // Ako nije radnik, prikazujemo sve čokolade\r\n      return this.chocolates;\r\n    },\r\n    isManager() {\r\n      // Proveravamo da li je korisnik menadžer\r\n      return this.currentUser && this.currentUser.role === 'MANAGER';\r\n    },\r\n    isWorker() {\r\n      // Proveravamo da li je korisnik radnik\r\n      return this.currentUser && this.currentUser.role === 'WORKER';\r\n    },\r\n    isManagerOrWorker() {\r\n      // Proveravamo da li je korisnik menadžer ili radnik\r\n      return this.isManager || this.isWorker;\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchChocolates() {\r\n      try {\r\n        const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/chocolates');\r\n        console.log('Loaded chocolates:', response.data);\r\n        this.chocolates = response.data; // Skladištimo sve čokolade u promenljivu\r\n      } catch (error) {\r\n        console.error('Greška pri preuzimanju čokolada:', error);\r\n      }\r\n    },\r\n    async fetchFactories() {\r\n      try {\r\n        const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects');\r\n        console.log('Loaded factories:', response.data);\r\n        this.factories = response.data; // Skladištimo sve fabrike u promenljivu\r\n      } catch (error) {\r\n        console.error('Greška pri preuzimanju fabrika:', error);\r\n      }\r\n    },\r\n    async fetchCurrentUser() {\r\n      try {\r\n        const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/currentUser');\r\n        console.log('Current user:', response.data);\r\n        this.currentUser = response.data; // Postavljamo trenutnog korisnika\r\n      } catch (error) {\r\n        console.error('Greška pri preuzimanju trenutnog korisnika:', error);\r\n      }\r\n    },\r\n    getFactoryName(factoryId) {\r\n      const factory = this.factories.find(f => f.factoryId === factoryId); // Pronalaženje fabrike po ID-u\r\n      console.log('Factory ID:', factoryId, 'Factory:', factory);\r\n      return factory ? factory.name : 'Nepoznato'; // Vraćamo naziv fabrike ili 'Nepoznato' ako nije pronađena\r\n    },\r\n    getChocolatePicture(pictureName) {\r\n      return `/images/${pictureName}`; // Generišemo putanju do slike čokolade\r\n    },\r\n    editChocolate(id) {\r\n      this.$router.push({ name: 'editchocolate', params: { id } }); // Navigacija ka ruti za uređivanje čokolade\r\n    },\r\n    async deleteChocolate(id) {\r\n      try {\r\n        await axios.delete(`http://localhost:8080/WebShopAppREST/rest/chocolates/${id}`); // Brisanje čokolade putem API-ja\r\n        this.chocolates = this.chocolates.filter(chocolate => chocolate.id !== id); // Ažuriramo listu čokolada\r\n      } catch (error) {\r\n        console.error('Greška pri brisanju čokolade:', error);\r\n      }\r\n    },\r\n    editQuantity(chocolate) {\r\n      const newQuantity = prompt(`Unesite novu količinu za ${chocolate.name}:`, chocolate.quantity); // Unos nove količine putem prompta\r\n      if (newQuantity !== null) {\r\n        this.updateQuantity(chocolate.id, parseInt(newQuantity, 10)); // Ažuriramo količinu ako je unesena nova vrednost\r\n      }\r\n    },\r\n    async updateQuantity(id, newQuantity) {\r\n      try {\r\n        await axios.put(`http://localhost:8080/WebShopAppREST/rest/chocolates/${id}/quantity`, { quantity: newQuantity }); // Slanje nove količine na server\r\n        const chocolate = this.chocolates.find(chocolate => chocolate.id === id);\r\n        if (chocolate) {\r\n          chocolate.quantity = newQuantity; // Ažuriranje količine u lokalnoj listi\r\n        }\r\n      } catch (error) {\r\n        console.error('Greška pri ažuriranju količine:', error);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.all-chocolates {\r\n  overflow-x: auto;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-bottom: 20px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nth, td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\nth {\r\n  background-color: #f2f2f2;\r\n  cursor: pointer;\r\n}\r\n\r\n.chocolate-picture {\r\n  width: 50px;\r\n  height: 50px;\r\n  object-fit: cover;\r\n}\r\n\r\nbutton {\r\n  padding: 5px 10px;\r\n  margin: 2px;\r\n  background-color: #f5e7f5;\r\n  color: #333;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #d8bfd8;\r\n  color: #fff;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}