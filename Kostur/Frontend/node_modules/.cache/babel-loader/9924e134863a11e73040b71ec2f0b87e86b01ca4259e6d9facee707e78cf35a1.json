{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      currentUser: null // Čuvanje trenutnog korisnika\n    };\n  },\n  computed: {\n    isLoggedIn() {\n      return !!this.currentUser; // Provera da li je korisnik ulogovan\n    },\n    isAdmin() {\n      return this.currentUser && this.currentUser.role === 'ADMIN'; // Provera da li je korisnik admin\n    },\n    isManager() {\n      return this.currentUser && this.currentUser.role === 'MANAGER'; // Provera da li je korisnik menadžer\n    },\n    isWorker() {\n      return this.currentUser && this.currentUser.role === 'WORKER'; // Provera da li je korisnik radnik\n    },\n    isCustomer() {\n      return this.currentUser && this.currentUser.role === 'CUSTOMER'; // Provera da li je korisnik kupac\n    }\n  },\n  mounted() {\n    this.fetchCurrentUser();\n  },\n  methods: {\n    // Metoda za povlačenje trenutnog korisnika sa API-ja\n    async fetchCurrentUser() {\n      try {\n        const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/currentUser', {\n          withCredentials: true\n        });\n        if (response.data) {\n          this.currentUser = response.data; // Postavljanje trenutnog korisnika\n          localStorage.setItem('currentUser', JSON.stringify(this.currentUser)); // Čuvanje korisnika u localStorage\n          console.log(\"Current user fetched:\", this.currentUser);\n        } else {\n          this.currentUser = null; // Resetuj korisnika ako nema podataka\n          localStorage.removeItem('currentUser');\n        }\n      } catch (error) {\n        console.error('Error fetching current user:', error.response ? error.response.data : error.message);\n        this.currentUser = null; // Ako je došlo do greške, resetuj korisnika\n        localStorage.removeItem('currentUser');\n      }\n    },\n    // Metoda za odjavu korisnika\n    async handleLogout() {\n      try {\n        const response = await axios.post('http://localhost:8080/WebShopAppREST/rest/logout', {}, {\n          withCredentials: true\n        });\n        if (response.status === 200) {\n          this.currentUser = null;\n          localStorage.removeItem('currentUser'); // Brisanje podataka o korisniku iz localStorage-a\n          this.$router.push('/login'); // Preusmeravanje na login stranicu\n        } else {\n          console.error('Error logging out:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error during logout:', error.response ? error.response.data : error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","currentUser","computed","isLoggedIn","isAdmin","role","isManager","isWorker","isCustomer","mounted","fetchCurrentUser","methods","response","get","withCredentials","localStorage","setItem","JSON","stringify","console","log","removeItem","error","message","handleLogout","post","status","$router","push","statusText"],"sources":["C:\\Users\\PC\\eclipse-workspace\\apache-tomcat-9.0.89\\apache-tomcat-9.0.89\\webapps\\chocolate-factory-2\\Kostur\\Frontend\\front-app\\src\\App.vue"],"sourcesContent":["<template>\n  <nav>\n    <router-link to=\"/\">Chocolate Factories</router-link> |\n\n    <!-- Link za Add Factory vidljiv samo adminima -->\n    <router-link v-if=\"isAdmin\" to=\"/addfactory\">Add Factory</router-link> |\n\n    <!-- Link za Users vidljiv samo adminima -->\n    <router-link v-if=\"isAdmin\" to=\"/users\">Users</router-link> |\n\n    <!-- Link za Manager Dashboard vidljiv samo menadžerima -->\n    <router-link v-if=\"isManager\" to=\"/managerview\">Manager Dashboard</router-link> |\n\n    <!-- Link za Worker Dashboard vidljiv samo radnicima -->\n    <router-link v-if=\"isWorker\" to=\"/workerview\">Worker Dashboard</router-link> |\n\n    <!-- Linkovi za Register i Login vidljivi samo ako korisnik nije ulogovan -->\n    <router-link v-if=\"!isLoggedIn\" to=\"/register\">Register</router-link> |\n    <router-link v-if=\"!isLoggedIn\" to=\"/login\">Login</router-link> |\n\n    <!-- Linkovi za Logout i Profile vidljivi samo ako je korisnik ulogovan -->\n    <router-link v-if=\"isLoggedIn\" @click=\"handleLogout\" to=\"/login\">Logout</router-link> |\n    <router-link v-if=\"isLoggedIn\" to=\"/profile\">Profile</router-link> |\n  </nav>\n  <router-view />\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      currentUser: null, // Čuvanje trenutnog korisnika\n    };\n  },\n  computed: {\n    isLoggedIn() {\n      return !!this.currentUser; // Provera da li je korisnik ulogovan\n    },\n    isAdmin() {\n      return this.currentUser && this.currentUser.role === 'ADMIN'; // Provera da li je korisnik admin\n    },\n    isManager() {\n      return this.currentUser && this.currentUser.role === 'MANAGER'; // Provera da li je korisnik menadžer\n    },\n    isWorker() {\n      return this.currentUser && this.currentUser.role === 'WORKER'; // Provera da li je korisnik radnik\n    },\n    isCustomer() {\n      return this.currentUser && this.currentUser.role === 'CUSTOMER'; // Provera da li je korisnik kupac\n    }\n  },\n  mounted() {\n    this.fetchCurrentUser();\n  },\n  methods: {\n    // Metoda za povlačenje trenutnog korisnika sa API-ja\n    async fetchCurrentUser() {\n      try {\n        const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/currentUser', {\n          withCredentials: true\n        });\n        if (response.data) {\n          this.currentUser = response.data; // Postavljanje trenutnog korisnika\n          localStorage.setItem('currentUser', JSON.stringify(this.currentUser)); // Čuvanje korisnika u localStorage\n          console.log(\"Current user fetched:\", this.currentUser);\n        } else {\n          this.currentUser = null; // Resetuj korisnika ako nema podataka\n          localStorage.removeItem('currentUser');\n        }\n      } catch (error) {\n        console.error('Error fetching current user:', error.response ? error.response.data : error.message);\n        this.currentUser = null; // Ako je došlo do greške, resetuj korisnika\n        localStorage.removeItem('currentUser');\n      }\n    },\n    // Metoda za odjavu korisnika\n    async handleLogout() {\n      try {\n        const response = await axios.post('http://localhost:8080/WebShopAppREST/rest/logout', {}, {\n          withCredentials: true\n        });\n        if (response.status === 200) {\n          this.currentUser = null;\n          localStorage.removeItem('currentUser'); // Brisanje podataka o korisniku iz localStorage-a\n          this.$router.push('/login'); // Preusmeravanje na login stranicu\n        } else {\n          console.error('Error logging out:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error during logout:', error.response ? error.response.data : error.message);\n      }\n    }\n  }\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\nnav {\n  padding: 30px;\n}\n\nnav a {\n  font-weight: bold;\n  color: #2c3e50;\n}\n\nnav a.router-link-exact-active {\n  color: #42b983;\n}\n</style>\n"],"mappings":";AA4BA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,IAAI,CAAE;IACrB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,UAAUA,CAAA,EAAG;MACX,OAAO,CAAC,CAAC,IAAI,CAACF,WAAW,EAAE;IAC7B,CAAC;IACDG,OAAOA,CAAA,EAAG;MACR,OAAO,IAAI,CAACH,WAAU,IAAK,IAAI,CAACA,WAAW,CAACI,IAAG,KAAM,OAAO,EAAE;IAChE,CAAC;IACDC,SAASA,CAAA,EAAG;MACV,OAAO,IAAI,CAACL,WAAU,IAAK,IAAI,CAACA,WAAW,CAACI,IAAG,KAAM,SAAS,EAAE;IAClE,CAAC;IACDE,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACN,WAAU,IAAK,IAAI,CAACA,WAAW,CAACI,IAAG,KAAM,QAAQ,EAAE;IACjE,CAAC;IACDG,UAAUA,CAAA,EAAG;MACX,OAAO,IAAI,CAACP,WAAU,IAAK,IAAI,CAACA,WAAW,CAACI,IAAG,KAAM,UAAU,EAAE;IACnE;EACF,CAAC;EACDI,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,gBAAgB,CAAC,CAAC;EACzB,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMD,gBAAgBA,CAAA,EAAG;MACvB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMb,KAAK,CAACc,GAAG,CAAC,uDAAuD,EAAE;UACxFC,eAAe,EAAE;QACnB,CAAC,CAAC;QACF,IAAIF,QAAQ,CAACZ,IAAI,EAAE;UACjB,IAAI,CAACC,WAAU,GAAIW,QAAQ,CAACZ,IAAI,EAAE;UAClCe,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACjB,WAAW,CAAC,CAAC,EAAE;UACvEkB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAACnB,WAAW,CAAC;QACxD,OAAO;UACL,IAAI,CAACA,WAAU,GAAI,IAAI,EAAE;UACzBc,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;QACxC;MACF,EAAE,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAACV,QAAO,GAAIU,KAAK,CAACV,QAAQ,CAACZ,IAAG,GAAIsB,KAAK,CAACC,OAAO,CAAC;QACnG,IAAI,CAACtB,WAAU,GAAI,IAAI,EAAE;QACzBc,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;MACxC;IACF,CAAC;IACD;IACA,MAAMG,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAMZ,QAAO,GAAI,MAAMb,KAAK,CAAC0B,IAAI,CAAC,kDAAkD,EAAE,CAAC,CAAC,EAAE;UACxFX,eAAe,EAAE;QACnB,CAAC,CAAC;QACF,IAAIF,QAAQ,CAACc,MAAK,KAAM,GAAG,EAAE;UAC3B,IAAI,CAACzB,WAAU,GAAI,IAAI;UACvBc,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC,EAAE;UACxC,IAAI,CAACM,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAE;QAC/B,OAAO;UACLT,OAAO,CAACG,KAAK,CAAC,oBAAoB,EAAEV,QAAQ,CAACiB,UAAU,CAAC;QAC1D;MACF,EAAE,OAAOP,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACV,QAAO,GAAIU,KAAK,CAACV,QAAQ,CAACZ,IAAG,GAAIsB,KAAK,CAACC,OAAO,CAAC;MAC7F;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}