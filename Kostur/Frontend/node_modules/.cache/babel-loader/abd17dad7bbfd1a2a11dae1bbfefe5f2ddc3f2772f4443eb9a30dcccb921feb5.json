{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as ol from 'ol';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport { fromLonLat, transform } from 'ol/proj';\nexport default {\n  __name: 'AddFactory',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const factory = ref({\n      name: '',\n      location: '',\n      openingTime: '',\n      closingTime: '',\n      logo: null\n    });\n    let map;\n\n    // Initialize OpenLayers map\n    onMounted(() => {\n      try {\n        map = new ol.Map({\n          target: 'map',\n          // Ensure 'map' matches your div id\n          layers: [new ol.layer.Tile({\n            source: new ol.source.OSM()\n          })],\n          view: new ol.View({\n            center: ol.proj.fromLonLat([0, 0]),\n            zoom: 2\n          })\n        });\n        map.on('click', function (event) {\n          const coordinate = event.coordinate;\n          const location = ol.proj.transform(coordinate, 'EPSG:3857', 'EPSG:4326');\n          factory.value.location = `${location[1]}, ${location[0]}`;\n        });\n      } catch (error) {\n        console.error('Error initializing map:', error);\n      }\n    });\n    const handleLogoUpload = event => {\n      const file = event.target.files[0];\n      factory.value.logo = file;\n    };\n    const submitFactory = async () => {\n      try {\n        const formData = new FormData();\n        formData.append('name', factory.value.name);\n        formData.append('location', factory.value.location);\n        formData.append('openingTime', factory.value.openingTime);\n        formData.append('closingTime', factory.value.closingTime);\n        formData.append('logo', factory.value.logo);\n        await axios.post('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        router.push('/factories'); // Redirect after successful creation\n      } catch (error) {\n        console.error('Error creating factory:', error);\n      }\n    };\n    const __returned__ = {\n      router,\n      factory,\n      get map() {\n        return map;\n      },\n      set map(v) {\n        map = v;\n      },\n      handleLogoUpload,\n      submitFactory,\n      get ol() {\n        return ol;\n      },\n      get Map() {\n        return Map;\n      },\n      get View() {\n        return View;\n      },\n      get TileLayer() {\n        return TileLayer;\n      },\n      get OSM() {\n        return OSM;\n      },\n      get fromLonLat() {\n        return fromLonLat;\n      },\n      get transform() {\n        return transform;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ol","Map","View","TileLayer","OSM","fromLonLat","transform","router","useRouter","factory","ref","name","location","openingTime","closingTime","logo","map","onMounted","target","layers","layer","Tile","source","view","center","proj","zoom","on","event","coordinate","value","error","console","handleLogoUpload","file","files","submitFactory","formData","FormData","append","axios","post","headers","push"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/src/views/AddFactory.vue"],"sourcesContent":["<template>\r\n    <div class=\"add-factory\">\r\n      <h2>Create New Chocolate Factory</h2>\r\n      <form @submit.prevent=\"submitFactory\">\r\n        <div class=\"form-group\">\r\n          <label for=\"factoryName\">Factory Name:</label>\r\n          <input type=\"text\" id=\"factoryName\" v-model=\"factory.name\" required>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"factoryLocation\">Location:</label>\r\n          <div id=\"map\" class=\"map\"></div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"workingHours\">Working Hours:</label>\r\n          <div class=\"time-inputs\">\r\n            <input type=\"text\" id=\"openingTime\" v-model=\"factory.openingTime\" placeholder=\"Opening Time\" required>\r\n            <input type=\"text\" id=\"closingTime\" v-model=\"factory.closingTime\" placeholder=\"Closing Time\" required>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"logoFile\">Select Logo:</label>\r\n          <input type=\"file\" id=\"logoFile\" @change=\"handleLogoUpload\" accept=\"image/*\" required>\r\n        </div>\r\n        <button type=\"submit\">Create Factory</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n import * as ol from 'ol';\r\nimport Map from 'ol/Map';\r\nimport View from 'ol/View';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport OSM from 'ol/source/OSM';\r\nimport { fromLonLat, transform } from 'ol/proj';\r\n  \r\n  const router = useRouter();\r\n  const factory = ref({\r\n    name: '',\r\n    location: '',\r\n    openingTime: '',\r\n    closingTime: '',\r\n    logo: null\r\n  });\r\n  \r\n  let map;\r\n  \r\n  // Initialize OpenLayers map\r\n  onMounted(() => {\r\n    try {\r\n      map = new ol.Map({\r\n        target: 'map', // Ensure 'map' matches your div id\r\n        layers: [\r\n          new ol.layer.Tile({\r\n            source: new ol.source.OSM()\r\n          })\r\n        ],\r\n        view: new ol.View({\r\n          center: ol.proj.fromLonLat([0, 0]),\r\n          zoom: 2\r\n        })\r\n      });\r\n  \r\n      map.on('click', function (event) {\r\n        const coordinate = event.coordinate;\r\n        const location = ol.proj.transform(coordinate, 'EPSG:3857', 'EPSG:4326');\r\n        factory.value.location = `${location[1]}, ${location[0]}`;\r\n      });\r\n    } catch (error) {\r\n      console.error('Error initializing map:', error);\r\n    }\r\n  });\r\n  \r\n  const handleLogoUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    factory.value.logo = file;\r\n  };\r\n  \r\n  const submitFactory = async () => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('name', factory.value.name);\r\n      formData.append('location', factory.value.location);\r\n      formData.append('openingTime', factory.value.openingTime);\r\n      formData.append('closingTime', factory.value.closingTime);\r\n      formData.append('logo', factory.value.logo);\r\n  \r\n      await axios.post('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n  \r\n      router.push('/factories'); // Redirect after successful creation\r\n    } catch (error) {\r\n      console.error('Error creating factory:', error);\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .add-factory {\r\n    max-width: 600px;\r\n    margin: 20px auto;\r\n    padding: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 8px;\r\n  }\r\n  \r\n  .form-group {\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  .label {\r\n    display: block;\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  input[type=\"text\"], input[type=\"file\"] {\r\n    width: 100%;\r\n    padding: 8px;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  button {\r\n    padding: 10px 20px;\r\n    background-color: #007bff;\r\n    color: #fff;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: 16px;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  \r\n  .map {\r\n    height: 300px; /* Adjust height as needed */\r\n    width: 100%;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}