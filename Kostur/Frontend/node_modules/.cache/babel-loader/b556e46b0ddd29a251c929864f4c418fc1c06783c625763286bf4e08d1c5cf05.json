{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport axios from 'axios';\nimport { useRouter } from 'vue-router';\nexport default {\n  __name: 'AddFactory',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const factory = ref({\n      name: '',\n      location: '',\n      openingTime: '',\n      closingTime: '',\n      logo: null\n    });\n    const handleLogoUpload = event => {\n      const file = event.target.files[0];\n      factory.value.logo = file;\n    };\n    const submitFactory = async () => {\n      try {\n        const formData = new FormData();\n        formData.append('name', factory.value.name);\n        formData.append('location', factory.value.location);\n        formData.append('openingTime', factory.value.openingTime);\n        formData.append('closingTime', factory.value.closingTime);\n        formData.append('logo', factory.value.logo);\n        await axios.post('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n\n        // Redirect to factory list or other appropriate route after successful creation\n        router.push('/factories'); // Example route, adjust as needed\n      } catch (error) {\n        console.error('Error creating factory:', error);\n        // Handle error state or display error message\n      }\n    };\n    const __returned__ = {\n      router,\n      factory,\n      handleLogoUpload,\n      submitFactory,\n      ref,\n      get axios() {\n        return axios;\n      },\n      get useRouter() {\n        return useRouter;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","axios","useRouter","router","factory","name","location","openingTime","closingTime","logo","handleLogoUpload","event","file","target","files","value","submitFactory","formData","FormData","append","post","headers","push","error","console"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/src/views/AddFactory.vue"],"sourcesContent":["<template>\r\n    <div class=\"add-factory\">\r\n      <h2>Create New Chocolate Factory</h2>\r\n      <form @submit.prevent=\"submitFactory\">\r\n        <div class=\"form-group\">\r\n          <label for=\"factoryName\">Factory Name:</label>\r\n          <input type=\"text\" id=\"factoryName\" v-model=\"factory.name\" required>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"factoryLocation\">Location:</label>\r\n          <input type=\"text\" id=\"factoryLocation\" v-model=\"factory.location\" required>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"openingTime\">Opening Time:</label>\r\n          <input type=\"time\" id=\"openingTime\" v-model=\"factory.openingTime\" required>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"closingTime\">Closing Time:</label>\r\n          <input type=\"time\" id=\"closingTime\" v-model=\"factory.closingTime\" required>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"logoFile\">Select Logo:</label>\r\n          <input type=\"file\" id=\"logoFile\" @change=\"handleLogoUpload\" accept=\"image/*\" required>\r\n        </div>\r\n        <button type=\"submit\">Create Factory</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref } from 'vue';\r\n  import axios from 'axios';\r\n  import { useRouter } from 'vue-router';\r\n  \r\n  const router = useRouter();\r\n  const factory = ref({\r\n    name: '',\r\n    location: '',\r\n    openingTime: '',\r\n    closingTime: '',\r\n    logo: null\r\n  });\r\n  \r\n  const handleLogoUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    factory.value.logo = file;\r\n  };\r\n  \r\n  const submitFactory = async () => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('name', factory.value.name);\r\n      formData.append('location', factory.value.location);\r\n      formData.append('openingTime', factory.value.openingTime);\r\n      formData.append('closingTime', factory.value.closingTime);\r\n      formData.append('logo', factory.value.logo);\r\n  \r\n      await axios.post('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n  \r\n      // Redirect to factory list or other appropriate route after successful creation\r\n      router.push('/factories'); // Example route, adjust as needed\r\n    } catch (error) {\r\n      console.error('Error creating factory:', error);\r\n      // Handle error state or display error message\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .add-factory {\r\n    max-width: 600px;\r\n    margin: 20px auto;\r\n    padding: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 8px;\r\n  }\r\n  \r\n  .form-group {\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  label {\r\n    display: block;\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  input[type=\"text\"], input[type=\"time\"], input[type=\"file\"] {\r\n    width: 100%;\r\n    padding: 8px;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  button {\r\n    padding: 10px 20px;\r\n    background-color: #007bff;\r\n    color: #fff;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: 16px;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  </style>\r\n  "],"mappings":";AA8BE,SAASA,GAAG,QAAQ,KAAK;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;;;;;;;IAEtC,MAAMC,MAAM,GAAGD,SAAS,CAAC,CAAC;IAC1B,MAAME,OAAO,GAAGJ,GAAG,CAAC;MAClBK,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE;IACR,CAAC,CAAC;IAEF,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;MAClC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClCV,OAAO,CAACW,KAAK,CAACN,IAAI,GAAGG,IAAI;IAC3B,CAAC;IAED,MAAMI,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEf,OAAO,CAACW,KAAK,CAACV,IAAI,CAAC;QAC3CY,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEf,OAAO,CAACW,KAAK,CAACT,QAAQ,CAAC;QACnDW,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEf,OAAO,CAACW,KAAK,CAACR,WAAW,CAAC;QACzDU,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEf,OAAO,CAACW,KAAK,CAACP,WAAW,CAAC;QACzDS,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEf,OAAO,CAACW,KAAK,CAACN,IAAI,CAAC;QAE3C,MAAMR,KAAK,CAACmB,IAAI,CAAC,mEAAmE,EAAEH,QAAQ,EAAE;UAC9FI,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;;QAEF;QACAlB,MAAM,CAACmB,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C;MACF;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}