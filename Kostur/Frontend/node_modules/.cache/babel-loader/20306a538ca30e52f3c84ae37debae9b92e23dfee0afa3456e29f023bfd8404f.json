{"ast":null,"code":"export class BaseResponse {\n  /**\n   * Returns whether the response has an ok'ish status code\n   */\n  get ok() {\n    return this.status >= 200 && this.status <= 299;\n  }\n\n  /**\n   * Returns the status code of the response\n   */\n  get status() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns the value of the specified header\n   * @param {string} headerName the header name\n   * @returns {string} the header value\n   */\n  getHeader(headerName) {\n    // eslint-disable-line no-unused-vars\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @returns {ArrayBuffer} the response data of the request\n   */\n  async getData() {\n    throw new Error('not implemented');\n  }\n}\nexport class BaseClient {\n  constructor(url) {\n    this.url = url;\n  }\n\n  /**\n   * Send a request with the options\n   * @param {{headers: HeadersInit, signal: AbortSignal}} [options={}]\n   * @returns {Promise<BaseResponse>}\n   */\n  async request({\n    headers,\n    signal\n  } = {}) {\n    // eslint-disable-line no-unused-vars\n    throw new Error('request is not implemented');\n  }\n}","map":{"version":3,"names":["BaseResponse","ok","status","Error","getHeader","headerName","getData","BaseClient","constructor","url","request","headers","signal"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/node_modules/geotiff/dist-module/source/client/base.js"],"sourcesContent":["export class BaseResponse {\n  /**\n   * Returns whether the response has an ok'ish status code\n   */\n  get ok() {\n    return this.status >= 200 && this.status <= 299;\n  }\n\n  /**\n   * Returns the status code of the response\n   */\n  get status() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns the value of the specified header\n   * @param {string} headerName the header name\n   * @returns {string} the header value\n   */\n  getHeader(headerName) { // eslint-disable-line no-unused-vars\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @returns {ArrayBuffer} the response data of the request\n   */\n  async getData() {\n    throw new Error('not implemented');\n  }\n}\n\nexport class BaseClient {\n  constructor(url) {\n    this.url = url;\n  }\n\n  /**\n   * Send a request with the options\n   * @param {{headers: HeadersInit, signal: AbortSignal}} [options={}]\n   * @returns {Promise<BaseResponse>}\n   */\n  async request({ headers, signal } = {}) { // eslint-disable-line no-unused-vars\n    throw new Error('request is not implemented');\n  }\n}\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,CAAC;EACxB;AACF;AACA;EACE,IAAIC,EAAEA,CAAA,EAAG;IACP,OAAO,IAAI,CAACC,MAAM,IAAI,GAAG,IAAI,IAAI,CAACA,MAAM,IAAI,GAAG;EACjD;;EAEA;AACF;AACA;EACE,IAAIA,MAAMA,CAAA,EAAG;IACX,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;;EAEA;AACF;AACA;AACA;AACA;EACEC,SAASA,CAACC,UAAU,EAAE;IAAE;IACtB,MAAM,IAAIF,KAAK,CAAC,iBAAiB,CAAC;EACpC;;EAEA;AACF;AACA;EACE,MAAMG,OAAOA,CAAA,EAAG;IACd,MAAM,IAAIH,KAAK,CAAC,iBAAiB,CAAC;EACpC;AACF;AAEA,OAAO,MAAMI,UAAU,CAAC;EACtBC,WAAWA,CAACC,GAAG,EAAE;IACf,IAAI,CAACA,GAAG,GAAGA,GAAG;EAChB;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMC,OAAOA,CAAC;IAAEC,OAAO;IAAEC;EAAO,CAAC,GAAG,CAAC,CAAC,EAAE;IAAE;IACxC,MAAM,IAAIT,KAAK,CAAC,4BAA4B,CAAC;EAC/C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}