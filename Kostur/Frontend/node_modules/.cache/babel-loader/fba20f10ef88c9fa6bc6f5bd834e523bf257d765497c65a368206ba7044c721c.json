{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport { useRouter } from 'vue-router';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport { fromLonLat, transform } from 'ol/proj';\nexport default {\n  __name: 'AddFactory',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const factory = ref({\n      name: '',\n      location: '',\n      openingTime: '',\n      closingTime: '',\n      logoName: ''\n    });\n    const selectedLocation = ref({\n      address: '',\n      latitude: null,\n      longitude: null\n    });\n    let map;\n    onMounted(() => {\n      map = new Map({\n        target: 'map',\n        layers: [new TileLayer({\n          source: new OSM()\n        })],\n        view: new View({\n          center: fromLonLat([19.8335, 45.2671]),\n          // Initial center (example coordinates)\n          zoom: 12\n        })\n      });\n      map.on('click', function (event) {\n        const coordinate = event.coordinate;\n        const location = transform(coordinate, 'EPSG:3857', 'EPSG:4326');\n        selectedLocation.value.latitude = location[1];\n        selectedLocation.value.longitude = location[0];\n        fetchAddress(location);\n      });\n    });\n    const fetchAddress = async location => {\n      try {\n        // Example: Replace with your actual reverse geocoding API endpoint\n        const response = await axios.get(`http://example.com/reverse-geocode?lat=${location[1]}&lon=${location[0]}`);\n        selectedLocation.value.address = response.data.address;\n      } catch (error) {\n        console.error('Error fetching address:', error);\n      }\n    };\n    const submitFactory = async () => {\n      try {\n        const factoryData = {\n          name: factory.value.name,\n          location: {\n            address: selectedLocation.value.address,\n            latitude: selectedLocation.value.latitude,\n            longitude: selectedLocation.value.longitude\n          },\n          openingTime: factory.value.openingTime,\n          closingTime: factory.value.closingTime,\n          logoName: factory.value.logoName\n        };\n        await axios.post('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects', factoryData, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        router.push('/'); // Example route, adjust as needed\n      } catch (error) {\n        console.error('Error creating factory:', error);\n      }\n    };\n    const __returned__ = {\n      router,\n      factory,\n      selectedLocation,\n      get map() {\n        return map;\n      },\n      set map(v) {\n        map = v;\n      },\n      fetchAddress,\n      submitFactory,\n      ref,\n      onMounted,\n      get axios() {\n        return axios;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get Map() {\n        return Map;\n      },\n      get View() {\n        return View;\n      },\n      get TileLayer() {\n        return TileLayer;\n      },\n      get OSM() {\n        return OSM;\n      },\n      get fromLonLat() {\n        return fromLonLat;\n      },\n      get transform() {\n        return transform;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","useRouter","Map","View","TileLayer","OSM","fromLonLat","transform","router","factory","name","location","openingTime","closingTime","logoName","selectedLocation","address","latitude","longitude","map","target","layers","source","view","center","zoom","on","event","coordinate","value","fetchAddress","response","get","data","error","console","submitFactory","factoryData","post","headers","push"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/src/views/AddFactory.vue"],"sourcesContent":["<template>\r\n    <div class=\"add-factory\">\r\n      <h2>Create New Chocolate Factory</h2>\r\n      <form @submit.prevent=\"submitFactory\">\r\n        <div class=\"form-group\">\r\n          <label for=\"factoryName\">Factory Name:</label>\r\n          <input type=\"text\" id=\"factoryName\" v-model=\"factory.name\" required>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"factoryLocation\">Location:</label>\r\n          <div id=\"map\" class=\"map\"></div>\r\n          <input type=\"text\" v-model=\"factory.location\" placeholder=\"Selected Location\" readonly>\r\n          <input type=\"text\" v-model=\"selectedLocation.address\" placeholder=\"Address\" readonly>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"workingHours\">Working Hours:</label>\r\n          <div class=\"time-inputs\">\r\n            <input type=\"text\" id=\"openingTime\" v-model=\"factory.openingTime\" placeholder=\"Opening Time\" required>\r\n            <input type=\"text\" id=\"closingTime\" v-model=\"factory.closingTime\" placeholder=\"Closing Time\" required>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"logoName\">Logo Name:</label>\r\n          <input type=\"text\" id=\"logoName\" v-model=\"factory.logoName\" required>\r\n        </div>\r\n        <button type=\"submit\">Create Factory</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted } from 'vue';\r\n  import axios from 'axios';\r\n  import { useRouter } from 'vue-router';\r\n  import Map from 'ol/Map';\r\n  import View from 'ol/View';\r\n  import TileLayer from 'ol/layer/Tile';\r\n  import OSM from 'ol/source/OSM';\r\n  import { fromLonLat, transform } from 'ol/proj';\r\n  \r\n  const router = useRouter();\r\n  const factory = ref({\r\n    name: '',\r\n    location: '',\r\n    openingTime: '',\r\n    closingTime: '',\r\n    logoName: ''\r\n  });\r\n  \r\n  const selectedLocation = ref({\r\n    address: '',\r\n    latitude: null,\r\n    longitude: null\r\n  });\r\n  \r\n  let map;\r\n  \r\n  onMounted(() => {\r\n    map = new Map({\r\n      target: 'map',\r\n      layers: [\r\n        new TileLayer({\r\n          source: new OSM()\r\n        })\r\n      ],\r\n      view: new View({\r\n        center: fromLonLat([19.8335, 45.2671]), // Initial center (example coordinates)\r\n        zoom: 12\r\n      })\r\n    });\r\n  \r\n    map.on('click', function (event) {\r\n      const coordinate = event.coordinate;\r\n      const location = transform(coordinate, 'EPSG:3857', 'EPSG:4326');\r\n      selectedLocation.value.latitude = location[1];\r\n      selectedLocation.value.longitude = location[0];\r\n      fetchAddress(location);\r\n    });\r\n  });\r\n  \r\n  const fetchAddress = async (location) => {\r\n    try {\r\n      // Example: Replace with your actual reverse geocoding API endpoint\r\n      const response = await axios.get(`http://example.com/reverse-geocode?lat=${location[1]}&lon=${location[0]}`);\r\n      selectedLocation.value.address = response.data.address;\r\n    } catch (error) {\r\n      console.error('Error fetching address:', error);\r\n    }\r\n  };\r\n  \r\n  const submitFactory = async () => {\r\n    try {\r\n      const factoryData = {\r\n        name: factory.value.name,\r\n        location: {\r\n          address: selectedLocation.value.address,\r\n          latitude: selectedLocation.value.latitude,\r\n          longitude: selectedLocation.value.longitude\r\n        },\r\n        openingTime: factory.value.openingTime,\r\n        closingTime: factory.value.closingTime,\r\n        logoName: factory.value.logoName\r\n      };\r\n  \r\n      await axios.post('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects', factoryData, {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n  \r\n      router.push('/'); // Example route, adjust as needed\r\n    } catch (error) {\r\n      console.error('Error creating factory:', error);\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .add-factory {\r\n    max-width: 600px;\r\n    margin: 20px auto;\r\n    padding: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 8px;\r\n  }\r\n  \r\n  .form-group {\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  label {\r\n    display: block;\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  input[type=\"text\"], input[type=\"file\"] {\r\n    width: 100%;\r\n    padding: 8px;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  button {\r\n    padding: 10px 20px;\r\n    background-color: #007bff;\r\n    color: #fff;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: 16px;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  \r\n  .map {\r\n    height: 300px; /* Adjust height as needed */\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}