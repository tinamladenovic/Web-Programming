{"ast":null,"code":"import { ref, onMounted, computed } from 'vue';\nimport axios from 'axios';\nexport default {\n  __name: 'AllFactoryView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const factories = ref([]);\n    function loadFactories() {\n      axios.get('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects').then(response => {\n        factories.value = response.data;\n      }).catch(error => console.log(error));\n    }\n    onMounted(() => {\n      loadFactories();\n    });\n    const isFactoryOpen = factory => {\n      const currentTime = new Date();\n      const openingTime = new Date();\n      const closingTime = new Date();\n      const [openHour, openMinute] = factory.openingTime.split(':');\n      const [closeHour, closeMinute] = factory.closingTime.split(':');\n      openingTime.setHours(openHour, openMinute);\n      closingTime.setHours(closeHour, closeMinute);\n      return currentTime >= openingTime && currentTime <= closingTime;\n    };\n    const sortedFactories = computed(() => {\n      return factories.value.sort((a, b) => {\n        const aOpen = isFactoryOpen(a);\n        const bOpen = isFactoryOpen(b);\n        if (aOpen && !bOpen) return -1;\n        if (!aOpen && bOpen) return 1;\n        return 0;\n      });\n    });\n    const getFactoryLogo = logoFileName => {\n      return `/images/${logoFileName}`;\n    };\n    const __returned__ = {\n      factories,\n      loadFactories,\n      isFactoryOpen,\n      sortedFactories,\n      getFactoryLogo,\n      ref,\n      onMounted,\n      computed,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","axios","factories","loadFactories","get","then","response","value","data","catch","error","console","log","isFactoryOpen","factory","currentTime","Date","openingTime","closingTime","openHour","openMinute","split","closeHour","closeMinute","setHours","sortedFactories","sort","a","b","aOpen","bOpen","getFactoryLogo","logoFileName"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/src/views/AllFactoryView.vue"],"sourcesContent":["<template>\r\n    <div class=\"all-factories\">\r\n      <h1>All Chocolate Factories</h1>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Logo</th>\r\n            <th>Name</th>\r\n            <th>Location</th>\r\n            <th>Rating</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"factory in sortedFactories\" :key=\"factory.id\">\r\n            <td><img :src=\"getFactoryLogo(factory.logo)\" alt=\"Logo\" class=\"factory-logo\" /></td>\r\n            <td>{{ factory.name }}</td>\r\n            <td>{{ factory.location.adress }}, {{ factory.location.adress }}</td>\r\n            <td>{{ factory.rating }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted, computed } from 'vue';\r\n  import axios from 'axios';\r\n  \r\n  const factories = ref([]);\r\n  \r\n  function loadFactories() {\r\n    axios.get('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects')\r\n      .then(response => {\r\n        factories.value = response.data;\r\n      })\r\n      .catch(error => console.log(error));\r\n  }\r\n  \r\n  onMounted(() => {\r\n    loadFactories();\r\n  });\r\n  \r\n  const isFactoryOpen = (factory) => {\r\n    const currentTime = new Date();\r\n    const openingTime = new Date();\r\n    const closingTime = new Date();\r\n    \r\n    const [openHour, openMinute] = factory.openingTime.split(':');\r\n    const [closeHour, closeMinute] = factory.closingTime.split(':');\r\n  \r\n    openingTime.setHours(openHour, openMinute);\r\n    closingTime.setHours(closeHour, closeMinute);\r\n  \r\n    return currentTime >= openingTime && currentTime <= closingTime;\r\n  };\r\n  \r\n  const sortedFactories = computed(() => {\r\n    return factories.value.sort((a, b) => {\r\n      const aOpen = isFactoryOpen(a);\r\n      const bOpen = isFactoryOpen(b);\r\n      if (aOpen && !bOpen) return -1;\r\n      if (!aOpen && bOpen) return 1;\r\n      return 0;\r\n    });\r\n  });\r\n  \r\n  const getFactoryLogo = (logoFileName) => {\r\n    return `/images/${logoFileName}`;\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .all-factories {\r\n    padding: 20px;\r\n  }\r\n  \r\n  table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n  }\r\n  \r\n  th, td {\r\n    border: 1px solid #ddd;\r\n    padding: 8px;\r\n    text-align: left;\r\n  }\r\n  \r\n  th {\r\n    background-color: #f2f2f2;\r\n  }\r\n  \r\n  .factory-logo {\r\n    width: 100px;\r\n    height: 100px;\r\n  }\r\n  </style>\r\n  "],"mappings":"AAyBE,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,KAAK;AAC9C,OAAOC,KAAK,MAAM,OAAO;;;;;;;IAEzB,MAAMC,SAAS,GAAGJ,GAAG,CAAC,EAAE,CAAC;IAEzB,SAASK,aAAaA,CAAA,EAAG;MACvBF,KAAK,CAACG,GAAG,CAAC,mEAAmE,CAAC,CAC3EC,IAAI,CAACC,QAAQ,IAAI;QAChBJ,SAAS,CAACK,KAAK,GAAGD,QAAQ,CAACE,IAAI;MACjC,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;IACvC;IAEAX,SAAS,CAAC,MAAM;MACdI,aAAa,CAAC,CAAC;IACjB,CAAC,CAAC;IAEF,MAAMU,aAAa,GAAIC,OAAO,IAAK;MACjC,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;MAC9B,MAAMC,WAAW,GAAG,IAAID,IAAI,CAAC,CAAC;MAC9B,MAAME,WAAW,GAAG,IAAIF,IAAI,CAAC,CAAC;MAE9B,MAAM,CAACG,QAAQ,EAAEC,UAAU,CAAC,GAAGN,OAAO,CAACG,WAAW,CAACI,KAAK,CAAC,GAAG,CAAC;MAC7D,MAAM,CAACC,SAAS,EAAEC,WAAW,CAAC,GAAGT,OAAO,CAACI,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC;MAE/DJ,WAAW,CAACO,QAAQ,CAACL,QAAQ,EAAEC,UAAU,CAAC;MAC1CF,WAAW,CAACM,QAAQ,CAACF,SAAS,EAAEC,WAAW,CAAC;MAE5C,OAAOR,WAAW,IAAIE,WAAW,IAAIF,WAAW,IAAIG,WAAW;IACjE,CAAC;IAED,MAAMO,eAAe,GAAGzB,QAAQ,CAAC,MAAM;MACrC,OAAOE,SAAS,CAACK,KAAK,CAACmB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACpC,MAAMC,KAAK,GAAGhB,aAAa,CAACc,CAAC,CAAC;QAC9B,MAAMG,KAAK,GAAGjB,aAAa,CAACe,CAAC,CAAC;QAC9B,IAAIC,KAAK,IAAI,CAACC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC9B,IAAI,CAACD,KAAK,IAAIC,KAAK,EAAE,OAAO,CAAC;QAC7B,OAAO,CAAC;MACV,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,MAAMC,cAAc,GAAIC,YAAY,IAAK;MACvC,OAAQ,WAAUA,YAAa,EAAC;IAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}