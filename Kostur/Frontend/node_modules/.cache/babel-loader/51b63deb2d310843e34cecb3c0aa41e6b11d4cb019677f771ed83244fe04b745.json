{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-9dea18fa\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"all-factories\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Logo\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Name\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Location\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Rating\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Edit\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Delete\")])], -1 /* HOISTED */));\nconst _hoisted_3 = [\"src\"];\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"table\", null, [_hoisted_2, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sortedFactories, factory => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: factory.id\n    }, [_createElementVNode(\"td\", null, [_createElementVNode(\"img\", {\n      src: $setup.getFactoryLogo(factory.logo),\n      alt: \"Logo\",\n      class: \"factory-logo\"\n    }, null, 8 /* PROPS */, _hoisted_3)]), _createElementVNode(\"td\", null, _toDisplayString(factory.name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(factory.location), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(factory.rating), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $setup.editFactory(factory.id)\n    }, \"Edit\", 8 /* PROPS */, _hoisted_4)]), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $setup.deleteFactory(factory.id)\n    }, \"Delete\", 8 /* PROPS */, _hoisted_5)])]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_Fragment","_renderList","$setup","sortedFactories","factory","key","id","src","getFactoryLogo","logo","alt","_hoisted_3","_toDisplayString","name","location","rating","onClick","$event","editFactory","_hoisted_4","deleteFactory","_hoisted_5"],"sources":["C:\\Users\\PC\\eclipse-workspace\\apache-tomcat-9.0.89\\apache-tomcat-9.0.89\\webapps\\chocolate-factory-2\\Kostur\\Frontend\\front-app\\src\\views\\AllChocolateFactories.vue"],"sourcesContent":["<template>\r\n    <div class=\"all-factories\">\r\n      \r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Logo</th>\r\n            <th>Name</th>\r\n            <th>Location</th>\r\n            <th>Rating</th>\r\n            <th>Edit</th>\r\n            <th>Delete</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"factory in sortedFactories\" :key=\"factory.id\">\r\n            <td><img :src=\"getFactoryLogo(factory.logo)\" alt=\"Logo\" class=\"factory-logo\" /></td>\r\n            <td>{{ factory.name }}</td>\r\n            <td>{{ factory.location }}</td>\r\n            <td>{{ factory.rating }}</td>\r\n            <td><button @click=\"editFactory(factory.id)\">Edit</button></td>\r\n            <td><button @click=\"deleteFactory(factory.id)\">Delete</button></td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted, computed } from 'vue';\r\n  import axios from 'axios';\r\n  \r\n  const factories = ref([]);\r\n  \r\n  async function loadFactories() {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects');\r\n      for (const factory of response.data) {\r\n        factory.address = await reverseGeocode(factory.latitude, factory.longitude);\r\n      }\r\n      factories.value = response.data;\r\n    } catch (error) {\r\n      console.error(\"Error loading factories:\", error);\r\n    }\r\n  }\r\n  \r\n  onMounted(() => {\r\n    loadFactories();\r\n  });\r\n  \r\n  const isFactoryOpen = (factory) => {\r\n    const currentTime = new Date();\r\n    const openingTime = new Date();\r\n    const closingTime = new Date();\r\n    \r\n    const [openHour, openMinute] = factory.openingTime.split(':');\r\n    const [closeHour, closeMinute] = factory.closingTime.split(':');\r\n  \r\n    openingTime.setHours(openHour, openMinute);\r\n    closingTime.setHours(closeHour, closeMinute);\r\n  \r\n    return currentTime >= openingTime && currentTime <= closingTime;\r\n  };\r\n  \r\n  const sortedFactories = computed(() => {\r\n    return factories.value.sort((a, b) => {\r\n      const aOpen = isFactoryOpen(a);\r\n      const bOpen = isFactoryOpen(b);\r\n      if (aOpen && !bOpen) return -1;\r\n      if (!aOpen && bOpen) return 1;\r\n      return 0;\r\n    });\r\n  });\r\n  \r\n  const getFactoryLogo = (logoFileName) => {\r\n    return `/images/${logoFileName}`;\r\n  };\r\n  \r\n  async function reverseGeocode(latitude, longitude) {\r\n  try {\r\n    const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=YOUR_API_KEY`);\r\n    console.log(response.data); // Dodajte ovu liniju za proveru\r\n    if (response.data.results.length > 0) {\r\n      return response.data.results[0].formatted_address;\r\n    } else {\r\n      return \"Address not found\";\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching address:\", error);\r\n    return \"Error fetching address\";\r\n  }\r\n  }\r\n  \r\n  const editFactory = (factoryId) => {\r\n    // Logika za editovanje fabrike\r\n    console.log(\"Edit factory with ID:\", factoryId);\r\n  };\r\n  \r\n  const deleteFactory = (factoryId) => {\r\n    // Logika za brisanje fabrike\r\n    console.log(\"Delete factory with ID:\", factoryId);\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .all-factories {\r\n    padding: 20px;\r\n  }\r\n  \r\n  table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n  }\r\n  \r\n  th, td {\r\n    border: 1px solid #ddd;\r\n    padding: 8px;\r\n    text-align: left;\r\n  }\r\n  \r\n  th {\r\n    background-color: #f2f2f2;\r\n  }\r\n  \r\n  .factory-logo {\r\n    width: 100px;\r\n    height: 100px;\r\n  }\r\n  </style>\r\n  "],"mappings":";;;EACSA,KAAK,EAAC;AAAe;gEAGtBC,mBAAA,CASQ,gB,aARNA,mBAAA,CAOK,a,aANHA,mBAAA,CAAa,YAAT,MAAI,G,aACRA,mBAAA,CAAa,YAAT,MAAI,G,aACRA,mBAAA,CAAiB,YAAb,UAAQ,G,aACZA,mBAAA,CAAe,YAAX,QAAM,G,aACVA,mBAAA,CAAa,YAAT,MAAI,G,aACRA,mBAAA,CAAe,YAAX,QAAM,E;mBAXtB;mBAAA;mBAAA;;uBACIC,mBAAA,CAwBM,OAxBNC,UAwBM,GAtBJF,mBAAA,CAqBQ,gBApBNG,UASQ,EACRH,mBAAA,CASQ,iB,kBARNC,mBAAA,CAOKG,SAAA,QAtBfC,WAAA,CAegCC,MAAA,CAAAC,eAAe,EAA1BC,OAAO;yBAAlBP,mBAAA,CAOK;MAPmCQ,GAAG,EAAED,OAAO,CAACE;QACnDV,mBAAA,CAAoF,aAAhFA,mBAAA,CAA2E;MAArEW,GAAG,EAAEL,MAAA,CAAAM,cAAc,CAACJ,OAAO,CAACK,IAAI;MAAGC,GAAG,EAAC,MAAM;MAACf,KAAK,EAAC;4BAhB1EgB,UAAA,E,GAiBYf,mBAAA,CAA2B,YAAAgB,gBAAA,CAApBR,OAAO,CAACS,IAAI,kBACnBjB,mBAAA,CAA+B,YAAAgB,gBAAA,CAAxBR,OAAO,CAACU,QAAQ,kBACvBlB,mBAAA,CAA6B,YAAAgB,gBAAA,CAAtBR,OAAO,CAACW,MAAM,kBACrBnB,mBAAA,CAA+D,aAA3DA,mBAAA,CAAsD;MAA7CoB,OAAK,EAAAC,MAAA,IAAEf,MAAA,CAAAgB,WAAW,CAACd,OAAO,CAACE,EAAE;OAAG,MAAI,iBApB7Da,UAAA,E,GAqBYvB,mBAAA,CAAmE,aAA/DA,mBAAA,CAA0D;MAAjDoB,OAAK,EAAAC,MAAA,IAAEf,MAAA,CAAAkB,aAAa,CAAChB,OAAO,CAACE,EAAE;OAAG,QAAM,iBArBjEe,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}