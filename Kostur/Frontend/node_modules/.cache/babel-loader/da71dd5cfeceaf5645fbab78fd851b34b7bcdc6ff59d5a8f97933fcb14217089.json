{"ast":null,"code":"import { createRouter, createWebHashHistory } from 'vue-router';\nimport AllChocolateFactories from '../views/AllChocolateFactories.vue';\nimport AllChocolates from '../views/AllChocolates.vue';\nimport Register from '../views/Register.vue';\nimport Login from '../views/Login.vue';\nimport Logout from '../views/Logout.vue';\nimport UserProfile from '../views/UserProfile.vue';\nconst routes = [{\n  path: '/',\n  name: 'allfactoriesview',\n  component: AllChocolateFactories,\n  meta: {\n    requiresAuth: true\n  } // Samo prijavljeni korisnici mogu videti\n}, {\n  path: '/allchocolates',\n  name: 'allchocolates',\n  component: AllChocolates,\n  meta: {\n    requiresAuth: true\n  } // Samo prijavljeni korisnici mogu videti\n}, {\n  path: '/register',\n  name: 'register',\n  component: Register\n}, {\n  path: '/login',\n  name: 'login',\n  component: Login\n}, {\n  path: '/logout',\n  name: 'logout',\n  component: Logout,\n  meta: {\n    requiresAuth: true\n  } // Samo prijavljeni korisnici mogu videti\n}, {\n  path: '/profile',\n  name: 'profile',\n  component: UserProfile,\n  meta: {\n    requiresAuth: true\n  } // Samo prijavljeni korisnici mogu videti\n}\n// Other routes...\n];\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  const publicPages = ['/login', '/register'];\n  const loggedIn = localStorage.getItem('user');\n\n  // Provera da li ruta zahteva autentifikaciju (requiresAuth)\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    if (!loggedIn) {\n      // Ako nije prijavljen, preusmeri na login\n      return next('/login');\n    }\n  } else {\n    // Ako ruta nije označena kao requiresAuth, ali korisnik nije prijavljen, preusmeri na '/'\n    if (!loggedIn && !publicPages.includes(to.path)) {\n      return next('/login');\n    }\n  }\n  next();\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHashHistory","AllChocolateFactories","AllChocolates","Register","Login","Logout","UserProfile","routes","path","name","component","meta","requiresAuth","router","history","beforeEach","to","from","next","publicPages","loggedIn","localStorage","getItem","matched","some","record","includes"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHashHistory } from 'vue-router';\nimport AllChocolateFactories from '../views/AllChocolateFactories.vue';\nimport AllChocolates from '../views/AllChocolates.vue';\nimport Register from '../views/Register.vue';\nimport Login from '../views/Login.vue';\nimport Logout from '../views/Logout.vue';\nimport UserProfile from '../views/UserProfile.vue';\n\nconst routes = [\n  {\n    path: '/',\n    name: 'allfactoriesview',\n    component: AllChocolateFactories,\n    meta: { requiresAuth: true } // Samo prijavljeni korisnici mogu videti\n  },\n  {\n    path: '/allchocolates',\n    name: 'allchocolates',\n    component: AllChocolates,\n    meta: { requiresAuth: true } // Samo prijavljeni korisnici mogu videti\n  },\n  {\n    path: '/register',\n    name: 'register',\n    component: Register,\n  },\n  {\n    path: '/login',\n    name: 'login',\n    component: Login,\n  },\n  {\n    path: '/logout',\n    name: 'logout',\n    component: Logout,\n    meta: { requiresAuth: true } // Samo prijavljeni korisnici mogu videti\n  },\n  {\n    path: '/profile',\n    name: 'profile',\n    component: UserProfile,\n    meta: { requiresAuth: true } // Samo prijavljeni korisnici mogu videti\n  },\n  // Other routes...\n];\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes\n});\n\nrouter.beforeEach((to, from, next) => {\n  const publicPages = ['/login', '/register'];\n  const loggedIn = localStorage.getItem('user');\n\n  // Provera da li ruta zahteva autentifikaciju (requiresAuth)\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    if (!loggedIn) {\n      // Ako nije prijavljen, preusmeri na login\n      return next('/login');\n    }\n  } else {\n    // Ako ruta nije označena kao requiresAuth, ali korisnik nije prijavljen, preusmeri na '/'\n    if (!loggedIn && !publicPages.includes(to.path)) {\n      return next('/login');\n    }\n  }\n\n  next();\n});\n\nexport default router;\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,oBAAoB,QAAQ,YAAY;AAC/D,OAAOC,qBAAqB,MAAM,oCAAoC;AACtE,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,WAAW,MAAM,0BAA0B;AAElD,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,kBAAkB;EACxBC,SAAS,EAAET,qBAAqB;EAChCU,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAC;AAC/B,CAAC,EACD;EACEJ,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,eAAe;EACrBC,SAAS,EAAER,aAAa;EACxBS,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAC;AAC/B,CAAC,EACD;EACEJ,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEP;AACb,CAAC,EACD;EACEK,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEN;AACb,CAAC,EACD;EACEI,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAEL,MAAM;EACjBM,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAC;AAC/B,CAAC,EACD;EACEJ,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEJ,WAAW;EACtBK,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAC;AAC/B;AACA;AAAA,CACD;AAED,MAAMC,MAAM,GAAGd,YAAY,CAAC;EAC1Be,OAAO,EAAEd,oBAAoB,CAAC,CAAC;EAC/BO;AACF,CAAC,CAAC;AAEFM,MAAM,CAACE,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,WAAW,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC;EAC3C,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;;EAE7C;EACA,IAAIN,EAAE,CAACO,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACd,IAAI,CAACC,YAAY,CAAC,EAAE;IACvD,IAAI,CAACQ,QAAQ,EAAE;MACb;MACA,OAAOF,IAAI,CAAC,QAAQ,CAAC;IACvB;EACF,CAAC,MAAM;IACL;IACA,IAAI,CAACE,QAAQ,IAAI,CAACD,WAAW,CAACO,QAAQ,CAACV,EAAE,CAACR,IAAI,CAAC,EAAE;MAC/C,OAAOU,IAAI,CAAC,QAAQ,CAAC;IACvB;EACF;EAEAA,IAAI,CAAC,CAAC;AACR,CAAC,CAAC;AAEF,eAAeL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}