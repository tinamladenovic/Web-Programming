{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport { ZSTDDecoder } from 'zstddec';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\nexport const zstd = new ZSTDDecoder();\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      case LercAddCompression.Zstandard:\n        buffer = zstd.decode(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n    const lercResult = Lerc.decode(buffer, {\n      returnPixelInterleavedDims: this.planarConfiguration === 1\n    });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n}","map":{"version":3,"names":["inflate","Lerc","ZSTDDecoder","BaseDecoder","LercParameters","LercAddCompression","zstd","LercDecoder","constructor","fileDirectory","planarConfiguration","PlanarConfiguration","samplesPerPixel","SamplesPerPixel","addCompression","AddCompression","decodeBlock","buffer","None","Deflate","Uint8Array","Zstandard","decode","Error","lercResult","returnPixelInterleavedDims","lercData","pixels"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/node_modules/geotiff/dist-module/compression/lerc.js"],"sourcesContent":["import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport { ZSTDDecoder } from 'zstddec';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\n\nexport const zstd = new ZSTDDecoder();\n\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      case LercAddCompression.Zstandard:\n        buffer = zstd.decode(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer, { returnPixelInterleavedDims: this.planarConfiguration === 1 });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n}\n"],"mappings":";;;;;;AAAA,SAASA,OAAO,QAAQ,MAAM;AAC9B,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,WAAW,QAAQ,SAAS;AACrC,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,SAASC,cAAc,EAAEC,kBAAkB,QAAQ,eAAe;AAElE,OAAO,MAAMC,IAAI,GAAG,IAAIJ,WAAW,CAAC,CAAC;AAErC,eAAe,MAAMK,WAAW,SAASJ,WAAW,CAAC;EACnDK,WAAWA,CAACC,aAAa,EAAE;IACzB,KAAK,CAAC,CAAC;IAEP,IAAI,CAACC,mBAAmB,GAAG,OAAOD,aAAa,CAACE,mBAAmB,KAAK,WAAW,GAAGF,aAAa,CAACE,mBAAmB,GAAG,CAAC;IAC3H,IAAI,CAACC,eAAe,GAAG,OAAOH,aAAa,CAACI,eAAe,KAAK,WAAW,GAAGJ,aAAa,CAACI,eAAe,GAAG,CAAC;IAE/G,IAAI,CAACC,cAAc,GAAGL,aAAa,CAACL,cAAc,CAACA,cAAc,CAACW,cAAc,CAAC;EACnF;EAEAC,WAAWA,CAACC,MAAM,EAAE;IAClB,QAAQ,IAAI,CAACH,cAAc;MACzB,KAAKT,kBAAkB,CAACa,IAAI;QAC1B;MACF,KAAKb,kBAAkB,CAACc,OAAO;QAC7BF,MAAM,GAAGjB,OAAO,CAAC,IAAIoB,UAAU,CAACH,MAAM,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC;QACjD;MACF,KAAKZ,kBAAkB,CAACgB,SAAS;QAC/BJ,MAAM,GAAGX,IAAI,CAACgB,MAAM,CAAC,IAAIF,UAAU,CAACH,MAAM,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC;QACrD;MACF;QACE,MAAM,IAAIM,KAAK,CAAE,8DAA6D,IAAI,CAACT,cAAe,EAAC,CAAC;IACxG;IAEA,MAAMU,UAAU,GAAGvB,IAAI,CAACqB,MAAM,CAACL,MAAM,EAAE;MAAEQ,0BAA0B,EAAE,IAAI,CAACf,mBAAmB,KAAK;IAAE,CAAC,CAAC;IACtG,MAAMgB,QAAQ,GAAGF,UAAU,CAACG,MAAM,CAAC,CAAC,CAAC;IACrC,OAAOD,QAAQ,CAACT,MAAM;EACxB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}