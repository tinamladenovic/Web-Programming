{"ast":null,"code":"import { getWidth } from '../../extent.js';\n\n/**\n * Compute world params\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n * @param {any} layer The layer\n * @return {Array<number>} The world start, end and width.\n */\nexport function getWorldParameters(frameState, layer) {\n  const projection = frameState.viewState.projection;\n  const vectorSource = layer.getSource();\n  const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n  const projectionExtent = projection.getExtent();\n  const extent = frameState.extent;\n  const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n  const endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n  const startWorld = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n  return [startWorld, endWorld, worldWidth];\n}","map":{"version":3,"names":["getWidth","getWorldParameters","frameState","layer","projection","viewState","vectorSource","getSource","multiWorld","getWrapX","canWrapX","projectionExtent","getExtent","extent","worldWidth","endWorld","Math","ceil","startWorld","floor"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/node_modules/ol/renderer/webgl/worldUtil.js"],"sourcesContent":["import {getWidth} from '../../extent.js';\n\n/**\n * Compute world params\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n * @param {any} layer The layer\n * @return {Array<number>} The world start, end and width.\n */\nexport function getWorldParameters(frameState, layer) {\n  const projection = frameState.viewState.projection;\n\n  const vectorSource = layer.getSource();\n  const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n  const projectionExtent = projection.getExtent();\n\n  const extent = frameState.extent;\n  const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n  const endWorld = multiWorld\n    ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n    : 1;\n\n  const startWorld = multiWorld\n    ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n    : 0;\n\n  return [startWorld, endWorld, worldWidth];\n}\n"],"mappings":"AAAA,SAAQA,QAAQ,QAAO,iBAAiB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,UAAU,EAAEC,KAAK,EAAE;EACpD,MAAMC,UAAU,GAAGF,UAAU,CAACG,SAAS,CAACD,UAAU;EAElD,MAAME,YAAY,GAAGH,KAAK,CAACI,SAAS,CAAC,CAAC;EACtC,MAAMC,UAAU,GAAGF,YAAY,CAACG,QAAQ,CAAC,CAAC,IAAIL,UAAU,CAACM,QAAQ,CAAC,CAAC;EACnE,MAAMC,gBAAgB,GAAGP,UAAU,CAACQ,SAAS,CAAC,CAAC;EAE/C,MAAMC,MAAM,GAAGX,UAAU,CAACW,MAAM;EAChC,MAAMC,UAAU,GAAGN,UAAU,GAAGR,QAAQ,CAACW,gBAAgB,CAAC,GAAG,IAAI;EACjE,MAAMI,QAAQ,GAAGP,UAAU,GACvBQ,IAAI,CAACC,IAAI,CAAC,CAACJ,MAAM,CAAC,CAAC,CAAC,GAAGF,gBAAgB,CAAC,CAAC,CAAC,IAAIG,UAAU,CAAC,GAAG,CAAC,GAC7D,CAAC;EAEL,MAAMI,UAAU,GAAGV,UAAU,GACzBQ,IAAI,CAACG,KAAK,CAAC,CAACN,MAAM,CAAC,CAAC,CAAC,GAAGF,gBAAgB,CAAC,CAAC,CAAC,IAAIG,UAAU,CAAC,GAC1D,CAAC;EAEL,OAAO,CAACI,UAAU,EAAEH,QAAQ,EAAED,UAAU,CAAC;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}