{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      currentUser: JSON.parse(localStorage.getItem('currentUser')) || null // Čuvanje trenutnog korisnika\n    };\n  },\n  computed: {\n    isLoggedIn() {\n      return !!this.currentUser; // Provera da li je korisnik ulogovan\n    },\n    isAdmin() {\n      return this.currentUser && this.currentUser.role === 'ADMIN'; // Provera da li je korisnik admin\n    },\n    isManager() {\n      return this.currentUser && this.currentUser.role === 'MANAGER'; // Provera da li je korisnik menadžer\n    },\n    isWorker() {\n      return this.currentUser && this.currentUser.role === 'WORKER'; // Provera da li je korisnik radnik\n    },\n    isCustomer() {\n      return this.currentUser && this.currentUser.role === 'CUSTOMER'; // Provera da li je korisnik kupac\n    }\n  },\n  methods: {\n    // Metoda za povlačenje trenutnog korisnika sa API-ja\n    async fetchCurrentUser() {\n      try {\n        const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/currentUser', {\n          withCredentials: true\n        });\n        if (response.data) {\n          this.currentUser = response.data; // Postavljanje trenutnog korisnika\n          localStorage.setItem('currentUser', JSON.stringify(this.currentUser)); // Čuvanje korisnika u localStorage\n        } else {\n          this.currentUser = null; // Resetuj korisnika ako nema podataka\n          localStorage.removeItem('currentUser');\n        }\n      } catch (error) {\n        this.currentUser = null; // Ako je došlo do greške, resetuj korisnika\n        localStorage.removeItem('currentUser');\n      }\n    },\n    handleLoggedOut() {\n      this.currentUser = null; // Resetovanje trenutnog korisnika\n      localStorage.removeItem('currentUser'); // Čišćenje localStorage\n    }\n  },\n  mounted() {\n    this.fetchCurrentUser();\n  }\n};","map":{"version":3,"names":["axios","data","currentUser","JSON","parse","localStorage","getItem","computed","isLoggedIn","isAdmin","role","isManager","isWorker","isCustomer","methods","fetchCurrentUser","response","get","withCredentials","setItem","stringify","removeItem","error","handleLoggedOut","mounted"],"sources":["C:\\Users\\PC\\eclipse-workspace\\apache-tomcat-9.0.89\\apache-tomcat-9.0.89\\webapps\\chocolate-factory-2\\Kostur\\Frontend\\front-app\\src\\views\\Logout.vue"],"sourcesContent":["<template>\r\n  <nav>\r\n    <router-link to=\"/\">Chocolate Factories</router-link> |\r\n\r\n    <!-- Link za Add Factory vidljiv samo adminima -->\r\n    <router-link v-if=\"isAdmin\" to=\"/addfactory\">Add Factory</router-link> |\r\n\r\n    <!-- Link za Users vidljiv samo adminima -->\r\n    <router-link v-if=\"isAdmin\" to=\"/users\">Users</router-link> |\r\n\r\n    <!-- Link za Manager Dashboard vidljiv samo menadžerima -->\r\n    <router-link v-if=\"isManager\" to=\"/managerview\">Manager Dashboard</router-link> |\r\n\r\n    <!-- Link za Worker Dashboard vidljiv samo radnicima -->\r\n    <router-link v-if=\"isWorker\" to=\"/workerview\">Worker Dashboard</router-link> |\r\n\r\n    <!-- Link za Customer Dashboard vidljiv samo kupcima -->\r\n    <router-link v-if=\"isCustomer\" to=\"/customerview\">Customer Dashboard</router-link> |\r\n\r\n    <!-- Linkovi za Register i Login vidljivi samo ako korisnik nije ulogovan -->\r\n    <router-link v-if=\"!isLoggedIn\" to=\"/register\">Register</router-link> |\r\n    <router-link v-if=\"!isLoggedIn\" to=\"/login\">Login</router-link> |\r\n\r\n    <!-- Linkovi za Logout i Profile vidljivi samo ako je korisnik ulogovan -->\r\n    <router-link v-if=\"isLoggedIn\" to=\"/logout\">Logout</router-link> |\r\n    <router-link v-if=\"isLoggedIn\" to=\"/profile\">Profile</router-link> |\r\n  </nav>\r\n  <router-view @loggedOut=\"handleLoggedOut\" />\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      currentUser: JSON.parse(localStorage.getItem('currentUser')) || null, // Čuvanje trenutnog korisnika\r\n    };\r\n  },\r\n  computed: {\r\n    isLoggedIn() {\r\n      return !!this.currentUser; // Provera da li je korisnik ulogovan\r\n    },\r\n    isAdmin() {\r\n      return this.currentUser && this.currentUser.role === 'ADMIN'; // Provera da li je korisnik admin\r\n    },\r\n    isManager() {\r\n      return this.currentUser && this.currentUser.role === 'MANAGER'; // Provera da li je korisnik menadžer\r\n    },\r\n    isWorker() {\r\n      return this.currentUser && this.currentUser.role === 'WORKER'; // Provera da li je korisnik radnik\r\n    },\r\n    isCustomer() {\r\n      return this.currentUser && this.currentUser.role === 'CUSTOMER'; // Provera da li je korisnik kupac\r\n    }\r\n  },\r\n  methods: {\r\n    // Metoda za povlačenje trenutnog korisnika sa API-ja\r\n    async fetchCurrentUser() {\r\n      try {\r\n        const response = await axios.get('http://localhost:8080/WebShopAppREST/rest/currentUser', {\r\n          withCredentials: true\r\n        });\r\n        if (response.data) {\r\n          this.currentUser = response.data; // Postavljanje trenutnog korisnika\r\n          localStorage.setItem('currentUser', JSON.stringify(this.currentUser)); // Čuvanje korisnika u localStorage\r\n        } else {\r\n          this.currentUser = null; // Resetuj korisnika ako nema podataka\r\n          localStorage.removeItem('currentUser');\r\n        }\r\n      } catch (error) {\r\n        this.currentUser = null; // Ako je došlo do greške, resetuj korisnika\r\n        localStorage.removeItem('currentUser');\r\n      }\r\n    },\r\n    handleLoggedOut() {\r\n      this.currentUser = null; // Resetovanje trenutnog korisnika\r\n      localStorage.removeItem('currentUser'); // Čišćenje localStorage\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchCurrentUser();\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n#app {\r\n  font-family: Avenir, Helvetica, Arial, sans-serif;\r\n  text-align: center;\r\n  color: #2c3e50;\r\n}\r\n\r\nnav {\r\n  padding: 30px;\r\n}\r\n\r\nnav a {\r\n  font-weight: bold;\r\n  color: #2c3e50;\r\n}\r\n\r\nnav a.router-link-exact-active {\r\n  color: #42b983;\r\n}\r\n</style>\r\n"],"mappings":"AA+BA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,KAAK,IAAI,CAAE;IACxE,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,UAAUA,CAAA,EAAG;MACX,OAAO,CAAC,CAAC,IAAI,CAACN,WAAW,EAAE;IAC7B,CAAC;IACDO,OAAOA,CAAA,EAAG;MACR,OAAO,IAAI,CAACP,WAAU,IAAK,IAAI,CAACA,WAAW,CAACQ,IAAG,KAAM,OAAO,EAAE;IAChE,CAAC;IACDC,SAASA,CAAA,EAAG;MACV,OAAO,IAAI,CAACT,WAAU,IAAK,IAAI,CAACA,WAAW,CAACQ,IAAG,KAAM,SAAS,EAAE;IAClE,CAAC;IACDE,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACV,WAAU,IAAK,IAAI,CAACA,WAAW,CAACQ,IAAG,KAAM,QAAQ,EAAE;IACjE,CAAC;IACDG,UAAUA,CAAA,EAAG;MACX,OAAO,IAAI,CAACX,WAAU,IAAK,IAAI,CAACA,WAAW,CAACQ,IAAG,KAAM,UAAU,EAAE;IACnE;EACF,CAAC;EACDI,OAAO,EAAE;IACP;IACA,MAAMC,gBAAgBA,CAAA,EAAG;MACvB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMhB,KAAK,CAACiB,GAAG,CAAC,uDAAuD,EAAE;UACxFC,eAAe,EAAE;QACnB,CAAC,CAAC;QACF,IAAIF,QAAQ,CAACf,IAAI,EAAE;UACjB,IAAI,CAACC,WAAU,GAAIc,QAAQ,CAACf,IAAI,EAAE;UAClCI,YAAY,CAACc,OAAO,CAAC,aAAa,EAAEhB,IAAI,CAACiB,SAAS,CAAC,IAAI,CAAClB,WAAW,CAAC,CAAC,EAAE;QACzE,OAAO;UACL,IAAI,CAACA,WAAU,GAAI,IAAI,EAAE;UACzBG,YAAY,CAACgB,UAAU,CAAC,aAAa,CAAC;QACxC;MACF,EAAE,OAAOC,KAAK,EAAE;QACd,IAAI,CAACpB,WAAU,GAAI,IAAI,EAAE;QACzBG,YAAY,CAACgB,UAAU,CAAC,aAAa,CAAC;MACxC;IACF,CAAC;IACDE,eAAeA,CAAA,EAAG;MAChB,IAAI,CAACrB,WAAU,GAAI,IAAI,EAAE;MACzBG,YAAY,CAACgB,UAAU,CAAC,aAAa,CAAC,EAAE;IAC1C;EACF,CAAC;EACDG,OAAOA,CAAA,EAAG;IACR,IAAI,CAACT,gBAAgB,CAAC,CAAC;EACzB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}