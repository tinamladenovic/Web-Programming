{"ast":null,"code":"/**\n * @module ol/source/Google\n */\n\nimport TileImage from './TileImage.js';\nimport ViewHint from '../ViewHint.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { getBottomLeft, getTopRight } from '../extent.js';\nimport { toLonLat } from '../proj.js';\nconst createSessionUrl = 'https://tile.googleapis.com/v1/createSession';\nconst tileUrl = 'https://tile.googleapis.com/v1/2dtiles';\nconst attributionUrl = 'https://tile.googleapis.com/tile/v1/viewport';\nconst maxZoom = 22;\n\n/**\n * @typedef {Object} Options\n * @property {string} key Google Map Tiles API key. Get yours at https://developers.google.com/maps/documentation/tile/get-api-key.\n * @property {string} [mapType='roadmap'] The type of [base map](https://developers.google.com/maps/documentation/tile/session_tokens#required_fields).\n * @property {string} [language='en-US'] An [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) for information displayed on the tiles.\n * @property {string} [region='US'] A [Common Locale Data Repository](https://cldr.unicode.org/) (CLDR) region identifier that represents the user location.\n * @property {string} [imageFormat] The image format used for the map tiles (e.g. `'jpeg'`, or `'png'`).\n * @property {string} [scale] Scale for map elements (`'scaleFactor1x'`, `'scaleFactor2x'`, or `'scaleFactor4x'`).\n * @property {boolean} [highDpi=false] Use high-resolution tiles.\n * @property {Array<string>} [layerTypes] The layer types added to the map (e.g. `'layerRoadmap'`, `'layerStreetview'`, or `'layerTraffic'`).\n * @property {boolean} [overlay=false] Display only the `layerTypes` and not the underlying `mapType` (only works if `layerTypes` is provided).\n * @property {Array<Object>} [styles] [Custom styles](https://developers.google.com/maps/documentation/tile/style-reference) applied to the map.\n * @property {boolean} [attributionsCollapsible=true] Allow the attributions to be collapsed.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @typedef {Object} SessionTokenRequest\n * @property {string} mapType The map type.\n * @property {string} language The language.\n * @property {string} region The region.\n * @property {string} [imageFormat] The image format.\n * @property {string} [scale] The scale.\n * @property {boolean} [highDpi] Use high resolution tiles.\n * @property {Array<string>} [layerTypes] The layer types.\n * @property {boolean} [overlay] The overlay.\n * @property {Array<Object>} [styles] The styles.\n */\n\n/**\n * @typedef {Object} SessionTokenResponse\n * @property {string} session The session token.\n * @property {string} expiry The session token expiry (seconds since the epoch as a string).\n * @property {number} tileWidth The tile width.\n * @property {number} tileHeight The tile height.\n * @property {string} imageFormat The image format.\n */\n\n/**\n * @classdesc\n * A tile layer source that renders tiles from the Google [Map Tiles API](https://developers.google.com/maps/documentation/tile/overview).\n * The constructor takes options that are passed to the request to create a session token.  Refer to the\n * [documentation](https://developers.google.com/maps/documentation/tile/session_tokens#required_fields)\n * for additional details.\n * @api\n */\nclass Google extends TileImage {\n  /**\n   * @param {Options} options Google Maps options.\n   */\n  constructor(options) {\n    const highDpi = !!options.highDpi;\n    const opaque = !(options.overlay === true);\n    super({\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      opaque: opaque,\n      projection: 'EPSG:3857',\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: highDpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    });\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.apiKey_ = options.key;\n\n    /**\n     * @type {Error|null}\n     */\n    this.error_ = null;\n\n    /**\n     * @type {SessionTokenRequest}\n     */\n    const sessionTokenRequest = {\n      mapType: options.mapType || 'roadmap',\n      language: options.language || 'en-US',\n      region: options.region || 'US'\n    };\n    if (options.imageFormat) {\n      sessionTokenRequest.imageFormat = options.imageFormat;\n    }\n    if (options.scale) {\n      sessionTokenRequest.scale = options.scale;\n    }\n    if (highDpi) {\n      sessionTokenRequest.highDpi = true;\n    }\n    if (options.layerTypes) {\n      sessionTokenRequest.layerTypes = options.layerTypes;\n    }\n    if (options.styles) {\n      sessionTokenRequest.styles = options.styles;\n    }\n    if (options.overlay === true) {\n      sessionTokenRequest.overlay = true;\n    }\n\n    /**\n     * @type {SessionTokenRequest}\n     * @private\n     */\n    this.sessionTokenRequest_ = sessionTokenRequest;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.sessionTokenValue_;\n\n    /**\n     * @type {ReturnType<typeof setTimeout>}\n     * @private\n     */\n    this.sessionRefreshId_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.previousViewportAttribution_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.previousViewportExtent_;\n    this.createSession_();\n  }\n\n  /**\n   * @return {Error|null} A source loading error. When the source state is `error`, use this function\n   * to get more information about the error. To debug a faulty configuration, you may want to use\n   * a listener like\n   * ```js\n   * source.on('change', () => {\n   *   if (source.getState() === 'error') {\n   *     console.error(source.getError());\n   *   }\n   * });\n   * ```\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Exposed here so it can be overridden in the tests.\n   * @param {string} url The URL.\n   * @param {RequestInit} config The config.\n   * @return {Promise<Response>} A promise that resolves with the response.\n   */\n  fetchSessionToken(url, config) {\n    return fetch(url, config);\n  }\n\n  /**\n   * Get or renew a session token for use with tile requests.\n   * @private\n   */\n  async createSession_() {\n    const url = createSessionUrl + '?key=' + this.apiKey_;\n    const config = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.sessionTokenRequest_)\n    };\n    const response = await this.fetchSessionToken(url, config);\n    if (!response.ok) {\n      try {\n        const body = await response.json();\n        this.error_ = new Error(body.error.message);\n      } catch {\n        this.error_ = new Error('Error fetching session token');\n      }\n      this.setState('error');\n      return;\n    }\n\n    /**\n     * @type {SessionTokenResponse}\n     */\n    const sessionTokenResponse = await response.json();\n    const tilePixelRatio = this.getTilePixelRatio(1);\n    const tileSize = [sessionTokenResponse.tileWidth / tilePixelRatio, sessionTokenResponse.tileHeight / tilePixelRatio];\n    this.tileGrid = createXYZ({\n      extent: extentFromProjection(this.getProjection()),\n      maxZoom: maxZoom,\n      tileSize: tileSize\n    });\n    const session = sessionTokenResponse.session;\n    this.sessionTokenValue_ = session;\n    const key = this.apiKey_;\n    this.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      const z = tileCoord[0];\n      const x = tileCoord[1];\n      const y = tileCoord[2];\n      const url = `${tileUrl}/${z}/${x}/${y}?session=${session}&key=${key}`;\n      return url;\n    };\n    const expiry = parseInt(sessionTokenResponse.expiry, 10) * 1000;\n    const timeout = Math.max(expiry - Date.now() - 60 * 1000, 1);\n    this.sessionRefreshId_ = setTimeout(() => this.createSession_(), timeout);\n    this.setAttributions(this.fetchAttributions_.bind(this));\n    // even if the state is already ready, we want the change event\n    this.setState('ready');\n  }\n\n  /**\n   * @param {import('../Map.js').FrameState} frameState The frame state.\n   * @return {Promise<string>} The attributions.\n   * @private\n   */\n  async fetchAttributions_(frameState) {\n    if (frameState.viewHints[ViewHint.ANIMATING] || frameState.viewHints[ViewHint.INTERACTING] || frameState.animate) {\n      return this.previousViewportAttribution_;\n    }\n    const [west, south] = toLonLat(getBottomLeft(frameState.extent), frameState.viewState.projection);\n    const [east, north] = toLonLat(getTopRight(frameState.extent), frameState.viewState.projection);\n    const tileGrid = this.getTileGrid();\n    const zoom = tileGrid.getZForResolution(frameState.viewState.resolution, this.zDirection);\n    const viewportExtent = `zoom=${zoom}&north=${north}&south=${south}&east=${east}&west=${west}`;\n    // check if the extent or zoom has actually changed to avoid unnecessary requests\n    if (this.previousViewportExtent_ == viewportExtent) {\n      return this.previousViewportAttribution_;\n    }\n    this.previousViewportExtent_ = viewportExtent;\n    const session = this.sessionTokenValue_;\n    const key = this.apiKey_;\n    const url = `${attributionUrl}?session=${session}&key=${key}&${viewportExtent}`;\n    this.previousViewportAttribution_ = await fetch(url).then(response => response.json()).then(json => json.copyright);\n    return this.previousViewportAttribution_;\n  }\n  disposeInternal() {\n    clearTimeout(this.sessionRefreshId_);\n    super.disposeInternal();\n  }\n}\nexport default Google;","map":{"version":3,"names":["TileImage","ViewHint","createXYZ","extentFromProjection","getBottomLeft","getTopRight","toLonLat","createSessionUrl","tileUrl","attributionUrl","maxZoom","Google","constructor","options","highDpi","opaque","overlay","attributionsCollapsible","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","state","tileLoadFunction","tilePixelRatio","wrapX","undefined","transition","zDirection","apiKey_","key","error_","sessionTokenRequest","mapType","language","region","imageFormat","scale","layerTypes","styles","sessionTokenRequest_","sessionTokenValue_","sessionRefreshId_","previousViewportAttribution_","previousViewportExtent_","createSession_","getError","fetchSessionToken","url","config","fetch","method","headers","body","JSON","stringify","response","ok","json","Error","error","message","setState","sessionTokenResponse","getTilePixelRatio","tileSize","tileWidth","tileHeight","tileGrid","extent","getProjection","session","tileUrlFunction","tileCoord","pixelRatio","z","x","y","expiry","parseInt","timeout","Math","max","Date","now","setTimeout","setAttributions","fetchAttributions_","bind","frameState","viewHints","ANIMATING","INTERACTING","animate","west","south","viewState","east","north","getTileGrid","zoom","getZForResolution","resolution","viewportExtent","then","copyright","disposeInternal","clearTimeout"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/node_modules/ol/source/Google.js"],"sourcesContent":["/**\n * @module ol/source/Google\n */\n\nimport TileImage from './TileImage.js';\nimport ViewHint from '../ViewHint.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {getBottomLeft, getTopRight} from '../extent.js';\nimport {toLonLat} from '../proj.js';\n\nconst createSessionUrl = 'https://tile.googleapis.com/v1/createSession';\nconst tileUrl = 'https://tile.googleapis.com/v1/2dtiles';\nconst attributionUrl = 'https://tile.googleapis.com/tile/v1/viewport';\nconst maxZoom = 22;\n\n/**\n * @typedef {Object} Options\n * @property {string} key Google Map Tiles API key. Get yours at https://developers.google.com/maps/documentation/tile/get-api-key.\n * @property {string} [mapType='roadmap'] The type of [base map](https://developers.google.com/maps/documentation/tile/session_tokens#required_fields).\n * @property {string} [language='en-US'] An [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) for information displayed on the tiles.\n * @property {string} [region='US'] A [Common Locale Data Repository](https://cldr.unicode.org/) (CLDR) region identifier that represents the user location.\n * @property {string} [imageFormat] The image format used for the map tiles (e.g. `'jpeg'`, or `'png'`).\n * @property {string} [scale] Scale for map elements (`'scaleFactor1x'`, `'scaleFactor2x'`, or `'scaleFactor4x'`).\n * @property {boolean} [highDpi=false] Use high-resolution tiles.\n * @property {Array<string>} [layerTypes] The layer types added to the map (e.g. `'layerRoadmap'`, `'layerStreetview'`, or `'layerTraffic'`).\n * @property {boolean} [overlay=false] Display only the `layerTypes` and not the underlying `mapType` (only works if `layerTypes` is provided).\n * @property {Array<Object>} [styles] [Custom styles](https://developers.google.com/maps/documentation/tile/style-reference) applied to the map.\n * @property {boolean} [attributionsCollapsible=true] Allow the attributions to be collapsed.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @typedef {Object} SessionTokenRequest\n * @property {string} mapType The map type.\n * @property {string} language The language.\n * @property {string} region The region.\n * @property {string} [imageFormat] The image format.\n * @property {string} [scale] The scale.\n * @property {boolean} [highDpi] Use high resolution tiles.\n * @property {Array<string>} [layerTypes] The layer types.\n * @property {boolean} [overlay] The overlay.\n * @property {Array<Object>} [styles] The styles.\n */\n\n/**\n * @typedef {Object} SessionTokenResponse\n * @property {string} session The session token.\n * @property {string} expiry The session token expiry (seconds since the epoch as a string).\n * @property {number} tileWidth The tile width.\n * @property {number} tileHeight The tile height.\n * @property {string} imageFormat The image format.\n */\n\n/**\n * @classdesc\n * A tile layer source that renders tiles from the Google [Map Tiles API](https://developers.google.com/maps/documentation/tile/overview).\n * The constructor takes options that are passed to the request to create a session token.  Refer to the\n * [documentation](https://developers.google.com/maps/documentation/tile/session_tokens#required_fields)\n * for additional details.\n * @api\n */\nclass Google extends TileImage {\n  /**\n   * @param {Options} options Google Maps options.\n   */\n  constructor(options) {\n    const highDpi = !!options.highDpi;\n    const opaque = !(options.overlay === true);\n\n    super({\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      opaque: opaque,\n      projection: 'EPSG:3857',\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: highDpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.apiKey_ = options.key;\n\n    /**\n     * @type {Error|null}\n     */\n    this.error_ = null;\n\n    /**\n     * @type {SessionTokenRequest}\n     */\n    const sessionTokenRequest = {\n      mapType: options.mapType || 'roadmap',\n      language: options.language || 'en-US',\n      region: options.region || 'US',\n    };\n    if (options.imageFormat) {\n      sessionTokenRequest.imageFormat = options.imageFormat;\n    }\n    if (options.scale) {\n      sessionTokenRequest.scale = options.scale;\n    }\n    if (highDpi) {\n      sessionTokenRequest.highDpi = true;\n    }\n    if (options.layerTypes) {\n      sessionTokenRequest.layerTypes = options.layerTypes;\n    }\n    if (options.styles) {\n      sessionTokenRequest.styles = options.styles;\n    }\n    if (options.overlay === true) {\n      sessionTokenRequest.overlay = true;\n    }\n\n    /**\n     * @type {SessionTokenRequest}\n     * @private\n     */\n    this.sessionTokenRequest_ = sessionTokenRequest;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.sessionTokenValue_;\n\n    /**\n     * @type {ReturnType<typeof setTimeout>}\n     * @private\n     */\n    this.sessionRefreshId_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.previousViewportAttribution_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.previousViewportExtent_;\n\n    this.createSession_();\n  }\n\n  /**\n   * @return {Error|null} A source loading error. When the source state is `error`, use this function\n   * to get more information about the error. To debug a faulty configuration, you may want to use\n   * a listener like\n   * ```js\n   * source.on('change', () => {\n   *   if (source.getState() === 'error') {\n   *     console.error(source.getError());\n   *   }\n   * });\n   * ```\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Exposed here so it can be overridden in the tests.\n   * @param {string} url The URL.\n   * @param {RequestInit} config The config.\n   * @return {Promise<Response>} A promise that resolves with the response.\n   */\n  fetchSessionToken(url, config) {\n    return fetch(url, config);\n  }\n\n  /**\n   * Get or renew a session token for use with tile requests.\n   * @private\n   */\n  async createSession_() {\n    const url = createSessionUrl + '?key=' + this.apiKey_;\n    const config = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.sessionTokenRequest_),\n    };\n\n    const response = await this.fetchSessionToken(url, config);\n    if (!response.ok) {\n      try {\n        const body = await response.json();\n        this.error_ = new Error(body.error.message);\n      } catch {\n        this.error_ = new Error('Error fetching session token');\n      }\n      this.setState('error');\n      return;\n    }\n\n    /**\n     * @type {SessionTokenResponse}\n     */\n    const sessionTokenResponse = await response.json();\n\n    const tilePixelRatio = this.getTilePixelRatio(1);\n    const tileSize = [\n      sessionTokenResponse.tileWidth / tilePixelRatio,\n      sessionTokenResponse.tileHeight / tilePixelRatio,\n    ];\n\n    this.tileGrid = createXYZ({\n      extent: extentFromProjection(this.getProjection()),\n      maxZoom: maxZoom,\n      tileSize: tileSize,\n    });\n\n    const session = sessionTokenResponse.session;\n    this.sessionTokenValue_ = session;\n    const key = this.apiKey_;\n    this.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      const z = tileCoord[0];\n      const x = tileCoord[1];\n      const y = tileCoord[2];\n      const url = `${tileUrl}/${z}/${x}/${y}?session=${session}&key=${key}`;\n      return url;\n    };\n\n    const expiry = parseInt(sessionTokenResponse.expiry, 10) * 1000;\n    const timeout = Math.max(expiry - Date.now() - 60 * 1000, 1);\n    this.sessionRefreshId_ = setTimeout(() => this.createSession_(), timeout);\n\n    this.setAttributions(this.fetchAttributions_.bind(this));\n    // even if the state is already ready, we want the change event\n    this.setState('ready');\n  }\n\n  /**\n   * @param {import('../Map.js').FrameState} frameState The frame state.\n   * @return {Promise<string>} The attributions.\n   * @private\n   */\n  async fetchAttributions_(frameState) {\n    if (\n      frameState.viewHints[ViewHint.ANIMATING] ||\n      frameState.viewHints[ViewHint.INTERACTING] ||\n      frameState.animate\n    ) {\n      return this.previousViewportAttribution_;\n    }\n    const [west, south] = toLonLat(\n      getBottomLeft(frameState.extent),\n      frameState.viewState.projection,\n    );\n    const [east, north] = toLonLat(\n      getTopRight(frameState.extent),\n      frameState.viewState.projection,\n    );\n    const tileGrid = this.getTileGrid();\n    const zoom = tileGrid.getZForResolution(\n      frameState.viewState.resolution,\n      this.zDirection,\n    );\n    const viewportExtent = `zoom=${zoom}&north=${north}&south=${south}&east=${east}&west=${west}`;\n    // check if the extent or zoom has actually changed to avoid unnecessary requests\n    if (this.previousViewportExtent_ == viewportExtent) {\n      return this.previousViewportAttribution_;\n    }\n    this.previousViewportExtent_ = viewportExtent;\n    const session = this.sessionTokenValue_;\n    const key = this.apiKey_;\n    const url = `${attributionUrl}?session=${session}&key=${key}&${viewportExtent}`;\n    this.previousViewportAttribution_ = await fetch(url)\n      .then((response) => response.json())\n      .then((json) => json.copyright);\n\n    return this.previousViewportAttribution_;\n  }\n\n  disposeInternal() {\n    clearTimeout(this.sessionRefreshId_);\n    super.disposeInternal();\n  }\n}\n\nexport default Google;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}