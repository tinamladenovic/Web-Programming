{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      username: '',\n      password: '',\n      confirmPassword: '',\n      firstName: '',\n      lastName: '',\n      gender: '',\n      birthDate: '',\n      errorMessage: ''\n    };\n  },\n  methods: {\n    async handleRegister() {\n      if (this.password !== this.confirmPassword) {\n        this.errorMessage = 'Passwords do not match';\n        return;\n      }\n      try {\n        const response = await fetch('http://localhost:8080/WebShopAppREST/rest/register', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: this.username,\n            password: this.password,\n            firstName: this.firstName,\n            lastName: this.lastName,\n            gender: this.gender,\n            birthDate: this.birthDate,\n            role: 'CUSTOMER'\n          })\n        });\n        if (response.ok) {\n          // Handle successful registration\n          console.log('Registration successful');\n          // Reset form fields\n          this.username = '';\n          this.password = '';\n          this.confirmPassword = '';\n          this.firstName = '';\n          this.lastName = '';\n          this.gender = '';\n          this.birthDate = '';\n          this.errorMessage = '';\n          // Redirect to login page or set user state\n          this.$router.push('/login');\n        } else {\n          // Handle errors\n          this.errorMessage = (await response.text()) || 'Registration failed';\n        }\n      } catch (error) {\n        console.error('Error registering:', error);\n        this.errorMessage = 'An error occurred. Please try again.';\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","username","password","confirmPassword","firstName","lastName","gender","birthDate","errorMessage","methods","handleRegister","response","fetch","method","headers","body","JSON","stringify","role","ok","console","log","$router","push","text","error"],"sources":["C:\\Users\\PC\\eclipse-workspace\\apache-tomcat-9.0.89\\apache-tomcat-9.0.89\\webapps\\chocolate-factory-2\\Kostur\\Frontend\\front-app\\src\\views\\Register.vue"],"sourcesContent":["<template>\r\n  <div class=\"d-flex justify-content-center align-items-center vh-75\">\r\n    <div class=\"card p-5 shadow-lg\" style=\"width: 100%; max-width: 500px; margin-top: -50px;\">\r\n    \r\n      <form @submit.prevent=\"handleRegister\">\r\n        <div class=\"row mb-3\">\r\n          <label for=\"username\" class=\"col-sm-3 col-form-label text-start\">Username:</label>\r\n          <div class=\"col-sm-9\">\r\n            <input type=\"text\" id=\"username\" v-model=\"username\" class=\"form-control\" required autocomplete=\"username\">\r\n          </div>\r\n        </div>\r\n        <div class=\"row mb-3\">\r\n          <label for=\"password\" class=\"col-sm-3 col-form-label text-start\">Password:</label>\r\n          <div class=\"col-sm-9\">\r\n            <input type=\"password\" id=\"password\" v-model=\"password\" class=\"form-control\" required autocomplete=\"new-password\">\r\n          </div>\r\n        </div>\r\n        <div class=\"row mb-3\">\r\n          <label for=\"confirmPassword\" class=\"col-sm-3 col-form-label text-start\">Confirm Password:</label>\r\n          <div class=\"col-sm-9\">\r\n            <input type=\"password\" id=\"confirmPassword\" v-model=\"confirmPassword\" class=\"form-control\" required autocomplete=\"new-password\">\r\n          </div>\r\n        </div>\r\n        <div class=\"row mb-3\">\r\n          <label for=\"firstName\" class=\"col-sm-3 col-form-label text-start\">First Name:</label>\r\n          <div class=\"col-sm-9\">\r\n            <input type=\"text\" id=\"firstName\" v-model=\"firstName\" class=\"form-control\" required autocomplete=\"given-name\">\r\n          </div>\r\n        </div>\r\n        <div class=\"row mb-3\">\r\n          <label for=\"lastName\" class=\"col-sm-3 col-form-label text-start\">Last Name:</label>\r\n          <div class=\"col-sm-9\">\r\n            <input type=\"text\" id=\"lastName\" v-model=\"lastName\" class=\"form-control\" required autocomplete=\"family-name\">\r\n          </div>\r\n        </div>\r\n        <div class=\"row mb-3\">\r\n          <label for=\"gender\" class=\"col-sm-3 col-form-label text-start\">Gender:</label>\r\n          <div class=\"col-sm-9\">\r\n            <select id=\"gender\" v-model=\"gender\" class=\"form-control\" required autocomplete=\"sex\">\r\n              <option value=\"\">Select Gender</option>\r\n              <option value=\"MALE\">MALE</option>\r\n              <option value=\"FEMALE\">FEMALE</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class=\"row mb-3\">\r\n          <label for=\"birthDate\" class=\"col-sm-3 col-form-label text-start\">Date of Birth:</label>\r\n          <div class=\"col-sm-9\">\r\n            <input type=\"date\" id=\"birthDate\" v-model=\"birthDate\" class=\"form-control\" required autocomplete=\"bday\">\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-12\">\r\n            <button type=\"submit\" class=\"btn btn-primary w-100\">Register</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <p v-if=\"errorMessage\" class=\"text-danger text-center mt-3\">{{ errorMessage }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      gender: '',\r\n      birthDate: '',\r\n      errorMessage: ''\r\n    };\r\n  },\r\n  methods: {\r\n    async handleRegister() {\r\n      if (this.password !== this.confirmPassword) {\r\n        this.errorMessage = 'Passwords do not match';\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:8080/WebShopAppREST/rest/register', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            username: this.username,\r\n            password: this.password,\r\n            firstName: this.firstName,\r\n            lastName: this.lastName,\r\n            gender: this.gender,\r\n            birthDate: this.birthDate,\r\n            role: 'CUSTOMER'\r\n          })\r\n        });\r\n\r\n        if (response.ok) {\r\n          // Handle successful registration\r\n          console.log('Registration successful');\r\n          // Reset form fields\r\n          this.username = '';\r\n          this.password = '';\r\n          this.confirmPassword = '';\r\n          this.firstName = '';\r\n          this.lastName = '';\r\n          this.gender = '';\r\n          this.birthDate = '';\r\n          this.errorMessage = '';\r\n          // Redirect to login page or set user state\r\n          this.$router.push('/login');\r\n        } else {\r\n          // Handle errors\r\n          this.errorMessage = await response.text() || 'Registration failed';\r\n        }\r\n      } catch (error) {\r\n        console.error('Error registering:', error);\r\n        this.errorMessage = 'An error occurred. Please try again.';\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.d-flex {\r\n  min-height: 75vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.card {\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  padding: 30px;\r\n  background-color: #f0f8ff;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh2 {\r\n  color: #007bff;\r\n  text-align: center;\r\n  font-size: 2rem;\r\n  font-weight: normal;\r\n}\r\n\r\n.form-label {\r\n  font-weight: normal;\r\n}\r\n\r\ninput[type=\"text\"],\r\ninput[type=\"password\"],\r\ninput[type=\"date\"],\r\nselect,\r\nbutton {\r\n  border: 1px solid #007bff;\r\n  border-radius: 8px;\r\n  font-size: 1.1rem;\r\n  transition: border-color 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\ninput[type=\"text\"]:focus,\r\ninput[type=\"password\"]:focus,\r\ninput[type=\"date\"]:focus,\r\nselect:focus {\r\n  border-color: #007bff;\r\n  box-shadow: 0 0 5px rgba(0, 123, 255, 0.25);\r\n}\r\n\r\nbutton {\r\n  border: 1px solid #007bff;\r\n  background-color: transparent;\r\n  color: #007bff;\r\n  font-size: 1.1rem;\r\n  border-radius: 8px;\r\n  transition: background-color 0.3s ease, color 0.3s ease;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n\r\nbutton[type=\"submit\"] {\r\n  margin-top: 20px;\r\n}\r\n\r\n.text-danger {\r\n  margin-top: 15px;\r\n}\r\n</style>\r\n"],"mappings":";AA+DA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,EAAE;MACnBC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,EAAE;MACVC,SAAS,EAAE,EAAE;MACbC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,cAAcA,CAAA,EAAG;MACrB,IAAI,IAAI,CAACR,QAAO,KAAM,IAAI,CAACC,eAAe,EAAE;QAC1C,IAAI,CAACK,YAAW,GAAI,wBAAwB;QAC5C;MACF;MAEA,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMC,KAAK,CAAC,oDAAoD,EAAE;UACjFC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBhB,QAAQ,EAAE,IAAI,CAACA,QAAQ;YACvBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;YACvBE,SAAS,EAAE,IAAI,CAACA,SAAS;YACzBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;YACvBC,MAAM,EAAE,IAAI,CAACA,MAAM;YACnBC,SAAS,EAAE,IAAI,CAACA,SAAS;YACzBW,IAAI,EAAE;UACR,CAAC;QACH,CAAC,CAAC;QAEF,IAAIP,QAAQ,CAACQ,EAAE,EAAE;UACf;UACAC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;UACtC;UACA,IAAI,CAACpB,QAAO,GAAI,EAAE;UAClB,IAAI,CAACC,QAAO,GAAI,EAAE;UAClB,IAAI,CAACC,eAAc,GAAI,EAAE;UACzB,IAAI,CAACC,SAAQ,GAAI,EAAE;UACnB,IAAI,CAACC,QAAO,GAAI,EAAE;UAClB,IAAI,CAACC,MAAK,GAAI,EAAE;UAChB,IAAI,CAACC,SAAQ,GAAI,EAAE;UACnB,IAAI,CAACC,YAAW,GAAI,EAAE;UACtB;UACA,IAAI,CAACc,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;QAC7B,OAAO;UACL;UACA,IAAI,CAACf,YAAW,GAAI,OAAMG,QAAQ,CAACa,IAAI,CAAC,MAAK,qBAAqB;QACpE;MACF,EAAE,OAAOC,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1C,IAAI,CAACjB,YAAW,GAAI,sCAAsC;MAC5D;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}