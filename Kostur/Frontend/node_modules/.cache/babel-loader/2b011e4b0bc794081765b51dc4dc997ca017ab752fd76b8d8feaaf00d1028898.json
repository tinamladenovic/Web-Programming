{"ast":null,"code":"import axios from 'axios';\nimport { Map, View } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport { fromLonLat } from 'ol/proj';\nimport VectorLayer from 'ol/layer/Vector';\nimport { Vector as VectorSource } from 'ol/source';\nimport { Icon, Style } from 'ol/style';\nexport default {\n  props: {\n    id: String\n  },\n  data() {\n    return {\n      factory: null,\n      chocolates: []\n    };\n  },\n  methods: {\n    loadFactory() {\n      axios.get(`http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects/${this.id}`).then(response => {\n        this.factory = response.data;\n        console.log('Podaci o fabrici:', this.factory);\n        this.loadChocolates();\n        this.$nextTick(this.initializeMap); // Inicijalizujte mapu nakon učitavanja podataka o fabrici i renderovanja DOM-a\n      }).catch(error => {\n        console.error(\"Greška pri učitavanju fabrike:\", error);\n      });\n    },\n    loadChocolates() {\n      if (this.factory) {\n        axios.get(`http://localhost:8080/WebShopAppREST/rest/chocolates`).then(response => {\n          this.chocolates = response.data.filter(chocolate => chocolate.chocolateFactoryObject.id === this.factory.id);\n          console.log('Podaci o čokoladama:', this.chocolates);\n        }).catch(error => {\n          console.error(\"Greška pri učitavanju čokolada:\", error);\n        });\n      }\n    },\n    getFactoryLogo(logoFileName) {\n      return `/images/${logoFileName}`;\n    },\n    initializeMap() {\n      if (this.factory) {\n        const coordinates = fromLonLat([this.factory.location.longitude, this.factory.location.latitude]);\n        const map = new Map({\n          target: 'factory-map',\n          layers: [new TileLayer({\n            source: new OSM()\n          }), new VectorLayer({\n            source: new VectorSource({\n              features: [new Feature({\n                geometry: new Point(coordinates)\n              })]\n            }),\n            style: new Style({\n              image: new Icon({\n                src: '/images/map-marker.png',\n                imgSize: [32, 32],\n                anchor: [0.5, 1]\n              })\n            })\n          })],\n          view: new View({\n            center: coordinates,\n            zoom: 15\n          })\n        });\n      }\n    }\n  },\n  mounted() {\n    this.loadFactory();\n  }\n};","map":{"version":3,"names":["axios","Map","View","TileLayer","OSM","Feature","Point","fromLonLat","VectorLayer","Vector","VectorSource","Icon","Style","props","id","String","data","factory","chocolates","methods","loadFactory","get","then","response","console","log","loadChocolates","$nextTick","initializeMap","catch","error","filter","chocolate","chocolateFactoryObject","getFactoryLogo","logoFileName","coordinates","location","longitude","latitude","map","target","layers","source","features","geometry","style","image","src","imgSize","anchor","view","center","zoom","mounted"],"sources":["C:\\Users\\PC\\eclipse-workspace\\apache-tomcat-9.0.89\\apache-tomcat-9.0.89\\webapps\\chocolate-factory-2\\Kostur\\Frontend\\front-app\\src\\views\\FactoryProfile.vue"],"sourcesContent":["<template>\r\n  <div class=\"factory-profile\" v-if=\"factory\">\r\n    <div class=\"factory-info\">\r\n      <img :src=\"getFactoryLogo(factory.logo)\" alt=\"Logo\" class=\"factory-logo\" />\r\n      <h2>{{ factory.name }}</h2>\r\n      <form>\r\n        <div class=\"form-group\">\r\n          <label for=\"openingTime\">Radno vreme:</label>\r\n          <input type=\"text\" id=\"openingTime\" v-model=\"factory.openingTime\" readonly>\r\n          <span> - </span>\r\n          <input type=\"text\" v-model=\"factory.closingTime\" readonly>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"status\">Status:</label>\r\n          <input type=\"text\" id=\"status\" v-model=\"factory.status\" readonly>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"location\">Lokacija:</label>\r\n          <input type=\"text\" id=\"location\" v-model=\"factory.location.address\" readonly>\r\n        </div>\r\n        <div id=\"factory-map\" class=\"map-container\"></div>\r\n        <div class=\"form-group\" v-if=\"factory.rating !== undefined\">\r\n          <label for=\"rating\">Ocena:</label>\r\n          <input type=\"text\" id=\"rating\" v-model=\"factory.rating\" readonly>\r\n        </div>\r\n      </form>\r\n    </div>\r\n\r\n    <div class=\"factory-chocolates\">\r\n      <h3>Čokolade koje fabrika nudi:</h3>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Naziv</th>\r\n            <th>Cena</th>\r\n            <th>Tip</th>\r\n            <th>Vrsta</th>\r\n            <th>Težina</th>\r\n            <th>Opis</th>\r\n            <th>Status</th>\r\n            <th>Količina</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"chocolate in chocolates\" :key=\"chocolate.id\" class=\"chocolate-item\">\r\n            <td>{{ chocolate.name }}</td>\r\n            <td>{{ chocolate.price }}</td>\r\n            <td>{{ chocolate.type }}</td>\r\n            <td>{{ chocolate.kind }}</td>\r\n            <td>{{ chocolate.weight }}g</td>\r\n            <td>{{ chocolate.description }}</td>\r\n            <td>{{ chocolate.status }}</td>\r\n            <td>{{ chocolate.quantity }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n    <div class=\"factory-comments\">\r\n      <h3>Komentari:</h3>\r\n      <ul v-if=\"factory.comments && factory.comments.length\">\r\n        <li v-for=\"comment in factory.comments\" :key=\"comment.id\" class=\"comment-item\">\r\n          <div class=\"comment-header\">\r\n            <strong>Korisnik:</strong> {{ comment.user }}\r\n          </div>\r\n          <div class=\"comment-text\">\r\n            <p>{{ comment.text }}</p>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n      <p v-else>Nema dostupnih komentara.</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { Map, View } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport OSM from 'ol/source/OSM';\r\nimport Feature from 'ol/Feature';\r\nimport Point from 'ol/geom/Point';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport { Vector as VectorSource } from 'ol/source';\r\nimport { Icon, Style } from 'ol/style';\r\n\r\nexport default {\r\n  props: {\r\n    id: String,\r\n  },\r\n  data() {\r\n    return {\r\n      factory: null,\r\n      chocolates: [],\r\n    };\r\n  },\r\n  methods: {\r\n    loadFactory() {\r\n      axios.get(`http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects/${this.id}`)\r\n        .then(response => {\r\n          this.factory = response.data;\r\n          console.log('Podaci o fabrici:', this.factory);\r\n          this.loadChocolates();\r\n          this.$nextTick(this.initializeMap); // Inicijalizujte mapu nakon učitavanja podataka o fabrici i renderovanja DOM-a\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Greška pri učitavanju fabrike:\", error);\r\n        });\r\n    },\r\n    loadChocolates() {\r\n      if (this.factory) {\r\n        axios.get(`http://localhost:8080/WebShopAppREST/rest/chocolates`)\r\n          .then(response => {\r\n            this.chocolates = response.data.filter(chocolate => chocolate.chocolateFactoryObject.id === this.factory.id);\r\n            console.log('Podaci o čokoladama:', this.chocolates);\r\n          })\r\n          .catch(error => {\r\n            console.error(\"Greška pri učitavanju čokolada:\", error);\r\n          });\r\n      }\r\n    },\r\n    getFactoryLogo(logoFileName) {\r\n      return `/images/${logoFileName}`;\r\n    },\r\n    initializeMap() {\r\n      if (this.factory) {\r\n        const coordinates = fromLonLat([this.factory.location.longitude, this.factory.location.latitude]);\r\n        const map = new Map({\r\n          target: 'factory-map',\r\n          layers: [\r\n            new TileLayer({\r\n              source: new OSM()\r\n            }),\r\n            new VectorLayer({\r\n              source: new VectorSource({\r\n                features: [\r\n                  new Feature({\r\n                    geometry: new Point(coordinates)\r\n                  })\r\n                ]\r\n              }),\r\n              style: new Style({\r\n                image: new Icon({\r\n                  src: '/images/map-marker.png',\r\n                  imgSize: [32, 32],\r\n                  anchor: [0.5, 1]\r\n                })\r\n              })\r\n            })\r\n          ],\r\n          view: new View({\r\n            center: coordinates,\r\n            zoom: 15\r\n          })\r\n        });\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.loadFactory();\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n<style scoped>\r\n.factory-profile {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n  gap: 20px;\r\n  padding: 20px;\r\n  justify-content: center;\r\n}\r\n\r\n.factory-info {\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  max-width: 400px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  text-align: center; /* Dodajte centriranje teksta */\r\n}\r\n\r\n.factory-info form {\r\n  display: grid;\r\n  gap: 10px;\r\n}\r\n\r\n.factory-info label {\r\n  font-weight: bold;\r\n}\r\n\r\n.factory-info input,\r\n.factory-info img {\r\n  width: 100%;\r\n}\r\n\r\n.factory-chocolates table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.factory-chocolates th,\r\n.factory-chocolates td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\n.factory-chocolates th {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\n.map-container {\r\n  width: 100%;\r\n  height: 300px; /* Prilagodite visinu po potrebi */\r\n  margin-top: 20px; /* Dodajte margine po potrebi */\r\n}\r\n\r\n.factory-logo {\r\n  max-width: 300px;\r\n  height: 100px;\r\n  margin-bottom: 10px; /* Dodajte marginu ispod loga */\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}