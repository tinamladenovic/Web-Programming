{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport axios from 'axios';\nimport { useRouter } from 'vue-router';\nexport default {\n  __name: 'AddFactory',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const factory = ref({\n      name: '',\n      location: '',\n      openingTime: '',\n      closingTime: '',\n      logoName: ''\n    });\n    const selectedLocation = ref({\n      address: '',\n      latitude: null,\n      longitude: null\n    });\n\n    // Function to handle factory submission\n    const submitFactory = async () => {\n      try {\n        // Example endpoint for handling factory creation\n        const endpoint = 'http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects';\n\n        // Prepare factory data\n        const factoryData = {\n          name: factory.value.name,\n          location: selectedLocation.value.address,\n          // Just pass address here\n          openingTime: factory.value.openingTime,\n          closingTime: factory.value.closingTime,\n          logoName: factory.value.logoName\n        };\n\n        // Call API to create factory\n        const response = await axios.post(endpoint, factoryData);\n\n        // Handle successful creation\n        console.log('Factory created:', response.data);\n\n        // Redirect to factories list or homepage\n        router.push('/factories'); // Example route, adjust as needed\n      } catch (error) {\n        console.error('Error creating factory:', error);\n      }\n    };\n    const __returned__ = {\n      router,\n      factory,\n      selectedLocation,\n      submitFactory,\n      ref,\n      get axios() {\n        return axios;\n      },\n      get useRouter() {\n        return useRouter;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","axios","useRouter","router","factory","name","location","openingTime","closingTime","logoName","selectedLocation","address","latitude","longitude","submitFactory","endpoint","factoryData","value","response","post","console","log","data","push","error"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/src/views/AddFactory.vue"],"sourcesContent":["<template>\r\n    <div class=\"add-factory\">\r\n      <h2>Create New Chocolate Factory</h2>\r\n      <form @submit.prevent=\"submitFactory\">\r\n        <div class=\"form-group\">\r\n          <label for=\"factoryName\">Factory Name:</label>\r\n          <input type=\"text\" id=\"factoryName\" v-model=\"factory.name\" required>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"factoryLocation\">Location:</label>\r\n          <div id=\"map\" class=\"map\"></div>\r\n          <input type=\"text\" v-model=\"factory.location\" placeholder=\"Selected Location\" readonly>\r\n          <input type=\"text\" v-model=\"selectedLocation.address\" placeholder=\"Address\" readonly>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"workingHours\">Working Hours:</label>\r\n          <div class=\"time-inputs\">\r\n            <input type=\"text\" id=\"openingTime\" v-model=\"factory.openingTime\" placeholder=\"Opening Time\" required>\r\n            <input type=\"text\" id=\"closingTime\" v-model=\"factory.closingTime\" placeholder=\"Closing Time\" required>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"logoName\">Logo Name:</label>\r\n          <input type=\"text\" id=\"logoName\" v-model=\"factory.logoName\" required>\r\n        </div>\r\n        <button type=\"submit\">Create Factory</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref } from 'vue';\r\n  import axios from 'axios';\r\n  import { useRouter } from 'vue-router';\r\n  \r\n  const router = useRouter();\r\n  const factory = ref({\r\n    name: '',\r\n    location: '',\r\n    openingTime: '',\r\n    closingTime: '',\r\n    logoName: ''\r\n  });\r\n  \r\n  const selectedLocation = ref({\r\n    address: '',\r\n    latitude: null,\r\n    longitude: null\r\n  });\r\n  \r\n  // Function to handle factory submission\r\n  const submitFactory = async () => {\r\n    try {\r\n      // Example endpoint for handling factory creation\r\n      const endpoint = 'http://localhost:8080/WebShopAppREST/rest/chocolateFactoryObjects';\r\n  \r\n      // Prepare factory data\r\n      const factoryData = {\r\n        name: factory.value.name,\r\n        location: selectedLocation.value.address, // Just pass address here\r\n        openingTime: factory.value.openingTime,\r\n        closingTime: factory.value.closingTime,\r\n        logoName: factory.value.logoName\r\n      };\r\n  \r\n      // Call API to create factory\r\n      const response = await axios.post(endpoint, factoryData);\r\n  \r\n      // Handle successful creation\r\n      console.log('Factory created:', response.data);\r\n  \r\n      // Redirect to factories list or homepage\r\n      router.push('/factories'); // Example route, adjust as needed\r\n    } catch (error) {\r\n      console.error('Error creating factory:', error);\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .add-factory {\r\n    max-width: 600px;\r\n    margin: 20px auto;\r\n    padding: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 8px;\r\n  }\r\n  \r\n  .form-group {\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  label {\r\n    display: block;\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  input[type=\"text\"], input[type=\"file\"] {\r\n    width: 100%;\r\n    padding: 8px;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  button {\r\n    padding: 10px 20px;\r\n    background-color: #007bff;\r\n    color: #fff;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: 16px;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  \r\n  .map {\r\n    height: 300px; /* Adjust height as needed */\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n  }\r\n  </style>\r\n  "],"mappings":";AA+BE,SAASA,GAAG,QAAQ,KAAK;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;;;;;;;IAEtC,MAAMC,MAAM,GAAGD,SAAS,CAAC,CAAC;IAC1B,MAAME,OAAO,GAAGJ,GAAG,CAAC;MAClBK,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,MAAMC,gBAAgB,GAAGV,GAAG,CAAC;MAC3BW,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE,IAAI;MACdC,SAAS,EAAE;IACb,CAAC,CAAC;;IAEF;IACA,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,mEAAmE;;QAEpF;QACA,MAAMC,WAAW,GAAG;UAClBX,IAAI,EAAED,OAAO,CAACa,KAAK,CAACZ,IAAI;UACxBC,QAAQ,EAAEI,gBAAgB,CAACO,KAAK,CAACN,OAAO;UAAE;UAC1CJ,WAAW,EAAEH,OAAO,CAACa,KAAK,CAACV,WAAW;UACtCC,WAAW,EAAEJ,OAAO,CAACa,KAAK,CAACT,WAAW;UACtCC,QAAQ,EAAEL,OAAO,CAACa,KAAK,CAACR;QAC1B,CAAC;;QAED;QACA,MAAMS,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAACJ,QAAQ,EAAEC,WAAW,CAAC;;QAExD;QACAI,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEH,QAAQ,CAACI,IAAI,CAAC;;QAE9C;QACAnB,MAAM,CAACoB,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}