{"ast":null,"code":"/**\n * @module ol/style/Fill\n */\n\nimport ImageState from '../ImageState.js';\nimport { get as getIconImage } from './IconImage.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} [color=null] A color,\n * gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats. For polygon fills (not for {@link import(\"./RegularShape.js\").default} fills),\n * a pattern can also be provided as {@link module:ol/colorlike~PatternDescriptor}.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nclass Fill {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default|null}\n     */\n    this.patternImage_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null}\n     */\n    this.color_ = null;\n    if (options.color !== undefined) {\n      this.setColor(options.color);\n    }\n  }\n\n  /**\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n   * @return {Fill} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Fill({\n      color: Array.isArray(color) ? color.slice() : color || undefined\n    });\n  }\n\n  /**\n   * Get the fill color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} color Color.\n   * @api\n   */\n  setColor(color) {\n    if (color !== null && typeof color === 'object' && 'src' in color) {\n      const patternImage = getIconImage(null, color.src, 'anonymous', undefined, color.offset ? null : color.color ? color.color : null, !(color.offset && color.size));\n      patternImage.ready().then(() => {\n        this.patternImage_ = null;\n      });\n      if (patternImage.getImageState() === ImageState.IDLE) {\n        patternImage.load();\n      }\n      if (patternImage.getImageState() === ImageState.LOADING) {\n        this.patternImage_ = patternImage;\n      }\n    }\n    this.color_ = color;\n  }\n\n  /**\n   * @return {boolean} The fill style is loading an image pattern.\n   */\n  loading() {\n    return !!this.patternImage_;\n  }\n\n  /**\n   * @return {Promise<void>} `false` or a promise that resolves when the style is ready to use.\n   */\n  ready() {\n    return this.patternImage_ ? this.patternImage_.ready() : Promise.resolve();\n  }\n}\nexport default Fill;","map":{"version":3,"names":["ImageState","get","getIconImage","Fill","constructor","options","patternImage_","color_","color","undefined","setColor","clone","getColor","Array","isArray","slice","patternImage","src","offset","size","ready","then","getImageState","IDLE","load","LOADING","loading","Promise","resolve"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/node_modules/ol/style/Fill.js"],"sourcesContent":["/**\n * @module ol/style/Fill\n */\n\nimport ImageState from '../ImageState.js';\nimport {get as getIconImage} from './IconImage.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} [color=null] A color,\n * gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats. For polygon fills (not for {@link import(\"./RegularShape.js\").default} fills),\n * a pattern can also be provided as {@link module:ol/colorlike~PatternDescriptor}.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nclass Fill {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default|null}\n     */\n    this.patternImage_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null}\n     */\n    this.color_ = null;\n    if (options.color !== undefined) {\n      this.setColor(options.color);\n    }\n  }\n\n  /**\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n   * @return {Fill} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Fill({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n    });\n  }\n\n  /**\n   * Get the fill color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} color Color.\n   * @api\n   */\n  setColor(color) {\n    if (color !== null && typeof color === 'object' && 'src' in color) {\n      const patternImage = getIconImage(\n        null,\n        color.src,\n        'anonymous',\n        undefined,\n        color.offset ? null : color.color ? color.color : null,\n        !(color.offset && color.size),\n      );\n      patternImage.ready().then(() => {\n        this.patternImage_ = null;\n      });\n      if (patternImage.getImageState() === ImageState.IDLE) {\n        patternImage.load();\n      }\n      if (patternImage.getImageState() === ImageState.LOADING) {\n        this.patternImage_ = patternImage;\n      }\n    }\n    this.color_ = color;\n  }\n\n  /**\n   * @return {boolean} The fill style is loading an image pattern.\n   */\n  loading() {\n    return !!this.patternImage_;\n  }\n\n  /**\n   * @return {Promise<void>} `false` or a promise that resolves when the style is ready to use.\n   */\n  ready() {\n    return this.patternImage_ ? this.patternImage_.ready() : Promise.resolve();\n  }\n}\n\nexport default Fill;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,kBAAkB;AACzC,SAAQC,GAAG,IAAIC,YAAY,QAAO,gBAAgB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,CAAC;EACT;AACF;AACA;EACEC,WAAWA,CAACC,OAAO,EAAE;IACnBA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;;IAEvB;AACJ;AACA;AACA;IACI,IAAI,CAACC,aAAa,GAAG,IAAI;;IAEzB;AACJ;AACA;AACA;IACI,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAIF,OAAO,CAACG,KAAK,KAAKC,SAAS,EAAE;MAC/B,IAAI,CAACC,QAAQ,CAACL,OAAO,CAACG,KAAK,CAAC;IAC9B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEG,KAAKA,CAAA,EAAG;IACN,MAAMH,KAAK,GAAG,IAAI,CAACI,QAAQ,CAAC,CAAC;IAC7B,OAAO,IAAIT,IAAI,CAAC;MACdK,KAAK,EAAEK,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,GAAGA,KAAK,CAACO,KAAK,CAAC,CAAC,GAAGP,KAAK,IAAIC;IACzD,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEG,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACL,MAAM;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEG,QAAQA,CAACF,KAAK,EAAE;IACd,IAAIA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,KAAK,IAAIA,KAAK,EAAE;MACjE,MAAMQ,YAAY,GAAGd,YAAY,CAC/B,IAAI,EACJM,KAAK,CAACS,GAAG,EACT,WAAW,EACXR,SAAS,EACTD,KAAK,CAACU,MAAM,GAAG,IAAI,GAAGV,KAAK,CAACA,KAAK,GAAGA,KAAK,CAACA,KAAK,GAAG,IAAI,EACtD,EAAEA,KAAK,CAACU,MAAM,IAAIV,KAAK,CAACW,IAAI,CAC9B,CAAC;MACDH,YAAY,CAACI,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;QAC9B,IAAI,CAACf,aAAa,GAAG,IAAI;MAC3B,CAAC,CAAC;MACF,IAAIU,YAAY,CAACM,aAAa,CAAC,CAAC,KAAKtB,UAAU,CAACuB,IAAI,EAAE;QACpDP,YAAY,CAACQ,IAAI,CAAC,CAAC;MACrB;MACA,IAAIR,YAAY,CAACM,aAAa,CAAC,CAAC,KAAKtB,UAAU,CAACyB,OAAO,EAAE;QACvD,IAAI,CAACnB,aAAa,GAAGU,YAAY;MACnC;IACF;IACA,IAAI,CAACT,MAAM,GAAGC,KAAK;EACrB;;EAEA;AACF;AACA;EACEkB,OAAOA,CAAA,EAAG;IACR,OAAO,CAAC,CAAC,IAAI,CAACpB,aAAa;EAC7B;;EAEA;AACF;AACA;EACEc,KAAKA,CAAA,EAAG;IACN,OAAO,IAAI,CAACd,aAAa,GAAG,IAAI,CAACA,aAAa,CAACc,KAAK,CAAC,CAAC,GAAGO,OAAO,CAACC,OAAO,CAAC,CAAC;EAC5E;AACF;AAEA,eAAezB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}