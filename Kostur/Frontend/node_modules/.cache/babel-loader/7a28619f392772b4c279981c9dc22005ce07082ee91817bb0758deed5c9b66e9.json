{"ast":null,"code":"/**\n * @module ol/style/RegularShape\n */\n\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { asColorLike } from '../colorlike.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { defaultFillStyle, defaultLineCap, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle } from '../render/canvas.js';\n\n/**\n * Specify radius for regular polygons, or both radius and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} radius Radius of a regular polygon.\n * @property {number} [radius2] Second radius to make a star instead of a regular polygon.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.\n * Positive values will shift the shape right and up.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius` and `radius2`.\n * @property {import('./Style.js').DeclutterMode} [declutterMode] Declutter mode.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike|undefined} strokeStyle StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {CanvasLineCap} lineCap LineCap.\n * @property {Array<number>|null} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when both `radius` and\n * `radius2` are provided.\n * @api\n */\nclass RegularShape extends ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super({\n      opacity: 1,\n      rotateWithView: options.rotateWithView !== undefined ? options.rotateWithView : false,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode\n    });\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    this.canvases_;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|null}\n     */\n    this.hitDetectionCanvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default|null}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.points_ = options.points;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.radius_ = options.radius;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.radius2_ = options.radius2;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default|null}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_;\n\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n    this.renderOptions_;\n    this.imageState_ = this.fill_ && this.fill_.loading() ? ImageState.LOADING : ImageState.LOADED;\n    if (this.imageState_ === ImageState.LOADING) {\n      this.ready().then(() => this.imageState_ = ImageState.LOADED);\n    }\n    this.render();\n  }\n\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode()\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    const size = this.size_;\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [size[0] / 2 - displacement[0] / scale[0], size[1] / 2 + displacement[1] / scale[1]];\n  }\n\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  getAngle() {\n    return this.angle_;\n  }\n\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default|null} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n    this.render();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.createHitDetectionCanvas_(this.renderOptions_);\n    }\n    return this.hitDetectionCanvas_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    let image = this.canvases_[pixelRatio];\n    if (!image) {\n      const renderOptions = this.renderOptions_;\n      const context = createCanvasContext2D(renderOptions.size * pixelRatio, renderOptions.size * pixelRatio);\n      this.draw_(renderOptions, context, pixelRatio);\n      image = context.canvas;\n      this.canvases_[pixelRatio] = image;\n    }\n    return image;\n  }\n\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n  getPixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.size_;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.imageState_;\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    return this.origin_;\n  }\n\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  getPoints() {\n    return this.points_;\n  }\n\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return this.radius_;\n  }\n\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  getRadius2() {\n    return this.radius2_;\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n    this.render();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {}\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {}\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {}\n\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n  calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\n    if (strokeWidth === 0 || this.points_ === Infinity || lineJoin !== 'bevel' && lineJoin !== 'miter') {\n      return strokeWidth;\n    }\n    // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n    let r1 = this.radius_;\n    let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n    if (r1 < r2) {\n      const tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n    const points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    const alpha = 2 * Math.PI / points;\n    const a = r2 * Math.sin(alpha);\n    const b = Math.sqrt(r2 * r2 - a * a);\n    const d = r1 - b;\n    const e = Math.sqrt(a * a + d * d);\n    const miterRatio = e / a;\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    }\n    // Calculate the distance from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n    const k = strokeWidth / 2 / miterRatio;\n    const l = strokeWidth / 2 * (d / e);\n    const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    const bevelAdd = maxr - r1;\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    }\n    // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n    const aa = r1 * Math.sin(alpha);\n    const bb = Math.sqrt(r1 * r1 - aa * aa);\n    const dd = r2 - bb;\n    const ee = Math.sqrt(aa * aa + dd * dd);\n    const innerMiterRatio = ee / aa;\n    if (innerMiterRatio <= miterLimit) {\n      const innerLength = innerMiterRatio * strokeWidth / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n    return bevelAdd * 2;\n  }\n\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n  createRenderOptions() {\n    let lineCap = defaultLineCap;\n    let lineJoin = defaultLineJoin;\n    let miterLimit = 0;\n    let lineDash = null;\n    let lineDashOffset = 0;\n    let strokeStyle;\n    let strokeWidth = 0;\n    if (this.stroke_) {\n      strokeStyle = asColorLike(this.stroke_.getColor() ?? defaultStrokeStyle);\n      strokeWidth = this.stroke_.getWidth() ?? defaultLineWidth;\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset() ?? 0;\n      lineJoin = this.stroke_.getLineJoin() ?? defaultLineJoin;\n      lineCap = this.stroke_.getLineCap() ?? defaultLineCap;\n      miterLimit = this.stroke_.getMiterLimit() ?? defaultMiterLimit;\n    }\n    const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    const maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n    const size = Math.ceil(2 * maxRadius + add);\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineCap: lineCap,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit\n    };\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.renderOptions_ = this.createRenderOptions();\n    const size = this.renderOptions_.size;\n    this.canvases_ = {};\n    this.hitDetectionCanvas_ = null;\n    this.size_ = [size, size];\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n  draw_(renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio);\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n    this.createPath_(context);\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (renderOptions.strokeStyle) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineCap = renderOptions.lineCap;\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @return {HTMLCanvasElement} Canvas containing the icon\n   */\n  createHitDetectionCanvas_(renderOptions) {\n    let context;\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n\n      // determine if fill is transparent (or pattern or gradient)\n      let opacity = 0;\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n    return context ? context.canvas : this.getImage(1);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n  createPath_(context) {\n    let points = this.points_;\n    const radius = this.radius_;\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n      const startAngle = this.angle_ - Math.PI / 2;\n      const step = 2 * Math.PI / points;\n      for (let i = 0; i < points; i++) {\n        const angle0 = startAngle + i * step;\n        const radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n      context.closePath();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n  drawHitDetectionCanvas_(renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n    this.createPath_(context);\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n    if (renderOptions.strokeStyle) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n  ready() {\n    return this.fill_ ? this.fill_.ready() : Promise.resolve();\n  }\n}\nexport default RegularShape;","map":{"version":3,"names":["ImageState","ImageStyle","asArray","asColorLike","createCanvasContext2D","defaultFillStyle","defaultLineCap","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultStrokeStyle","RegularShape","constructor","options","opacity","rotateWithView","undefined","rotation","scale","displacement","declutterMode","canvases_","hitDetectionCanvas_","fill_","fill","origin_","points_","points","radius_","radius","radius2_","radius2","angle_","angle","stroke_","stroke","size_","renderOptions_","imageState_","loading","LOADING","LOADED","ready","then","render","clone","getScale","style","getFill","getPoints","getRadius","getRadius2","getAngle","getStroke","getRotation","getRotateWithView","Array","isArray","slice","getDisplacement","getDeclutterMode","setOpacity","getOpacity","getAnchor","size","getScaleArray","setFill","getHitDetectionImage","createHitDetectionCanvas_","getImage","pixelRatio","image","renderOptions","context","draw_","canvas","getPixelRatio","getImageSize","getImageState","getOrigin","getSize","setStroke","listenImageChange","listener","load","unlistenImageChange","calculateLineJoinSize_","lineJoin","strokeWidth","miterLimit","Infinity","r1","r2","tmp","alpha","Math","PI","a","sin","b","sqrt","d","e","miterRatio","k","l","maxr","bevelAdd","aa","bb","dd","ee","innerMiterRatio","innerLength","max","createRenderOptions","lineCap","lineDash","lineDashOffset","strokeStyle","getColor","getWidth","getLineDash","getLineDashOffset","getLineJoin","getLineCap","getMiterLimit","add","maxRadius","ceil","translate","createPath_","color","fillStyle","lineWidth","setLineDash","length","drawHitDetectionCanvas_","arc","startAngle","step","i","angle0","radiusC","lineTo","cos","closePath","Promise","resolve"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/node_modules/ol/style/RegularShape.js"],"sourcesContent":["/**\n * @module ol/style/RegularShape\n */\n\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {asColorLike} from '../colorlike.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {\n  defaultFillStyle,\n  defaultLineCap,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n} from '../render/canvas.js';\n\n/**\n * Specify radius for regular polygons, or both radius and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} radius Radius of a regular polygon.\n * @property {number} [radius2] Second radius to make a star instead of a regular polygon.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.\n * Positive values will shift the shape right and up.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius` and `radius2`.\n * @property {import('./Style.js').DeclutterMode} [declutterMode] Declutter mode.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike|undefined} strokeStyle StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {CanvasLineCap} lineCap LineCap.\n * @property {Array<number>|null} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when both `radius` and\n * `radius2` are provided.\n * @api\n */\nclass RegularShape extends ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super({\n      opacity: 1,\n      rotateWithView:\n        options.rotateWithView !== undefined ? options.rotateWithView : false,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode,\n    });\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    this.canvases_;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|null}\n     */\n    this.hitDetectionCanvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default|null}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.points_ = options.points;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.radius_ = options.radius;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.radius2_ = options.radius2;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default|null}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_;\n\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n    this.renderOptions_;\n\n    this.imageState_ =\n      this.fill_ && this.fill_.loading()\n        ? ImageState.LOADING\n        : ImageState.LOADED;\n    if (this.imageState_ === ImageState.LOADING) {\n      this.ready().then(() => (this.imageState_ = ImageState.LOADED));\n    }\n    this.render();\n  }\n\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    const size = this.size_;\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [\n      size[0] / 2 - displacement[0] / scale[0],\n      size[1] / 2 + displacement[1] / scale[1],\n    ];\n  }\n\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  getAngle() {\n    return this.angle_;\n  }\n\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default|null} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n    this.render();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.createHitDetectionCanvas_(\n        this.renderOptions_,\n      );\n    }\n    return this.hitDetectionCanvas_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    let image = this.canvases_[pixelRatio];\n    if (!image) {\n      const renderOptions = this.renderOptions_;\n      const context = createCanvasContext2D(\n        renderOptions.size * pixelRatio,\n        renderOptions.size * pixelRatio,\n      );\n      this.draw_(renderOptions, context, pixelRatio);\n\n      image = context.canvas;\n      this.canvases_[pixelRatio] = image;\n    }\n    return image;\n  }\n\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n  getPixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.size_;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.imageState_;\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    return this.origin_;\n  }\n\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  getPoints() {\n    return this.points_;\n  }\n\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return this.radius_;\n  }\n\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  getRadius2() {\n    return this.radius2_;\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n    this.render();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {}\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {}\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {}\n\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n  calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\n    if (\n      strokeWidth === 0 ||\n      this.points_ === Infinity ||\n      (lineJoin !== 'bevel' && lineJoin !== 'miter')\n    ) {\n      return strokeWidth;\n    }\n    // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n    let r1 = this.radius_;\n    let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n    if (r1 < r2) {\n      const tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n    const points =\n      this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    const alpha = (2 * Math.PI) / points;\n    const a = r2 * Math.sin(alpha);\n    const b = Math.sqrt(r2 * r2 - a * a);\n    const d = r1 - b;\n    const e = Math.sqrt(a * a + d * d);\n    const miterRatio = e / a;\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    }\n    // Calculate the distance from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n    const k = strokeWidth / 2 / miterRatio;\n    const l = (strokeWidth / 2) * (d / e);\n    const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    const bevelAdd = maxr - r1;\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    }\n    // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n    const aa = r1 * Math.sin(alpha);\n    const bb = Math.sqrt(r1 * r1 - aa * aa);\n    const dd = r2 - bb;\n    const ee = Math.sqrt(aa * aa + dd * dd);\n    const innerMiterRatio = ee / aa;\n    if (innerMiterRatio <= miterLimit) {\n      const innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n    return bevelAdd * 2;\n  }\n\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n  createRenderOptions() {\n    let lineCap = defaultLineCap;\n    let lineJoin = defaultLineJoin;\n    let miterLimit = 0;\n    let lineDash = null;\n    let lineDashOffset = 0;\n    let strokeStyle;\n    let strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = asColorLike(this.stroke_.getColor() ?? defaultStrokeStyle);\n      strokeWidth = this.stroke_.getWidth() ?? defaultLineWidth;\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset() ?? 0;\n      lineJoin = this.stroke_.getLineJoin() ?? defaultLineJoin;\n      lineCap = this.stroke_.getLineCap() ?? defaultLineCap;\n      miterLimit = this.stroke_.getMiterLimit() ?? defaultMiterLimit;\n    }\n\n    const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    const maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n    const size = Math.ceil(2 * maxRadius + add);\n\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineCap: lineCap,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit,\n    };\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.renderOptions_ = this.createRenderOptions();\n    const size = this.renderOptions_.size;\n    this.canvases_ = {};\n    this.hitDetectionCanvas_ = null;\n    this.size_ = [size, size];\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n  draw_(renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio);\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (renderOptions.strokeStyle) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineCap = renderOptions.lineCap;\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @return {HTMLCanvasElement} Canvas containing the icon\n   */\n  createHitDetectionCanvas_(renderOptions) {\n    let context;\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n\n      // determine if fill is transparent (or pattern or gradient)\n      let opacity = 0;\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n    return context ? context.canvas : this.getImage(1);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n  createPath_(context) {\n    let points = this.points_;\n    const radius = this.radius_;\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n      const startAngle = this.angle_ - Math.PI / 2;\n      const step = (2 * Math.PI) / points;\n      for (let i = 0; i < points; i++) {\n        const angle0 = startAngle + i * step;\n        const radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n      context.closePath();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n  drawHitDetectionCanvas_(renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n    if (renderOptions.strokeStyle) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n\n  ready() {\n    return this.fill_ ? this.fill_.ready() : Promise.resolve();\n  }\n}\n\nexport default RegularShape;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}