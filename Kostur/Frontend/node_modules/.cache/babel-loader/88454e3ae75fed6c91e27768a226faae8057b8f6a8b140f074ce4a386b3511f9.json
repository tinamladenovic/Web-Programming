{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/renderer/canvas/VectorTileLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasExecutorGroup, { DECLUTTER } from '../../render/canvas/ExecutorGroup.js';\nimport CanvasTileLayerRenderer from './TileLayer.js';\nimport TileState from '../../TileState.js';\nimport ViewHint from '../../ViewHint.js';\nimport ZIndexContext from '../../render/canvas/ZIndexContext.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect } from '../../render/canvas/hitdetect.js';\nimport { apply as applyTransform, create as createTransform, multiply, reset as resetTransform, scale, scale as scaleTransform, translate as translateTransform } from '../../transform.js';\nimport { ascending } from '../../array.js';\nimport { boundingExtent, buffer, containsExtent, equals, getIntersection, getTopLeft, intersects } from '../../extent.js';\nimport { getSquaredTolerance as getSquaredRenderTolerance, renderFeature } from '../vector.js';\nimport { getUid } from '../../util.js';\nimport { toSize } from '../../size.js';\nimport { wrapX } from '../../coordinate.js';\n\n/**\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\n */\nconst IMAGE_REPLAYS = {\n  'image': ['Polygon', 'Circle', 'LineString', 'Image', 'Text'],\n  'hybrid': ['Polygon', 'LineString'],\n  'vector': []\n};\n\n/**\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\n */\nconst VECTOR_REPLAYS = {\n  'hybrid': ['Image', 'Text', 'Default'],\n  'vector': ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default']\n};\n\n/**\n * @classdesc\n * Canvas renderer for vector tile layers.\n * @api\n * @extends {CanvasTileLayerRenderer<import(\"../../layer/VectorTile.js\").default>}\n */\nclass CanvasVectorTileLayerRenderer extends CanvasTileLayerRenderer {\n  /**\n   * @param {import(\"../../layer/VectorTile.js\").default} layer VectorTile layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedLayerRevision_;\n\n    /**\n     * @private\n     * @type {import(\"../../transform\").Transform}\n     */\n    this.renderedPixelToCoordinateTransform_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedOpacity_ = 1;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tmpTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {Array<ZIndexContext>}\n     */\n    this.tileClipContexts_ = null;\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection\").default} projection Projection.\n   * @return {boolean|undefined} Tile needs to be rendered.\n   */\n  prepareTile(tile, pixelRatio, projection) {\n    let render;\n    const state = tile.getState();\n    if (state === TileState.LOADED || state === TileState.ERROR) {\n      this.updateExecutorGroup_(tile, pixelRatio, projection);\n      if (this.tileImageNeedsRender_(tile)) {\n        render = true;\n      }\n    }\n    return render;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {!import(\"../../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const layer = this.getLayer();\n    const tile = layer.getSource().getTile(z, x, y, pixelRatio, projection);\n    const viewHints = frameState.viewHints;\n    const hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    if (hifi || !tile.wantedResolution) {\n      tile.wantedResolution = resolution;\n    }\n    const render = this.prepareTile(tile, pixelRatio, projection);\n    if (render && (hifi || Date.now() - frameState.time < 8) && layer.getRenderMode() !== 'vector') {\n      this.renderTileImage_(tile, frameState);\n    }\n    return super.getTile(z, x, y, frameState);\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @return {boolean} Tile is drawable.\n   */\n  isDrawableTile(tile) {\n    const layer = this.getLayer();\n    return super.isDrawableTile(tile) && (layer.getRenderMode() === 'vector' ? getUid(layer) in tile.executorGroups : tile.hasContext(layer));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTileImage(tile) {\n    return tile.getImage(this.getLayer());\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const layerRevision = this.getLayer().getRevision();\n    if (this.renderedLayerRevision_ !== layerRevision) {\n      this.renderedLayerRevision_ = layerRevision;\n      this.renderedTiles.length = 0;\n    }\n    return super.prepareFrame(frameState);\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n   * @private\n   */\n  updateExecutorGroup_(tile, pixelRatio, projection) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */\n    this.getLayer();\n    const revision = layer.getRevision();\n    const renderOrder = layer.getRenderOrder() || null;\n    const resolution = tile.wantedResolution;\n    const builderState = tile.getReplayState(layer);\n    if (!builderState.dirty && builderState.renderedResolution === resolution && builderState.renderedRevision == revision && builderState.renderedRenderOrder == renderOrder) {\n      return;\n    }\n    const source = layer.getSource();\n    const declutter = !!layer.getDeclutter();\n    const sourceTileGrid = source.getTileGrid();\n    const tileGrid = source.getTileGridForProjection(projection);\n    const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n    const sourceTiles = source.getSourceTiles(pixelRatio, projection, tile);\n    const layerUid = getUid(layer);\n    delete tile.hitDetectionImageData[layerUid];\n    tile.executorGroups[layerUid] = [];\n    builderState.dirty = false;\n    for (let t = 0, tt = sourceTiles.length; t < tt; ++t) {\n      const sourceTile = sourceTiles[t];\n      if (sourceTile.getState() != TileState.LOADED) {\n        continue;\n      }\n      const sourceTileCoord = sourceTile.tileCoord;\n      const sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);\n      const sharedExtent = getIntersection(tileExtent, sourceTileExtent);\n      const builderExtent = buffer(sharedExtent, layer.getRenderBuffer() * resolution, this.tmpExtent);\n      const bufferedExtent = equals(sourceTileExtent, sharedExtent) ? null : builderExtent;\n      const builderGroup = new CanvasBuilderGroup(0, sharedExtent, resolution, pixelRatio);\n      const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n\n      /**\n       * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n       * @param {number} [index] Render order index.\n       * @this {CanvasVectorTileLayerRenderer}\n       */\n      const render = function (feature, index) {\n        let styles;\n        const styleFunction = feature.getStyleFunction() || layer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(feature, squaredTolerance, styles, builderGroup, declutter, index);\n          builderState.dirty = builderState.dirty || dirty;\n        }\n      };\n      const features = sourceTile.getFeatures();\n      if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {\n        features.sort(renderOrder);\n      }\n      for (let i = 0, ii = features.length; i < ii; ++i) {\n        const feature = features[i];\n        if (!bufferedExtent || intersects(bufferedExtent, feature.getGeometry().getExtent())) {\n          render.call(this, feature, i);\n        }\n      }\n      const executorGroupInstructions = builderGroup.finish();\n      // no need to clip when the render tile is covered by a single source tile\n      const replayExtent = layer.getRenderMode() !== 'vector' && declutter && sourceTiles.length === 1 ? null : sharedExtent;\n      const renderingReplayGroup = new CanvasExecutorGroup(replayExtent, resolution, pixelRatio, source.getOverlaps(), executorGroupInstructions, layer.getRenderBuffer(), true);\n      tile.executorGroups[layerUid].push(renderingReplayGroup);\n    }\n    builderState.renderedRevision = revision;\n    builderState.renderedRenderOrder = renderOrder;\n    builderState.renderedResolution = resolution;\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;\n    const layer = this.getLayer();\n    const source = layer.getSource();\n    const tileGrid = source.getTileGridForProjection(frameState.viewState.projection);\n    const hitExtent = boundingExtent([coordinate]);\n    buffer(hitExtent, resolution * hitTolerance, hitExtent);\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position.\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      let key = feature.getId();\n      if (key === undefined) {\n        key = getUid(feature);\n      }\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(features[key] = {\n          feature: feature,\n          layer: layer,\n          geometry: geometry,\n          distanceSq: distanceSq,\n          callback: callback\n        });\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n    const renderedTiles = /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */\n    this.renderedTiles;\n    let found;\n    for (let i = 0, ii = renderedTiles.length; !found && i < ii; ++i) {\n      const tile = renderedTiles[i];\n      const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n      if (!intersects(tileExtent, hitExtent)) {\n        continue;\n      }\n      const layerUid = getUid(layer);\n      const executorGroups = [tile.executorGroups[layerUid]];\n      const declutter = layer.getDeclutter();\n      executorGroups.some(executorGroups => {\n        const declutteredFeatures = declutter ? frameState.declutter[declutter].all().map(item => item.value) : null;\n        for (let t = 0, tt = executorGroups.length; t < tt; ++t) {\n          const executorGroup = executorGroups[t];\n          found = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, declutteredFeatures);\n          if (found) {\n            return true;\n          }\n        }\n      });\n    }\n    return found;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature.js\").FeatureLike>>} Promise that resolves with an array of features.\n   */\n  getFeatures(pixel) {\n    return new Promise((resolve, reject) => {\n      const layer = this.getLayer();\n      const layerUid = getUid(layer);\n      const source = layer.getSource();\n      const projection = this.renderedProjection;\n      const projectionExtent = projection.getExtent();\n      const resolution = this.renderedResolution;\n      const tileGrid = source.getTileGridForProjection(projection);\n      const coordinate = applyTransform(this.renderedPixelToCoordinateTransform_, pixel.slice());\n      const tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);\n      /** @type {import(\"../../VectorRenderTile.js\").default|undefined} */\n      let tile;\n      for (let i = 0, ii = this.renderedTiles.length; i < ii; ++i) {\n        if (tileCoord.toString() === this.renderedTiles[i].tileCoord.toString()) {\n          tile = /** @type {import(\"../../VectorRenderTile.js\").default} */\n          this.renderedTiles[i];\n          if (tile.getState() === TileState.LOADED) {\n            const extent = tileGrid.getTileCoordExtent(tile.tileCoord);\n            if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n              wrapX(coordinate, projection);\n            }\n            break;\n          }\n          tile = undefined;\n        }\n      }\n      if (!tile || tile.loadingSourceTiles > 0) {\n        resolve([]);\n        return;\n      }\n      const extent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n      const corner = getTopLeft(extent);\n      const tilePixel = [(coordinate[0] - corner[0]) / resolution, (corner[1] - coordinate[1]) / resolution];\n      /** @type {Array<import(\"../../Feature.js\").FeatureLike>} */\n      const features = tile.getSourceTiles().reduce(function (accumulator, sourceTile) {\n        return accumulator.concat(sourceTile.getFeatures());\n      }, []);\n      /** @type {ImageData|undefined} */\n      let hitDetectionImageData = tile.hitDetectionImageData[layerUid];\n      if (!hitDetectionImageData) {\n        const tileSize = toSize(tileGrid.getTileSize(tileGrid.getZForResolution(resolution, source.zDirection)));\n        const rotation = this.renderedRotation_;\n        const transforms = [this.getRenderTransform(tileGrid.getTileCoordCenter(tile.wrappedTileCoord), resolution, 0, HIT_DETECT_RESOLUTION, tileSize[0] * HIT_DETECT_RESOLUTION, tileSize[1] * HIT_DETECT_RESOLUTION, 0)];\n        hitDetectionImageData = createHitDetectionImageData(tileSize, transforms, features, layer.getStyleFunction(), tileGrid.getTileCoordExtent(tile.wrappedTileCoord), tile.getReplayState(layer).renderedResolution, rotation);\n        tile.hitDetectionImageData[layerUid] = hitDetectionImageData;\n      }\n      resolve(hitDetect(tilePixel, features, hitDetectionImageData));\n    });\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   */\n  renderDeclutter(frameState, layerState) {\n    const context = this.context;\n    const alpha = context.globalAlpha;\n    context.globalAlpha = layerState.opacity;\n    const viewHints = frameState.viewHints;\n    const hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    const tiles = /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */\n    this.renderedTiles;\n    for (let i = 0, ii = tiles.length; i < ii; ++i) {\n      const tile = tiles[i];\n      const executorGroups = tile.executorGroups[getUid(this.getLayer())];\n      const declutter = this.getLayer().getDeclutter();\n      if (executorGroups) {\n        for (let j = executorGroups.length - 1; j >= 0; --j) {\n          executorGroups[j].execute(this.context, [this.context.canvas.width, this.context.canvas.height], this.getTileRenderTransform(tile, frameState), frameState.viewState.rotation, hifi, DECLUTTER, declutter ? frameState.declutter[declutter] : undefined);\n        }\n      }\n    }\n    context.globalAlpha = alpha;\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeferredInternal(frameState) {\n    const tiles = /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */\n    this.renderedTiles;\n    const executorGroups = tiles.reduce((acc, tile, index) => {\n      tile.executorGroups[getUid(this.getLayer())].forEach(executorGroup => acc.push({\n        executorGroup,\n        index\n      }));\n      return acc;\n    }, []);\n    const executorGroupZIndexContexts = executorGroups.map(({\n      executorGroup\n    }) => executorGroup.getDeferredZIndexContexts());\n    const usedZIndices = {};\n    for (let i = 0, ii = executorGroups.length; i < ii; ++i) {\n      const executorGroupZindexContext = executorGroups[i].executorGroup.getDeferredZIndexContexts();\n      for (const key in executorGroupZindexContext) {\n        usedZIndices[key] = true;\n      }\n    }\n    const zIndexKeys = Object.keys(usedZIndices).sort(ascending);\n    zIndexKeys.map(Number).forEach(zIndex => {\n      executorGroupZIndexContexts.forEach((zIndexContexts, i) => {\n        if (!zIndexContexts[zIndex]) {\n          return;\n        }\n        zIndexContexts[zIndex].forEach(zIndexContext => {\n          const {\n            executorGroup,\n            index\n          } = executorGroups[i];\n          const context = executorGroup.getRenderedContext();\n          const alpha = context.globalAlpha;\n          context.globalAlpha = this.renderedOpacity_;\n          const tileClipContext = this.tileClipContexts_[index];\n          if (tileClipContext) {\n            tileClipContext.draw(context);\n          }\n          zIndexContext.draw(context);\n          if (tileClipContext) {\n            context.restore();\n          }\n          context.globalAlpha = alpha;\n          zIndexContext.clear();\n        });\n        zIndexContexts[zIndex].length = 0;\n      });\n    });\n  }\n  getTileRenderTransform(tile, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const rotation = viewState.rotation;\n    const size = frameState.size;\n    const width = Math.round(size[0] * pixelRatio);\n    const height = Math.round(size[1] * pixelRatio);\n    const source = this.getLayer().getSource();\n    const tileGrid = source.getTileGridForProjection(frameState.viewState.projection);\n    const tileCoord = tile.tileCoord;\n    const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n    const worldOffset = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tileExtent[0];\n    const transform = multiply(scale(this.inversePixelTransform.slice(), 1 / pixelRatio, 1 / pixelRatio), this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, worldOffset));\n    return transform;\n  }\n\n  /**\n   * Render the vectors for this layer.\n   * @param {CanvasRenderingContext2D} context Target context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  postRender(context, frameState) {\n    const viewHints = frameState.viewHints;\n    const hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    this.renderedPixelToCoordinateTransform_ = frameState.pixelToCoordinateTransform.slice();\n    this.renderedRotation_ = frameState.viewState.rotation;\n    this.renderedOpacity_ = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */\n    this.getLayer();\n    const renderMode = layer.getRenderMode();\n    const alpha = context.globalAlpha;\n    context.globalAlpha = this.renderedOpacity_;\n    const declutter = layer.getDeclutter();\n    const replayTypes = declutter ? VECTOR_REPLAYS[renderMode].filter(type => !DECLUTTER.includes(type)) : VECTOR_REPLAYS[renderMode];\n    const viewState = frameState.viewState;\n    const rotation = viewState.rotation;\n    const tileSource = layer.getSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const z = tileGrid.getZForResolution(viewState.resolution, tileSource.zDirection);\n    const tiles = this.renderedTiles;\n    const clips = [];\n    const clipZs = [];\n    const tileClipContexts = [];\n    let ready = true;\n    for (let i = tiles.length - 1; i >= 0; --i) {\n      const tile = /** @type {import(\"../../VectorRenderTile.js\").default} */\n      tiles[i];\n      ready = ready && !tile.getReplayState(layer).dirty;\n      const executorGroups = tile.executorGroups[getUid(layer)].filter(group => group.hasExecutors(replayTypes));\n      if (executorGroups.length === 0) {\n        continue;\n      }\n      const transform = this.getTileRenderTransform(tile, frameState);\n      const currentZ = tile.tileCoord[0];\n      let contextSaved = false;\n      // Clip mask for regions in this tile that already filled by a higher z tile\n      const currentClip = executorGroups[0].getClipCoords(transform);\n      let clipContext = context;\n      let tileClipContext;\n      if (currentClip) {\n        tileClipContext = new ZIndexContext();\n        clipContext = tileClipContext.getContext();\n        for (let j = 0, jj = clips.length; j < jj; ++j) {\n          if (z !== currentZ && currentZ < clipZs[j]) {\n            const clip = clips[j];\n            if (intersects([currentClip[0], currentClip[3], currentClip[4], currentClip[7]], [clip[0], clip[3], clip[4], clip[7]])) {\n              if (!contextSaved) {\n                clipContext.save();\n                contextSaved = true;\n              }\n              clipContext.beginPath();\n              // counter-clockwise (outer ring) for current tile\n              clipContext.moveTo(currentClip[0], currentClip[1]);\n              clipContext.lineTo(currentClip[2], currentClip[3]);\n              clipContext.lineTo(currentClip[4], currentClip[5]);\n              clipContext.lineTo(currentClip[6], currentClip[7]);\n              // clockwise (inner ring) for higher z tile\n              clipContext.moveTo(clip[6], clip[7]);\n              clipContext.lineTo(clip[4], clip[5]);\n              clipContext.lineTo(clip[2], clip[3]);\n              clipContext.lineTo(clip[0], clip[1]);\n              clipContext.clip();\n            }\n          }\n        }\n        clips.push(currentClip);\n        clipZs.push(currentZ);\n      }\n      for (let t = 0, tt = executorGroups.length; t < tt; ++t) {\n        const executorGroup = executorGroups[t];\n        executorGroup.execute(context, [context.canvas.width, context.canvas.height], transform, rotation, hifi, replayTypes, frameState.declutter?.[declutter]);\n      }\n      if (contextSaved) {\n        if (clipContext === context) {\n          clipContext.restore();\n        } else {\n          tileClipContexts[i] = tileClipContext;\n        }\n      }\n    }\n    context.globalAlpha = alpha;\n    this.ready = ready;\n    this.tileClipContexts_ = tileClipContexts;\n    if (!frameState.declutter) {\n      this.renderDeferredInternal(frameState);\n    }\n    super.postRender(context, frameState);\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n   * @param {boolean} [declutter] Enable decluttering.\n   * @param {number} [index] Render order index.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(feature, squaredTolerance, styles, builderGroup, declutter, index) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, undefined, declutter, index) || loading;\n      }\n    } else {\n      loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, undefined, declutter, index);\n    }\n    return loading;\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @return {boolean} A new tile image was rendered.\n   * @private\n   */\n  tileImageNeedsRender_(tile) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */\n    this.getLayer();\n    if (layer.getRenderMode() === 'vector') {\n      return false;\n    }\n    const replayState = tile.getReplayState(layer);\n    const revision = layer.getRevision();\n    const resolution = tile.wantedResolution;\n    return replayState.renderedTileResolution !== resolution || replayState.renderedTileRevision !== revision;\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\n   * @private\n   */\n  renderTileImage_(tile, frameState) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */\n    this.getLayer();\n    const replayState = tile.getReplayState(layer);\n    const revision = layer.getRevision();\n    const executorGroups = tile.executorGroups[getUid(layer)];\n    replayState.renderedTileRevision = revision;\n    const tileCoord = tile.wrappedTileCoord;\n    const z = tileCoord[0];\n    const source = layer.getSource();\n    let pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const tileGrid = source.getTileGridForProjection(projection);\n    const tileResolution = tileGrid.getResolution(tile.tileCoord[0]);\n    const renderPixelRatio = frameState.pixelRatio / tile.wantedResolution * tileResolution;\n    const resolution = tileGrid.getResolution(z);\n    const context = tile.getContext(layer);\n\n    // Increase tile size when overzooming for low pixel ratio, to avoid blurry tiles\n    pixelRatio = Math.round(Math.max(pixelRatio, renderPixelRatio / pixelRatio));\n    const size = source.getTilePixelSize(z, pixelRatio, projection);\n    context.canvas.width = size[0];\n    context.canvas.height = size[1];\n    const renderScale = pixelRatio / renderPixelRatio;\n    if (renderScale !== 1) {\n      const canvasTransform = resetTransform(this.tmpTransform_);\n      scaleTransform(canvasTransform, renderScale, renderScale);\n      context.setTransform.apply(context, canvasTransform);\n    }\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);\n    const pixelScale = renderPixelRatio / resolution;\n    const transform = resetTransform(this.tmpTransform_);\n    scaleTransform(transform, pixelScale, -pixelScale);\n    translateTransform(transform, -tileExtent[0], -tileExtent[3]);\n    for (let i = 0, ii = executorGroups.length; i < ii; ++i) {\n      const executorGroup = executorGroups[i];\n      executorGroup.execute(context, [context.canvas.width * renderScale, context.canvas.height * renderScale], transform, 0, true, IMAGE_REPLAYS[layer.getRenderMode()], null);\n    }\n    replayState.renderedTileResolution = tile.wantedResolution;\n  }\n}\nexport default CanvasVectorTileLayerRenderer;","map":{"version":3,"names":["CanvasBuilderGroup","CanvasExecutorGroup","DECLUTTER","CanvasTileLayerRenderer","TileState","ViewHint","ZIndexContext","HIT_DETECT_RESOLUTION","createHitDetectionImageData","hitDetect","apply","applyTransform","create","createTransform","multiply","reset","resetTransform","scale","scaleTransform","translate","translateTransform","ascending","boundingExtent","buffer","containsExtent","equals","getIntersection","getTopLeft","intersects","getSquaredTolerance","getSquaredRenderTolerance","renderFeature","getUid","toSize","wrapX","IMAGE_REPLAYS","VECTOR_REPLAYS","CanvasVectorTileLayerRenderer","constructor","layer","boundHandleStyleImageChange_","handleStyleImageChange_","bind","renderedLayerRevision_","renderedPixelToCoordinateTransform_","renderedRotation_","renderedOpacity_","tmpTransform_","tileClipContexts_","prepareTile","tile","pixelRatio","projection","render","state","getState","LOADED","ERROR","updateExecutorGroup_","tileImageNeedsRender_","getTile","z","x","y","frameState","viewState","resolution","getLayer","getSource","viewHints","hifi","ANIMATING","INTERACTING","wantedResolution","Date","now","time","getRenderMode","renderTileImage_","isDrawableTile","executorGroups","hasContext","getTileImage","getImage","prepareFrame","layerRevision","getRevision","renderedTiles","length","revision","renderOrder","getRenderOrder","builderState","getReplayState","dirty","renderedResolution","renderedRevision","renderedRenderOrder","source","declutter","getDeclutter","sourceTileGrid","getTileGrid","tileGrid","getTileGridForProjection","tileExtent","getTileCoordExtent","wrappedTileCoord","sourceTiles","getSourceTiles","layerUid","hitDetectionImageData","t","tt","sourceTile","sourceTileCoord","tileCoord","sourceTileExtent","sharedExtent","builderExtent","getRenderBuffer","tmpExtent","bufferedExtent","builderGroup","squaredTolerance","feature","index","styles","styleFunction","getStyleFunction","features","getFeatures","sort","i","ii","getGeometry","getExtent","call","executorGroupInstructions","finish","replayExtent","renderingReplayGroup","getOverlaps","push","forEachFeatureAtCoordinate","coordinate","hitTolerance","callback","matches","rotation","undefined","hitExtent","featureCallback","geometry","distanceSq","key","getId","match","splice","lastIndexOf","found","some","declutteredFeatures","all","map","item","value","executorGroup","pixel","Promise","resolve","reject","renderedProjection","projectionExtent","slice","getTileCoordForCoordAndResolution","toString","extent","getWrapX","canWrapX","loadingSourceTiles","corner","tilePixel","reduce","accumulator","concat","tileSize","getTileSize","getZForResolution","zDirection","transforms","getRenderTransform","getTileCoordCenter","handleFontsChanged","getVisible","changed","event","renderIfReadyAndVisible","renderDeclutter","layerState","context","alpha","globalAlpha","opacity","tiles","j","execute","canvas","width","height","getTileRenderTransform","renderDeferredInternal","acc","forEach","executorGroupZIndexContexts","getDeferredZIndexContexts","usedZIndices","executorGroupZindexContext","zIndexKeys","Object","keys","Number","zIndex","zIndexContexts","zIndexContext","getRenderedContext","tileClipContext","draw","restore","clear","center","size","Math","round","worldOffset","transform","inversePixelTransform","postRender","pixelToCoordinateTransform","layerStatesArray","layerIndex","renderMode","replayTypes","filter","type","includes","tileSource","clips","clipZs","tileClipContexts","ready","group","hasExecutors","currentZ","contextSaved","currentClip","getClipCoords","clipContext","getContext","jj","clip","save","beginPath","moveTo","lineTo","loading","Array","isArray","replayState","renderedTileResolution","renderedTileRevision","tileResolution","getResolution","renderPixelRatio","max","getTilePixelSize","renderScale","canvasTransform","setTransform","pixelScale"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/node_modules/ol/renderer/canvas/VectorTileLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/VectorTileLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasExecutorGroup, {\n  DECLUTTER,\n} from '../../render/canvas/ExecutorGroup.js';\nimport CanvasTileLayerRenderer from './TileLayer.js';\nimport TileState from '../../TileState.js';\nimport ViewHint from '../../ViewHint.js';\nimport ZIndexContext from '../../render/canvas/ZIndexContext.js';\nimport {\n  HIT_DETECT_RESOLUTION,\n  createHitDetectionImageData,\n  hitDetect,\n} from '../../render/canvas/hitdetect.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n  multiply,\n  reset as resetTransform,\n  scale,\n  scale as scaleTransform,\n  translate as translateTransform,\n} from '../../transform.js';\nimport {ascending} from '../../array.js';\nimport {\n  boundingExtent,\n  buffer,\n  containsExtent,\n  equals,\n  getIntersection,\n  getTopLeft,\n  intersects,\n} from '../../extent.js';\nimport {\n  getSquaredTolerance as getSquaredRenderTolerance,\n  renderFeature,\n} from '../vector.js';\nimport {getUid} from '../../util.js';\nimport {toSize} from '../../size.js';\nimport {wrapX} from '../../coordinate.js';\n\n/**\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\n */\nconst IMAGE_REPLAYS = {\n  'image': ['Polygon', 'Circle', 'LineString', 'Image', 'Text'],\n  'hybrid': ['Polygon', 'LineString'],\n  'vector': [],\n};\n\n/**\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\n */\nconst VECTOR_REPLAYS = {\n  'hybrid': ['Image', 'Text', 'Default'],\n  'vector': ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'],\n};\n\n/**\n * @classdesc\n * Canvas renderer for vector tile layers.\n * @api\n * @extends {CanvasTileLayerRenderer<import(\"../../layer/VectorTile.js\").default>}\n */\nclass CanvasVectorTileLayerRenderer extends CanvasTileLayerRenderer {\n  /**\n   * @param {import(\"../../layer/VectorTile.js\").default} layer VectorTile layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedLayerRevision_;\n\n    /**\n     * @private\n     * @type {import(\"../../transform\").Transform}\n     */\n    this.renderedPixelToCoordinateTransform_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedOpacity_ = 1;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tmpTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {Array<ZIndexContext>}\n     */\n    this.tileClipContexts_ = null;\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection\").default} projection Projection.\n   * @return {boolean|undefined} Tile needs to be rendered.\n   */\n  prepareTile(tile, pixelRatio, projection) {\n    let render;\n    const state = tile.getState();\n    if (state === TileState.LOADED || state === TileState.ERROR) {\n      this.updateExecutorGroup_(tile, pixelRatio, projection);\n      if (this.tileImageNeedsRender_(tile)) {\n        render = true;\n      }\n    }\n    return render;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {!import(\"../../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const layer = this.getLayer();\n    const tile = layer.getSource().getTile(z, x, y, pixelRatio, projection);\n    const viewHints = frameState.viewHints;\n    const hifi = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n    if (hifi || !tile.wantedResolution) {\n      tile.wantedResolution = resolution;\n    }\n    const render = this.prepareTile(tile, pixelRatio, projection);\n    if (\n      render &&\n      (hifi || Date.now() - frameState.time < 8) &&\n      layer.getRenderMode() !== 'vector'\n    ) {\n      this.renderTileImage_(tile, frameState);\n    }\n    return super.getTile(z, x, y, frameState);\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @return {boolean} Tile is drawable.\n   */\n  isDrawableTile(tile) {\n    const layer = this.getLayer();\n    return (\n      super.isDrawableTile(tile) &&\n      (layer.getRenderMode() === 'vector'\n        ? getUid(layer) in tile.executorGroups\n        : tile.hasContext(layer))\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTileImage(tile) {\n    return tile.getImage(this.getLayer());\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const layerRevision = this.getLayer().getRevision();\n    if (this.renderedLayerRevision_ !== layerRevision) {\n      this.renderedLayerRevision_ = layerRevision;\n      this.renderedTiles.length = 0;\n    }\n    return super.prepareFrame(frameState);\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n   * @private\n   */\n  updateExecutorGroup_(tile, pixelRatio, projection) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\n      this.getLayer()\n    );\n    const revision = layer.getRevision();\n    const renderOrder = layer.getRenderOrder() || null;\n\n    const resolution = tile.wantedResolution;\n    const builderState = tile.getReplayState(layer);\n    if (\n      !builderState.dirty &&\n      builderState.renderedResolution === resolution &&\n      builderState.renderedRevision == revision &&\n      builderState.renderedRenderOrder == renderOrder\n    ) {\n      return;\n    }\n\n    const source = layer.getSource();\n    const declutter = !!layer.getDeclutter();\n    const sourceTileGrid = source.getTileGrid();\n    const tileGrid = source.getTileGridForProjection(projection);\n    const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n\n    const sourceTiles = source.getSourceTiles(pixelRatio, projection, tile);\n    const layerUid = getUid(layer);\n    delete tile.hitDetectionImageData[layerUid];\n    tile.executorGroups[layerUid] = [];\n    builderState.dirty = false;\n    for (let t = 0, tt = sourceTiles.length; t < tt; ++t) {\n      const sourceTile = sourceTiles[t];\n      if (sourceTile.getState() != TileState.LOADED) {\n        continue;\n      }\n      const sourceTileCoord = sourceTile.tileCoord;\n      const sourceTileExtent =\n        sourceTileGrid.getTileCoordExtent(sourceTileCoord);\n      const sharedExtent = getIntersection(tileExtent, sourceTileExtent);\n      const builderExtent = buffer(\n        sharedExtent,\n        layer.getRenderBuffer() * resolution,\n        this.tmpExtent,\n      );\n      const bufferedExtent = equals(sourceTileExtent, sharedExtent)\n        ? null\n        : builderExtent;\n      const builderGroup = new CanvasBuilderGroup(\n        0,\n        sharedExtent,\n        resolution,\n        pixelRatio,\n      );\n      const squaredTolerance = getSquaredRenderTolerance(\n        resolution,\n        pixelRatio,\n      );\n\n      /**\n       * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n       * @param {number} [index] Render order index.\n       * @this {CanvasVectorTileLayerRenderer}\n       */\n      const render = function (feature, index) {\n        let styles;\n        const styleFunction =\n          feature.getStyleFunction() || layer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(\n            feature,\n            squaredTolerance,\n            styles,\n            builderGroup,\n            declutter,\n            index,\n          );\n          builderState.dirty = builderState.dirty || dirty;\n        }\n      };\n\n      const features = sourceTile.getFeatures();\n      if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {\n        features.sort(renderOrder);\n      }\n      for (let i = 0, ii = features.length; i < ii; ++i) {\n        const feature = features[i];\n        if (\n          !bufferedExtent ||\n          intersects(bufferedExtent, feature.getGeometry().getExtent())\n        ) {\n          render.call(this, feature, i);\n        }\n      }\n      const executorGroupInstructions = builderGroup.finish();\n      // no need to clip when the render tile is covered by a single source tile\n      const replayExtent =\n        layer.getRenderMode() !== 'vector' &&\n        declutter &&\n        sourceTiles.length === 1\n          ? null\n          : sharedExtent;\n      const renderingReplayGroup = new CanvasExecutorGroup(\n        replayExtent,\n        resolution,\n        pixelRatio,\n        source.getOverlaps(),\n        executorGroupInstructions,\n        layer.getRenderBuffer(),\n        true,\n      );\n      tile.executorGroups[layerUid].push(renderingReplayGroup);\n    }\n    builderState.renderedRevision = revision;\n    builderState.renderedRenderOrder = renderOrder;\n    builderState.renderedResolution = resolution;\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches,\n  ) {\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;\n    const layer = this.getLayer();\n    const source = layer.getSource();\n    const tileGrid = source.getTileGridForProjection(\n      frameState.viewState.projection,\n    );\n\n    const hitExtent = boundingExtent([coordinate]);\n    buffer(hitExtent, resolution * hitTolerance, hitExtent);\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position.\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      let key = feature.getId();\n      if (key === undefined) {\n        key = getUid(feature);\n      }\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(\n          (features[key] = {\n            feature: feature,\n            layer: layer,\n            geometry: geometry,\n            distanceSq: distanceSq,\n            callback: callback,\n          }),\n        );\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n\n    const renderedTiles =\n      /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (\n        this.renderedTiles\n      );\n\n    let found;\n    for (let i = 0, ii = renderedTiles.length; !found && i < ii; ++i) {\n      const tile = renderedTiles[i];\n      const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n      if (!intersects(tileExtent, hitExtent)) {\n        continue;\n      }\n\n      const layerUid = getUid(layer);\n      const executorGroups = [tile.executorGroups[layerUid]];\n      const declutter = layer.getDeclutter();\n      executorGroups.some((executorGroups) => {\n        const declutteredFeatures = declutter\n          ? frameState.declutter[declutter].all().map((item) => item.value)\n          : null;\n        for (let t = 0, tt = executorGroups.length; t < tt; ++t) {\n          const executorGroup = executorGroups[t];\n          found = executorGroup.forEachFeatureAtCoordinate(\n            coordinate,\n            resolution,\n            rotation,\n            hitTolerance,\n            featureCallback,\n            declutteredFeatures,\n          );\n          if (found) {\n            return true;\n          }\n        }\n      });\n    }\n    return found;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature.js\").FeatureLike>>} Promise that resolves with an array of features.\n   */\n  getFeatures(pixel) {\n    return new Promise((resolve, reject) => {\n      const layer = this.getLayer();\n      const layerUid = getUid(layer);\n      const source = layer.getSource();\n      const projection = this.renderedProjection;\n      const projectionExtent = projection.getExtent();\n      const resolution = this.renderedResolution;\n      const tileGrid = source.getTileGridForProjection(projection);\n      const coordinate = applyTransform(\n        this.renderedPixelToCoordinateTransform_,\n        pixel.slice(),\n      );\n      const tileCoord = tileGrid.getTileCoordForCoordAndResolution(\n        coordinate,\n        resolution,\n      );\n      /** @type {import(\"../../VectorRenderTile.js\").default|undefined} */\n      let tile;\n      for (let i = 0, ii = this.renderedTiles.length; i < ii; ++i) {\n        if (\n          tileCoord.toString() === this.renderedTiles[i].tileCoord.toString()\n        ) {\n          tile = /** @type {import(\"../../VectorRenderTile.js\").default} */ (\n            this.renderedTiles[i]\n          );\n          if (tile.getState() === TileState.LOADED) {\n            const extent = tileGrid.getTileCoordExtent(tile.tileCoord);\n            if (\n              source.getWrapX() &&\n              projection.canWrapX() &&\n              !containsExtent(projectionExtent, extent)\n            ) {\n              wrapX(coordinate, projection);\n            }\n            break;\n          }\n          tile = undefined;\n        }\n      }\n      if (!tile || tile.loadingSourceTiles > 0) {\n        resolve([]);\n        return;\n      }\n      const extent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n      const corner = getTopLeft(extent);\n      const tilePixel = [\n        (coordinate[0] - corner[0]) / resolution,\n        (corner[1] - coordinate[1]) / resolution,\n      ];\n      /** @type {Array<import(\"../../Feature.js\").FeatureLike>} */\n      const features = tile.getSourceTiles().reduce(function (\n        accumulator,\n        sourceTile,\n      ) {\n        return accumulator.concat(sourceTile.getFeatures());\n      }, []);\n      /** @type {ImageData|undefined} */\n      let hitDetectionImageData = tile.hitDetectionImageData[layerUid];\n      if (!hitDetectionImageData) {\n        const tileSize = toSize(\n          tileGrid.getTileSize(\n            tileGrid.getZForResolution(resolution, source.zDirection),\n          ),\n        );\n        const rotation = this.renderedRotation_;\n        const transforms = [\n          this.getRenderTransform(\n            tileGrid.getTileCoordCenter(tile.wrappedTileCoord),\n            resolution,\n            0,\n            HIT_DETECT_RESOLUTION,\n            tileSize[0] * HIT_DETECT_RESOLUTION,\n            tileSize[1] * HIT_DETECT_RESOLUTION,\n            0,\n          ),\n        ];\n        hitDetectionImageData = createHitDetectionImageData(\n          tileSize,\n          transforms,\n          features,\n          layer.getStyleFunction(),\n          tileGrid.getTileCoordExtent(tile.wrappedTileCoord),\n          tile.getReplayState(layer).renderedResolution,\n          rotation,\n        );\n        tile.hitDetectionImageData[layerUid] = hitDetectionImageData;\n      }\n      resolve(hitDetect(tilePixel, features, hitDetectionImageData));\n    });\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   */\n  renderDeclutter(frameState, layerState) {\n    const context = this.context;\n    const alpha = context.globalAlpha;\n    context.globalAlpha = layerState.opacity;\n    const viewHints = frameState.viewHints;\n    const hifi = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n    const tiles =\n      /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (\n        this.renderedTiles\n      );\n    for (let i = 0, ii = tiles.length; i < ii; ++i) {\n      const tile = tiles[i];\n      const executorGroups = tile.executorGroups[getUid(this.getLayer())];\n      const declutter = this.getLayer().getDeclutter();\n      if (executorGroups) {\n        for (let j = executorGroups.length - 1; j >= 0; --j) {\n          executorGroups[j].execute(\n            this.context,\n            [this.context.canvas.width, this.context.canvas.height],\n            this.getTileRenderTransform(tile, frameState),\n            frameState.viewState.rotation,\n            hifi,\n            DECLUTTER,\n            declutter ? frameState.declutter[declutter] : undefined,\n          );\n        }\n      }\n    }\n    context.globalAlpha = alpha;\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeferredInternal(frameState) {\n    const tiles =\n      /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (\n        this.renderedTiles\n      );\n    const executorGroups = tiles.reduce((acc, tile, index) => {\n      tile.executorGroups[getUid(this.getLayer())].forEach((executorGroup) =>\n        acc.push({\n          executorGroup,\n          index,\n        }),\n      );\n      return acc;\n    }, []);\n\n    const executorGroupZIndexContexts = executorGroups.map(({executorGroup}) =>\n      executorGroup.getDeferredZIndexContexts(),\n    );\n    const usedZIndices = {};\n    for (let i = 0, ii = executorGroups.length; i < ii; ++i) {\n      const executorGroupZindexContext =\n        executorGroups[i].executorGroup.getDeferredZIndexContexts();\n      for (const key in executorGroupZindexContext) {\n        usedZIndices[key] = true;\n      }\n    }\n    const zIndexKeys = Object.keys(usedZIndices).sort(ascending);\n    zIndexKeys.map(Number).forEach((zIndex) => {\n      executorGroupZIndexContexts.forEach((zIndexContexts, i) => {\n        if (!zIndexContexts[zIndex]) {\n          return;\n        }\n        zIndexContexts[zIndex].forEach((zIndexContext) => {\n          const {executorGroup, index} = executorGroups[i];\n          const context = executorGroup.getRenderedContext();\n          const alpha = context.globalAlpha;\n          context.globalAlpha = this.renderedOpacity_;\n          const tileClipContext = this.tileClipContexts_[index];\n          if (tileClipContext) {\n            tileClipContext.draw(context);\n          }\n          zIndexContext.draw(context);\n          if (tileClipContext) {\n            context.restore();\n          }\n          context.globalAlpha = alpha;\n          zIndexContext.clear();\n        });\n        zIndexContexts[zIndex].length = 0;\n      });\n    });\n  }\n\n  getTileRenderTransform(tile, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const rotation = viewState.rotation;\n    const size = frameState.size;\n    const width = Math.round(size[0] * pixelRatio);\n    const height = Math.round(size[1] * pixelRatio);\n\n    const source = this.getLayer().getSource();\n    const tileGrid = source.getTileGridForProjection(\n      frameState.viewState.projection,\n    );\n    const tileCoord = tile.tileCoord;\n    const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n    const worldOffset =\n      tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tileExtent[0];\n    const transform = multiply(\n      scale(this.inversePixelTransform.slice(), 1 / pixelRatio, 1 / pixelRatio),\n      this.getRenderTransform(\n        center,\n        resolution,\n        rotation,\n        pixelRatio,\n        width,\n        height,\n        worldOffset,\n      ),\n    );\n    return transform;\n  }\n\n  /**\n   * Render the vectors for this layer.\n   * @param {CanvasRenderingContext2D} context Target context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  postRender(context, frameState) {\n    const viewHints = frameState.viewHints;\n    const hifi = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n\n    this.renderedPixelToCoordinateTransform_ =\n      frameState.pixelToCoordinateTransform.slice();\n    this.renderedRotation_ = frameState.viewState.rotation;\n    this.renderedOpacity_ =\n      frameState.layerStatesArray[frameState.layerIndex].opacity;\n\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\n      this.getLayer()\n    );\n    const renderMode = layer.getRenderMode();\n    const alpha = context.globalAlpha;\n    context.globalAlpha = this.renderedOpacity_;\n    const declutter = layer.getDeclutter();\n    const replayTypes = declutter\n      ? VECTOR_REPLAYS[renderMode].filter((type) => !DECLUTTER.includes(type))\n      : VECTOR_REPLAYS[renderMode];\n    const viewState = frameState.viewState;\n    const rotation = viewState.rotation;\n    const tileSource = layer.getSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const z = tileGrid.getZForResolution(\n      viewState.resolution,\n      tileSource.zDirection,\n    );\n\n    const tiles = this.renderedTiles;\n    const clips = [];\n    const clipZs = [];\n    const tileClipContexts = [];\n    let ready = true;\n    for (let i = tiles.length - 1; i >= 0; --i) {\n      const tile = /** @type {import(\"../../VectorRenderTile.js\").default} */ (\n        tiles[i]\n      );\n      ready = ready && !tile.getReplayState(layer).dirty;\n      const executorGroups = tile.executorGroups[getUid(layer)].filter(\n        (group) => group.hasExecutors(replayTypes),\n      );\n      if (executorGroups.length === 0) {\n        continue;\n      }\n      const transform = this.getTileRenderTransform(tile, frameState);\n      const currentZ = tile.tileCoord[0];\n      let contextSaved = false;\n      // Clip mask for regions in this tile that already filled by a higher z tile\n      const currentClip = executorGroups[0].getClipCoords(transform);\n      let clipContext = context;\n      let tileClipContext;\n      if (currentClip) {\n        tileClipContext = new ZIndexContext();\n        clipContext = tileClipContext.getContext();\n        for (let j = 0, jj = clips.length; j < jj; ++j) {\n          if (z !== currentZ && currentZ < clipZs[j]) {\n            const clip = clips[j];\n            if (\n              intersects(\n                [\n                  currentClip[0],\n                  currentClip[3],\n                  currentClip[4],\n                  currentClip[7],\n                ],\n                [clip[0], clip[3], clip[4], clip[7]],\n              )\n            ) {\n              if (!contextSaved) {\n                clipContext.save();\n                contextSaved = true;\n              }\n              clipContext.beginPath();\n              // counter-clockwise (outer ring) for current tile\n              clipContext.moveTo(currentClip[0], currentClip[1]);\n              clipContext.lineTo(currentClip[2], currentClip[3]);\n              clipContext.lineTo(currentClip[4], currentClip[5]);\n              clipContext.lineTo(currentClip[6], currentClip[7]);\n              // clockwise (inner ring) for higher z tile\n              clipContext.moveTo(clip[6], clip[7]);\n              clipContext.lineTo(clip[4], clip[5]);\n              clipContext.lineTo(clip[2], clip[3]);\n              clipContext.lineTo(clip[0], clip[1]);\n              clipContext.clip();\n            }\n          }\n        }\n        clips.push(currentClip);\n        clipZs.push(currentZ);\n      }\n      for (let t = 0, tt = executorGroups.length; t < tt; ++t) {\n        const executorGroup = executorGroups[t];\n        executorGroup.execute(\n          context,\n          [context.canvas.width, context.canvas.height],\n          transform,\n          rotation,\n          hifi,\n          replayTypes,\n          frameState.declutter?.[declutter],\n        );\n      }\n      if (contextSaved) {\n        if (clipContext === context) {\n          clipContext.restore();\n        } else {\n          tileClipContexts[i] = tileClipContext;\n        }\n      }\n    }\n    context.globalAlpha = alpha;\n    this.ready = ready;\n    this.tileClipContexts_ = tileClipContexts;\n    if (!frameState.declutter) {\n      this.renderDeferredInternal(frameState);\n    }\n\n    super.postRender(context, frameState);\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n   * @param {boolean} [declutter] Enable decluttering.\n   * @param {number} [index] Render order index.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(\n    feature,\n    squaredTolerance,\n    styles,\n    builderGroup,\n    declutter,\n    index,\n  ) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading =\n          renderFeature(\n            builderGroup,\n            feature,\n            styles[i],\n            squaredTolerance,\n            this.boundHandleStyleImageChange_,\n            undefined,\n            declutter,\n            index,\n          ) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        builderGroup,\n        feature,\n        styles,\n        squaredTolerance,\n        this.boundHandleStyleImageChange_,\n        undefined,\n        declutter,\n        index,\n      );\n    }\n    return loading;\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @return {boolean} A new tile image was rendered.\n   * @private\n   */\n  tileImageNeedsRender_(tile) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\n      this.getLayer()\n    );\n    if (layer.getRenderMode() === 'vector') {\n      return false;\n    }\n    const replayState = tile.getReplayState(layer);\n    const revision = layer.getRevision();\n    const resolution = tile.wantedResolution;\n    return (\n      replayState.renderedTileResolution !== resolution ||\n      replayState.renderedTileRevision !== revision\n    );\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\n   * @private\n   */\n  renderTileImage_(tile, frameState) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\n      this.getLayer()\n    );\n    const replayState = tile.getReplayState(layer);\n    const revision = layer.getRevision();\n    const executorGroups = tile.executorGroups[getUid(layer)];\n    replayState.renderedTileRevision = revision;\n\n    const tileCoord = tile.wrappedTileCoord;\n    const z = tileCoord[0];\n    const source = layer.getSource();\n    let pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const tileGrid = source.getTileGridForProjection(projection);\n    const tileResolution = tileGrid.getResolution(tile.tileCoord[0]);\n    const renderPixelRatio =\n      (frameState.pixelRatio / tile.wantedResolution) * tileResolution;\n    const resolution = tileGrid.getResolution(z);\n    const context = tile.getContext(layer);\n\n    // Increase tile size when overzooming for low pixel ratio, to avoid blurry tiles\n    pixelRatio = Math.round(\n      Math.max(pixelRatio, renderPixelRatio / pixelRatio),\n    );\n    const size = source.getTilePixelSize(z, pixelRatio, projection);\n    context.canvas.width = size[0];\n    context.canvas.height = size[1];\n    const renderScale = pixelRatio / renderPixelRatio;\n    if (renderScale !== 1) {\n      const canvasTransform = resetTransform(this.tmpTransform_);\n      scaleTransform(canvasTransform, renderScale, renderScale);\n      context.setTransform.apply(context, canvasTransform);\n    }\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);\n    const pixelScale = renderPixelRatio / resolution;\n    const transform = resetTransform(this.tmpTransform_);\n    scaleTransform(transform, pixelScale, -pixelScale);\n    translateTransform(transform, -tileExtent[0], -tileExtent[3]);\n    for (let i = 0, ii = executorGroups.length; i < ii; ++i) {\n      const executorGroup = executorGroups[i];\n      executorGroup.execute(\n        context,\n        [\n          context.canvas.width * renderScale,\n          context.canvas.height * renderScale,\n        ],\n        transform,\n        0,\n        true,\n        IMAGE_REPLAYS[layer.getRenderMode()],\n        null,\n      );\n    }\n    replayState.renderedTileResolution = tile.wantedResolution;\n  }\n}\n\nexport default CanvasVectorTileLayerRenderer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}