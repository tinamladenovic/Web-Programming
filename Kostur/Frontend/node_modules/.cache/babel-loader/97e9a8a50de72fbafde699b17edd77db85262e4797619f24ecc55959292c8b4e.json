{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/**\n * @module ol/reproj/DataTile\n */\nimport { ERROR_THRESHOLD } from './common.js';\nimport DataTile, { asArrayLike, asImageLike, toArray } from '../DataTile.js';\nimport EventType from '../events/EventType.js';\nimport TileState from '../TileState.js';\nimport Triangulation from './Triangulation.js';\nimport { calculateSourceExtentResolution, canvasPool, render as renderReprojected } from '../reproj.js';\nimport { clamp } from '../math.js';\nimport { createCanvasContext2D, releaseCanvas } from '../dom.js';\nimport { getArea, getIntersection, getWidth, wrapAndSliceX } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n\n/**\n * @typedef {function(number, number, number, number) : import(\"../DataTile.js\").default} TileGetter\n */\n\n/**\n * @typedef {Object} TileOffset\n * @property {DataTile} tile Tile.\n * @property {number} offset Offset.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n * @property {import(\"../proj/Projection.js\").default} targetProj Target projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n * @property {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n * @property {import(\"../tilecoord.js\").TileCoord} [wrappedTileCoord] Coordinate of the tile wrapped in X.\n * @property {number} pixelRatio Pixel ratio.\n * @property {number} gutter Gutter of the source tiles.\n * @property {TileGetter} getTileFunction Function returning source tiles (z, x, y, pixelRatio).\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @property {number} [errorThreshold] Acceptable reprojection error (in px).\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected data tile.\n * See {@link module:ol/source/DataTile~DataTileSource}.\n *\n */\nclass ReprojDataTile extends DataTile {\n  /**\n   * @param {Options} options Tile options.\n   */\n  constructor(options) {\n    super({\n      tileCoord: options.tileCoord,\n      loader: () => Promise.resolve(new Uint8Array(4)),\n      interpolate: options.interpolate,\n      transition: options.transition\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = options.pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter;\n\n    /**\n     * @type {import(\"../DataTile.js\").Data}\n     * @private\n     */\n    this.reprojData_ = null;\n\n    /**\n     * @type {Error}\n     * @private\n     */\n    this.reprojError_ = null;\n\n    /**\n     * @type {import('../size.js').Size}\n     * @private\n     */\n    this.reprojSize_ = undefined;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.sourceTileGrid_ = options.sourceTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.targetTileGrid_ = options.targetTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */\n    this.wrappedTileCoord_ = options.wrappedTileCoord || options.tileCoord;\n\n    /**\n     * @private\n     * @type {!Array<TileOffset>}\n     */\n    this.sourceTiles_ = [];\n\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    this.sourcesListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourceZ_ = 0;\n    const sourceProj = options.sourceProj;\n    const sourceProjExtent = sourceProj.getExtent();\n    const sourceTileGridExtent = options.sourceTileGrid.getExtent();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.clipExtent_ = sourceProj.canWrapX() ? sourceTileGridExtent ? getIntersection(sourceProjExtent, sourceTileGridExtent) : sourceProjExtent : sourceTileGridExtent;\n    const targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\n    const limitedTargetExtent = maxTargetExtent ? getIntersection(targetExtent, maxTargetExtent) : targetExtent;\n    if (getArea(limitedTargetExtent) === 0) {\n      // Tile is completely outside range -> EMPTY\n      // TODO: is it actually correct that the source even creates the tile ?\n      this.state = TileState.EMPTY;\n      return;\n    }\n    if (sourceProjExtent) {\n      if (!maxSourceExtent) {\n        maxSourceExtent = sourceProjExtent;\n      } else {\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\n      }\n    }\n    const targetResolution = this.targetTileGrid_.getResolution(this.wrappedTileCoord_[0]);\n    const targetProj = options.targetProj;\n    const sourceResolution = calculateSourceExtentResolution(sourceProj, targetProj, limitedTargetExtent, targetResolution);\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n      // invalid sourceResolution -> EMPTY\n      // probably edges of the projections when no extent is defined\n      this.state = TileState.EMPTY;\n      return;\n    }\n    const errorThresholdInPixels = options.errorThreshold !== undefined ? options.errorThreshold : ERROR_THRESHOLD;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);\n    if (this.triangulation_.getTriangles().length === 0) {\n      // no valid triangles -> EMPTY\n      this.state = TileState.EMPTY;\n      return;\n    }\n    this.sourceZ_ = this.sourceTileGrid_.getZForResolution(sourceResolution);\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\n    if (maxSourceExtent) {\n      if (sourceProj.canWrapX()) {\n        sourceExtent[1] = clamp(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);\n        sourceExtent[3] = clamp(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);\n      } else {\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\n      }\n    }\n    if (!getArea(sourceExtent)) {\n      this.state = TileState.EMPTY;\n    } else {\n      let worldWidth = 0;\n      let worldsAway = 0;\n      if (sourceProj.canWrapX()) {\n        worldWidth = getWidth(sourceProjExtent);\n        worldsAway = Math.floor((sourceExtent[0] - sourceProjExtent[0]) / worldWidth);\n      }\n      const sourceExtents = wrapAndSliceX(sourceExtent.slice(), sourceProj, true);\n      sourceExtents.forEach(extent => {\n        const sourceRange = this.sourceTileGrid_.getTileRangeForExtentAndZ(extent, this.sourceZ_);\n        const getTile = options.getTileFunction;\n        for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\n          for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\n            const tile = getTile(this.sourceZ_, srcX, srcY, this.pixelRatio_);\n            if (tile) {\n              const offset = worldsAway * worldWidth;\n              this.sourceTiles_.push({\n                tile,\n                offset\n              });\n            }\n          }\n        }\n        ++worldsAway;\n      });\n      if (this.sourceTiles_.length === 0) {\n        this.state = TileState.EMPTY;\n      }\n    }\n  }\n\n  /**\n   * Get the tile size.\n   * @return {import('../size.js').Size} Tile size.\n   */\n  getSize() {\n    return this.reprojSize_;\n  }\n\n  /**\n   * Get the data for the tile.\n   * @return {import(\"../DataTile.js\").Data} Tile data.\n   */\n  getData() {\n    return this.reprojData_;\n  }\n\n  /**\n   * Get any loading error.\n   * @return {Error} Loading error.\n   */\n  getError() {\n    return this.reprojError_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const dataSources = [];\n    this.sourceTiles_.forEach(source => {\n      const tile = source.tile;\n      if (!tile || tile.getState() !== TileState.LOADED) {\n        return;\n      }\n      const size = tile.getSize();\n      const gutter = this.gutter_;\n      /**\n       * @type {import(\"../DataTile.js\").ArrayLike}\n       */\n      let tileData;\n      const arrayData = asArrayLike(tile.getData());\n      if (arrayData) {\n        tileData = arrayData;\n      } else {\n        tileData = toArray(asImageLike(tile.getData()));\n      }\n      const pixelSize = [size[0] + 2 * gutter, size[1] + 2 * gutter];\n      const isFloat = tileData instanceof Float32Array;\n      const pixelCount = pixelSize[0] * pixelSize[1];\n      const DataType = isFloat ? Float32Array : Uint8Array;\n      const tileDataR = new DataType(tileData.buffer);\n      const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n      const bytesPerPixel = bytesPerElement * tileDataR.length / pixelCount;\n      const bytesPerRow = tileDataR.byteLength / pixelSize[1];\n      const bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n      const packedLength = pixelCount * bandCount;\n      let packedData = tileDataR;\n      if (tileDataR.length !== packedLength) {\n        packedData = new DataType(packedLength);\n        let dataIndex = 0;\n        let rowOffset = 0;\n        const colCount = pixelSize[0] * bandCount;\n        for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n          for (let colIndex = 0; colIndex < colCount; ++colIndex) {\n            packedData[dataIndex++] = tileDataR[rowOffset + colIndex];\n          }\n          rowOffset += bytesPerRow / bytesPerElement;\n        }\n      }\n      const extent = this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord);\n      extent[0] += source.offset;\n      extent[2] += source.offset;\n      const clipExtent = this.clipExtent_?.slice();\n      if (clipExtent) {\n        clipExtent[0] += source.offset;\n        clipExtent[2] += source.offset;\n      }\n      dataSources.push({\n        extent: extent,\n        clipExtent: clipExtent,\n        data: new Uint8Array(packedData.buffer),\n        dataType: DataType,\n        bytesPerPixel: bytesPerPixel,\n        pixelSize: pixelSize\n      });\n    });\n    this.sourceTiles_.length = 0;\n    if (dataSources.length === 0) {\n      this.state = TileState.ERROR;\n    } else {\n      const z = this.wrappedTileCoord_[0];\n      const size = this.targetTileGrid_.getTileSize(z);\n      const targetWidth = typeof size === 'number' ? size : size[0];\n      const targetHeight = typeof size === 'number' ? size : size[1];\n      const targetResolution = this.targetTileGrid_.getResolution(z);\n      const sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);\n      let dataR, dataU;\n      const bytesPerPixel = dataSources[0].bytesPerPixel;\n      const reprojs = Math.ceil(bytesPerPixel / 3);\n      for (let reproj = reprojs - 1; reproj >= 0; --reproj) {\n        const sources = [];\n        for (let i = 0, len = dataSources.length; i < len; ++i) {\n          const dataSource = dataSources[i];\n          const buffer = dataSource.data;\n          const pixelSize = dataSource.pixelSize;\n          const width = pixelSize[0];\n          const height = pixelSize[1];\n          const context = createCanvasContext2D(width, height, canvasPool);\n          const imageData = context.createImageData(width, height);\n          const data = imageData.data;\n          let offset = reproj * 3;\n          for (let j = 0, len = data.length; j < len; j += 4) {\n            data[j] = buffer[offset];\n            data[j + 1] = buffer[offset + 1];\n            data[j + 2] = buffer[offset + 2];\n            data[j + 3] = 255;\n            offset += bytesPerPixel;\n          }\n          context.putImageData(imageData, 0, 0);\n          sources.push({\n            extent: dataSource.extent,\n            clipExtent: dataSource.clipExtent,\n            image: context.canvas\n          });\n        }\n        const canvas = renderReprojected(targetWidth, targetHeight, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, false, false, false\n        //true,\n        );\n        for (let i = 0, len = sources.length; i < len; ++i) {\n          const canvas = sources[i].image;\n          const context = canvas.getContext('2d');\n          releaseCanvas(context);\n          canvasPool.push(context.canvas);\n        }\n        const context = canvas.getContext('2d');\n        const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n        releaseCanvas(context);\n        canvasPool.push(canvas);\n        if (!dataR) {\n          dataU = new Uint8Array(bytesPerPixel * imageData.width * imageData.height);\n          dataR = new dataSources[0].dataType(dataU.buffer);\n        }\n        const data = imageData.data;\n        let offset = reproj * 3;\n        for (let i = 0, len = data.length; i < len; i += 4) {\n          if (data[i + 3] === 255) {\n            dataU[offset] = data[i];\n            dataU[offset + 1] = data[i + 1];\n            dataU[offset + 2] = data[i + 2];\n          } else {\n            dataU[offset] = 0;\n            dataU[offset + 1] = 0;\n            dataU[offset + 2] = 0;\n          }\n          offset += bytesPerPixel;\n        }\n      }\n      this.reprojData_ = dataR;\n      this.reprojSize_ = [Math.round(targetWidth * this.pixelRatio_), Math.round(targetHeight * this.pixelRatio_)];\n      this.state = TileState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state !== TileState.IDLE && this.state !== TileState.ERROR) {\n      return;\n    }\n    this.state = TileState.LOADING;\n    this.changed();\n    let leftToLoad = 0;\n    this.sourcesListenerKeys_ = [];\n    this.sourceTiles_.forEach(({\n      tile\n    }) => {\n      const state = tile.getState();\n      if (state !== TileState.IDLE && state !== TileState.LOADING) {\n        return;\n      }\n      leftToLoad++;\n      const sourceListenKey = listen(tile, EventType.CHANGE, function () {\n        const state = tile.getState();\n        if (state == TileState.LOADED || state == TileState.ERROR || state == TileState.EMPTY) {\n          unlistenByKey(sourceListenKey);\n          leftToLoad--;\n          if (leftToLoad === 0) {\n            this.unlistenSources_();\n            this.reproject_();\n          }\n        }\n      }, this);\n      this.sourcesListenerKeys_.push(sourceListenKey);\n    });\n    if (leftToLoad === 0) {\n      setTimeout(this.reproject_.bind(this), 0);\n    } else {\n      this.sourceTiles_.forEach(function ({\n        tile\n      }) {\n        const state = tile.getState();\n        if (state == TileState.IDLE) {\n          tile.load();\n        }\n      });\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSources_() {\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\n    this.sourcesListenerKeys_ = null;\n  }\n}\nexport default ReprojDataTile;","map":{"version":3,"names":["ERROR_THRESHOLD","DataTile","asArrayLike","asImageLike","toArray","EventType","TileState","Triangulation","calculateSourceExtentResolution","canvasPool","render","renderReprojected","clamp","createCanvasContext2D","releaseCanvas","getArea","getIntersection","getWidth","wrapAndSliceX","listen","unlistenByKey","ReprojDataTile","constructor","options","tileCoord","loader","Promise","resolve","Uint8Array","interpolate","transition","pixelRatio_","pixelRatio","gutter_","gutter","reprojData_","reprojError_","reprojSize_","undefined","sourceTileGrid_","sourceTileGrid","targetTileGrid_","targetTileGrid","wrappedTileCoord_","wrappedTileCoord","sourceTiles_","sourcesListenerKeys_","sourceZ_","sourceProj","sourceProjExtent","getExtent","sourceTileGridExtent","clipExtent_","canWrapX","targetExtent","getTileCoordExtent","maxTargetExtent","maxSourceExtent","limitedTargetExtent","state","EMPTY","targetResolution","getResolution","targetProj","sourceResolution","isFinite","errorThresholdInPixels","errorThreshold","triangulation_","getTriangles","length","getZForResolution","sourceExtent","calculateSourceExtent","worldWidth","worldsAway","Math","floor","sourceExtents","slice","forEach","extent","sourceRange","getTileRangeForExtentAndZ","getTile","getTileFunction","srcX","minX","maxX","srcY","minY","maxY","tile","offset","push","getSize","getData","getError","reproject_","dataSources","source","getState","LOADED","size","tileData","arrayData","pixelSize","isFloat","Float32Array","pixelCount","DataType","tileDataR","buffer","bytesPerElement","BYTES_PER_ELEMENT","bytesPerPixel","bytesPerRow","byteLength","bandCount","packedLength","packedData","dataIndex","rowOffset","colCount","rowIndex","colIndex","clipExtent","data","dataType","ERROR","z","getTileSize","targetWidth","targetHeight","dataR","dataU","reprojs","ceil","reproj","sources","i","len","dataSource","width","height","context","imageData","createImageData","j","putImageData","image","canvas","getContext","getImageData","round","changed","load","IDLE","LOADING","leftToLoad","sourceListenKey","CHANGE","unlistenSources_","setTimeout","bind"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/node_modules/ol/reproj/DataTile.js"],"sourcesContent":["/**\n * @module ol/reproj/DataTile\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport DataTile, {asArrayLike, asImageLike, toArray} from '../DataTile.js';\nimport EventType from '../events/EventType.js';\nimport TileState from '../TileState.js';\nimport Triangulation from './Triangulation.js';\nimport {\n  calculateSourceExtentResolution,\n  canvasPool,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {clamp} from '../math.js';\nimport {createCanvasContext2D, releaseCanvas} from '../dom.js';\nimport {getArea, getIntersection, getWidth, wrapAndSliceX} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(number, number, number, number) : import(\"../DataTile.js\").default} TileGetter\n */\n\n/**\n * @typedef {Object} TileOffset\n * @property {DataTile} tile Tile.\n * @property {number} offset Offset.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n * @property {import(\"../proj/Projection.js\").default} targetProj Target projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n * @property {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n * @property {import(\"../tilecoord.js\").TileCoord} [wrappedTileCoord] Coordinate of the tile wrapped in X.\n * @property {number} pixelRatio Pixel ratio.\n * @property {number} gutter Gutter of the source tiles.\n * @property {TileGetter} getTileFunction Function returning source tiles (z, x, y, pixelRatio).\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @property {number} [errorThreshold] Acceptable reprojection error (in px).\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected data tile.\n * See {@link module:ol/source/DataTile~DataTileSource}.\n *\n */\nclass ReprojDataTile extends DataTile {\n  /**\n   * @param {Options} options Tile options.\n   */\n  constructor(options) {\n    super({\n      tileCoord: options.tileCoord,\n      loader: () => Promise.resolve(new Uint8Array(4)),\n      interpolate: options.interpolate,\n      transition: options.transition,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = options.pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter;\n\n    /**\n     * @type {import(\"../DataTile.js\").Data}\n     * @private\n     */\n    this.reprojData_ = null;\n\n    /**\n     * @type {Error}\n     * @private\n     */\n    this.reprojError_ = null;\n\n    /**\n     * @type {import('../size.js').Size}\n     * @private\n     */\n    this.reprojSize_ = undefined;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.sourceTileGrid_ = options.sourceTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.targetTileGrid_ = options.targetTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */\n    this.wrappedTileCoord_ = options.wrappedTileCoord || options.tileCoord;\n\n    /**\n     * @private\n     * @type {!Array<TileOffset>}\n     */\n    this.sourceTiles_ = [];\n\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    this.sourcesListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourceZ_ = 0;\n\n    const sourceProj = options.sourceProj;\n    const sourceProjExtent = sourceProj.getExtent();\n    const sourceTileGridExtent = options.sourceTileGrid.getExtent();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.clipExtent_ = sourceProj.canWrapX()\n      ? sourceTileGridExtent\n        ? getIntersection(sourceProjExtent, sourceTileGridExtent)\n        : sourceProjExtent\n      : sourceTileGridExtent;\n\n    const targetExtent = this.targetTileGrid_.getTileCoordExtent(\n      this.wrappedTileCoord_,\n    );\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    if (getArea(limitedTargetExtent) === 0) {\n      // Tile is completely outside range -> EMPTY\n      // TODO: is it actually correct that the source even creates the tile ?\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    if (sourceProjExtent) {\n      if (!maxSourceExtent) {\n        maxSourceExtent = sourceProjExtent;\n      } else {\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\n      }\n    }\n\n    const targetResolution = this.targetTileGrid_.getResolution(\n      this.wrappedTileCoord_[0],\n    );\n\n    const targetProj = options.targetProj;\n    const sourceResolution = calculateSourceExtentResolution(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      targetResolution,\n    );\n\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n      // invalid sourceResolution -> EMPTY\n      // probably edges of the projections when no extent is defined\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const errorThresholdInPixels =\n      options.errorThreshold !== undefined\n        ? options.errorThreshold\n        : ERROR_THRESHOLD;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution,\n    );\n\n    if (this.triangulation_.getTriangles().length === 0) {\n      // no valid triangles -> EMPTY\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    this.sourceZ_ = this.sourceTileGrid_.getZForResolution(sourceResolution);\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\n\n    if (maxSourceExtent) {\n      if (sourceProj.canWrapX()) {\n        sourceExtent[1] = clamp(\n          sourceExtent[1],\n          maxSourceExtent[1],\n          maxSourceExtent[3],\n        );\n        sourceExtent[3] = clamp(\n          sourceExtent[3],\n          maxSourceExtent[1],\n          maxSourceExtent[3],\n        );\n      } else {\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\n      }\n    }\n\n    if (!getArea(sourceExtent)) {\n      this.state = TileState.EMPTY;\n    } else {\n      let worldWidth = 0;\n      let worldsAway = 0;\n      if (sourceProj.canWrapX()) {\n        worldWidth = getWidth(sourceProjExtent);\n        worldsAway = Math.floor(\n          (sourceExtent[0] - sourceProjExtent[0]) / worldWidth,\n        );\n      }\n\n      const sourceExtents = wrapAndSliceX(\n        sourceExtent.slice(),\n        sourceProj,\n        true,\n      );\n      sourceExtents.forEach((extent) => {\n        const sourceRange = this.sourceTileGrid_.getTileRangeForExtentAndZ(\n          extent,\n          this.sourceZ_,\n        );\n        const getTile = options.getTileFunction;\n        for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\n          for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\n            const tile = getTile(this.sourceZ_, srcX, srcY, this.pixelRatio_);\n            if (tile) {\n              const offset = worldsAway * worldWidth;\n              this.sourceTiles_.push({tile, offset});\n            }\n          }\n        }\n        ++worldsAway;\n      });\n\n      if (this.sourceTiles_.length === 0) {\n        this.state = TileState.EMPTY;\n      }\n    }\n  }\n\n  /**\n   * Get the tile size.\n   * @return {import('../size.js').Size} Tile size.\n   */\n  getSize() {\n    return this.reprojSize_;\n  }\n\n  /**\n   * Get the data for the tile.\n   * @return {import(\"../DataTile.js\").Data} Tile data.\n   */\n  getData() {\n    return this.reprojData_;\n  }\n\n  /**\n   * Get any loading error.\n   * @return {Error} Loading error.\n   */\n  getError() {\n    return this.reprojError_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const dataSources = [];\n    this.sourceTiles_.forEach((source) => {\n      const tile = source.tile;\n      if (!tile || tile.getState() !== TileState.LOADED) {\n        return;\n      }\n      const size = tile.getSize();\n      const gutter = this.gutter_;\n      /**\n       * @type {import(\"../DataTile.js\").ArrayLike}\n       */\n      let tileData;\n      const arrayData = asArrayLike(tile.getData());\n      if (arrayData) {\n        tileData = arrayData;\n      } else {\n        tileData = toArray(asImageLike(tile.getData()));\n      }\n      const pixelSize = [size[0] + 2 * gutter, size[1] + 2 * gutter];\n      const isFloat = tileData instanceof Float32Array;\n      const pixelCount = pixelSize[0] * pixelSize[1];\n      const DataType = isFloat ? Float32Array : Uint8Array;\n      const tileDataR = new DataType(tileData.buffer);\n      const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n      const bytesPerPixel = (bytesPerElement * tileDataR.length) / pixelCount;\n      const bytesPerRow = tileDataR.byteLength / pixelSize[1];\n      const bandCount = Math.floor(\n        bytesPerRow / bytesPerElement / pixelSize[0],\n      );\n      const packedLength = pixelCount * bandCount;\n      let packedData = tileDataR;\n      if (tileDataR.length !== packedLength) {\n        packedData = new DataType(packedLength);\n        let dataIndex = 0;\n        let rowOffset = 0;\n        const colCount = pixelSize[0] * bandCount;\n        for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n          for (let colIndex = 0; colIndex < colCount; ++colIndex) {\n            packedData[dataIndex++] = tileDataR[rowOffset + colIndex];\n          }\n          rowOffset += bytesPerRow / bytesPerElement;\n        }\n      }\n      const extent = this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord);\n      extent[0] += source.offset;\n      extent[2] += source.offset;\n      const clipExtent = this.clipExtent_?.slice();\n      if (clipExtent) {\n        clipExtent[0] += source.offset;\n        clipExtent[2] += source.offset;\n      }\n      dataSources.push({\n        extent: extent,\n        clipExtent: clipExtent,\n        data: new Uint8Array(packedData.buffer),\n        dataType: DataType,\n        bytesPerPixel: bytesPerPixel,\n        pixelSize: pixelSize,\n      });\n    });\n    this.sourceTiles_.length = 0;\n\n    if (dataSources.length === 0) {\n      this.state = TileState.ERROR;\n    } else {\n      const z = this.wrappedTileCoord_[0];\n      const size = this.targetTileGrid_.getTileSize(z);\n      const targetWidth = typeof size === 'number' ? size : size[0];\n      const targetHeight = typeof size === 'number' ? size : size[1];\n      const targetResolution = this.targetTileGrid_.getResolution(z);\n      const sourceResolution = this.sourceTileGrid_.getResolution(\n        this.sourceZ_,\n      );\n\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(\n        this.wrappedTileCoord_,\n      );\n\n      let dataR, dataU;\n\n      const bytesPerPixel = dataSources[0].bytesPerPixel;\n\n      const reprojs = Math.ceil(bytesPerPixel / 3);\n      for (let reproj = reprojs - 1; reproj >= 0; --reproj) {\n        const sources = [];\n        for (let i = 0, len = dataSources.length; i < len; ++i) {\n          const dataSource = dataSources[i];\n          const buffer = dataSource.data;\n          const pixelSize = dataSource.pixelSize;\n          const width = pixelSize[0];\n          const height = pixelSize[1];\n          const context = createCanvasContext2D(width, height, canvasPool);\n          const imageData = context.createImageData(width, height);\n          const data = imageData.data;\n          let offset = reproj * 3;\n          for (let j = 0, len = data.length; j < len; j += 4) {\n            data[j] = buffer[offset];\n            data[j + 1] = buffer[offset + 1];\n            data[j + 2] = buffer[offset + 2];\n            data[j + 3] = 255;\n            offset += bytesPerPixel;\n          }\n          context.putImageData(imageData, 0, 0);\n          sources.push({\n            extent: dataSource.extent,\n            clipExtent: dataSource.clipExtent,\n            image: context.canvas,\n          });\n        }\n\n        const canvas = renderReprojected(\n          targetWidth,\n          targetHeight,\n          this.pixelRatio_,\n          sourceResolution,\n          this.sourceTileGrid_.getExtent(),\n          targetResolution,\n          targetExtent,\n          this.triangulation_,\n          sources,\n          this.gutter_,\n          false,\n          false,\n          false,\n          //true,\n        );\n\n        for (let i = 0, len = sources.length; i < len; ++i) {\n          const canvas = sources[i].image;\n          const context = canvas.getContext('2d');\n          releaseCanvas(context);\n          canvasPool.push(context.canvas);\n        }\n\n        const context = canvas.getContext('2d');\n        const imageData = context.getImageData(\n          0,\n          0,\n          canvas.width,\n          canvas.height,\n        );\n\n        releaseCanvas(context);\n        canvasPool.push(canvas);\n\n        if (!dataR) {\n          dataU = new Uint8Array(\n            bytesPerPixel * imageData.width * imageData.height,\n          );\n          dataR = new dataSources[0].dataType(dataU.buffer);\n        }\n\n        const data = imageData.data;\n        let offset = reproj * 3;\n        for (let i = 0, len = data.length; i < len; i += 4) {\n          if (data[i + 3] === 255) {\n            dataU[offset] = data[i];\n            dataU[offset + 1] = data[i + 1];\n            dataU[offset + 2] = data[i + 2];\n          } else {\n            dataU[offset] = 0;\n            dataU[offset + 1] = 0;\n            dataU[offset + 2] = 0;\n          }\n          offset += bytesPerPixel;\n        }\n      }\n\n      this.reprojData_ = dataR;\n      this.reprojSize_ = [\n        Math.round(targetWidth * this.pixelRatio_),\n        Math.round(targetHeight * this.pixelRatio_),\n      ];\n      this.state = TileState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state !== TileState.IDLE && this.state !== TileState.ERROR) {\n      return;\n    }\n    this.state = TileState.LOADING;\n    this.changed();\n\n    let leftToLoad = 0;\n\n    this.sourcesListenerKeys_ = [];\n    this.sourceTiles_.forEach(({tile}) => {\n      const state = tile.getState();\n      if (state !== TileState.IDLE && state !== TileState.LOADING) {\n        return;\n      }\n      leftToLoad++;\n\n      const sourceListenKey = listen(\n        tile,\n        EventType.CHANGE,\n        function () {\n          const state = tile.getState();\n          if (\n            state == TileState.LOADED ||\n            state == TileState.ERROR ||\n            state == TileState.EMPTY\n          ) {\n            unlistenByKey(sourceListenKey);\n            leftToLoad--;\n            if (leftToLoad === 0) {\n              this.unlistenSources_();\n              this.reproject_();\n            }\n          }\n        },\n        this,\n      );\n      this.sourcesListenerKeys_.push(sourceListenKey);\n    });\n\n    if (leftToLoad === 0) {\n      setTimeout(this.reproject_.bind(this), 0);\n    } else {\n      this.sourceTiles_.forEach(function ({tile}) {\n        const state = tile.getState();\n        if (state == TileState.IDLE) {\n          tile.load();\n        }\n      });\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSources_() {\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\n    this.sourcesListenerKeys_ = null;\n  }\n}\n\nexport default ReprojDataTile;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}