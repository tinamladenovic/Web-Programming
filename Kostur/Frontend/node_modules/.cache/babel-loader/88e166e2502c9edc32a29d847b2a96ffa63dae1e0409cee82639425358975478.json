{"ast":null,"code":"/**\n * @module ol/source/ImageMapGuide\n */\n\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport { createLoader } from './mapguide.js';\nimport { decode } from '../Image.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object} [params] Additional parameters.\n */\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageMapGuide extends ImageSource {\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n  constructor(options) {\n    super({\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.displayDpi_ = options.displayDpi !== undefined ? options.displayDpi : 96;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = Object.assign({}, options.params);\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.metersPerUnit_ = options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useOverlay_ = options.useOverlay !== undefined ? options.useOverlay : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.loaderProjection_ = null;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    if (!this.loader || this.loaderProjection_ !== projection) {\n      // Lazily create loader to pick up the view projection and to allow `params` updates\n      this.loaderProjection_ = projection;\n      this.loader = createLoader({\n        crossOrigin: this.crossOrigin_,\n        params: this.params_,\n        hidpi: this.hidpi_,\n        metersPerUnit: this.metersPerUnit_,\n        url: this.url_,\n        useOverlay: this.useOverlay_,\n        ratio: this.ratio_,\n        load: (image, src) => {\n          this.image.setImage(image);\n          this.imageLoadFunction_(this.image, src);\n          return decode(image);\n        }\n      });\n    }\n    return super.getImageInternal(extent, resolution, pixelRatio, projection);\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n  changed() {\n    this.image = null;\n    super.changed();\n  }\n}\nexport default ImageMapGuide;","map":{"version":3,"names":["ImageSource","defaultImageLoadFunction","createLoader","decode","ImageMapGuide","constructor","options","interpolate","projection","resolutions","crossOrigin_","crossOrigin","undefined","displayDpi_","displayDpi","params_","Object","assign","params","url_","url","imageLoadFunction_","imageLoadFunction","hidpi_","hidpi","metersPerUnit_","metersPerUnit","ratio_","ratio","useOverlay_","useOverlay","renderedRevision_","loaderProjection_","getParams","getImageInternal","extent","resolution","pixelRatio","loader","load","image","src","setImage","getImageLoadFunction","updateParams","changed","setImageLoadFunction"],"sources":["C:/Users/PC/eclipse-workspace/apache-tomcat-9.0.89/apache-tomcat-9.0.89/webapps/chocolate-factory-2/Kostur/Frontend/front-app/node_modules/ol/source/ImageMapGuide.js"],"sourcesContent":["/**\n * @module ol/source/ImageMapGuide\n */\n\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport {createLoader} from './mapguide.js';\nimport {decode} from '../Image.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object} [params] Additional parameters.\n */\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageMapGuide extends ImageSource {\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n  constructor(options) {\n    super({\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.displayDpi_ =\n      options.displayDpi !== undefined ? options.displayDpi : 96;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = Object.assign({}, options.params);\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.metersPerUnit_ =\n      options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useOverlay_ =\n      options.useOverlay !== undefined ? options.useOverlay : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.loaderProjection_ = null;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    if (!this.loader || this.loaderProjection_ !== projection) {\n      // Lazily create loader to pick up the view projection and to allow `params` updates\n      this.loaderProjection_ = projection;\n      this.loader = createLoader({\n        crossOrigin: this.crossOrigin_,\n        params: this.params_,\n        hidpi: this.hidpi_,\n        metersPerUnit: this.metersPerUnit_,\n        url: this.url_,\n        useOverlay: this.useOverlay_,\n        ratio: this.ratio_,\n        load: (image, src) => {\n          this.image.setImage(image);\n          this.imageLoadFunction_(this.image, src);\n          return decode(image);\n        },\n      });\n    }\n\n    return super.getImageInternal(extent, resolution, pixelRatio, projection);\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  changed() {\n    this.image = null;\n    super.changed();\n  }\n}\n\nexport default ImageMapGuide;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}